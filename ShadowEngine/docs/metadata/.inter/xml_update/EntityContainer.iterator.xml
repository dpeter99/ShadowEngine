<?xml version="1.0" encoding="utf-8" standalone="no"?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="EntityContainer.iterator" kind="class" language="C++" prot="public">
    <compoundname>EntityContainer::iterator</compoundname>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="EntityContainer.iterator.m_CurrentChunk" prot="private" static="no" mutable="no">
        <type>MemoryChunks::iterator</type>
        <definition>MemoryChunks::iterator EntityContainer&lt;Type&gt;::iterator::m_CurrentChunk</definition>
        <argsstring></argsstring>
        <name>m_CurrentChunk</name>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/EntitySystem/EntityContainer.h" line="92" column="1" bodyfile="ShadowEngine/src/EntitySystem/EntityContainer.h" bodystart="92" bodyend="-1" />
      </memberdef>
      <memberdef kind="variable" id="EntityContainer.iterator.m_EndChunk" prot="private" static="no" mutable="no">
        <type>MemoryChunks::iterator</type>
        <definition>MemoryChunks::iterator EntityContainer&lt;Type&gt;::iterator::m_EndChunk</definition>
        <argsstring></argsstring>
        <name>m_EndChunk</name>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/EntitySystem/EntityContainer.h" line="93" column="1" bodyfile="ShadowEngine/src/EntitySystem/EntityContainer.h" bodystart="93" bodyend="-1" />
      </memberdef>
      <memberdef kind="variable" id="EntityContainer.iterator.m_CurrentElement" prot="private" static="no" mutable="no">
        <type>Element *</type>
        <definition>Element* EntityContainer&lt;Type&gt;::iterator::m_CurrentElement</definition>
        <argsstring></argsstring>
        <name>m_CurrentElement</name>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/EntitySystem/EntityContainer.h" line="95" column="1" bodyfile="ShadowEngine/src/EntitySystem/EntityContainer.h" bodystart="95" bodyend="-1" />
      </memberdef>
      <memberdef kind="variable" id="EntityContainer.iterator.index" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int EntityContainer&lt;Type&gt;::iterator::index</definition>
        <argsstring></argsstring>
        <name>index</name>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/EntitySystem/EntityContainer.h" line="96" column="1" bodyfile="ShadowEngine/src/EntitySystem/EntityContainer.h" bodystart="96" bodyend="-1" />
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="EntityContainer.iterator.iterator(typename MemoryChunks::iterator,typename MemoryChunks::iterator)" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>EntityContainer&lt;Type&gt;::iterator::iterator</definition>
        <argsstring>(typename MemoryChunks::iterator begin, typename MemoryChunks::iterator end)</argsstring>
        <name>iterator</name>
        <param>
          <type>typename MemoryChunks::iterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>typename MemoryChunks::iterator</type>
          <declname>end</declname>
        </param>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/EntitySystem/EntityContainer.h" line="100" column="1" bodyfile="ShadowEngine/src/EntitySystem/EntityContainer.h" bodystart="100" bodyend="115" />
      </memberdef>
      <memberdef kind="function" id="EntityContainer.iterator.operator++()" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>
          <ref refid="EntityContainer.iterator" kindref="compound">iterator</ref> &amp;</type>
        <definition>iterator&amp; EntityContainer&lt;Type&gt;::iterator::operator++</definition>
        <argsstring>()</argsstring>
        <name>operator++</name>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/EntitySystem/EntityContainer.h" line="117" column="1" bodyfile="ShadowEngine/src/EntitySystem/EntityContainer.h" bodystart="117" bodyend="144" />
      </memberdef>
      <memberdef kind="function" id="EntityContainer.iterator.operator *()" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Type &amp;</type>
        <definition>Type&amp; EntityContainer&lt;Type&gt;::iterator::operator *</definition>
        <argsstring>() const</argsstring>
        <name>operator *</name>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/EntitySystem/EntityContainer.h" line="146" column="1" bodyfile="ShadowEngine/src/EntitySystem/EntityContainer.h" bodystart="146" bodyend="146" />
      </memberdef>
      <memberdef kind="function" id="EntityContainer.iterator.operator-&gt;()" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Type *</type>
        <definition>Type* EntityContainer&lt;Type&gt;::iterator::operator-&gt;</definition>
        <argsstring>() const</argsstring>
        <name>operator-&gt;</name>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/EntitySystem/EntityContainer.h" line="147" column="1" bodyfile="ShadowEngine/src/EntitySystem/EntityContainer.h" bodystart="147" bodyend="147" />
      </memberdef>
      <memberdef kind="function" id="EntityContainer.iterator.operator==(typename iterator &amp;)" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool EntityContainer&lt;Type&gt;::iterator::operator==</definition>
        <argsstring>(typename iterator &amp;other)</argsstring>
        <name>operator==</name>
        <param>
          <type>typename <ref refid="EntityContainer.iterator" kindref="compound">iterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/EntitySystem/EntityContainer.h" line="149" column="1" bodyfile="ShadowEngine/src/EntitySystem/EntityContainer.h" bodystart="149" bodyend="153" />
      </memberdef>
      <memberdef kind="function" id="EntityContainer.iterator.operator!=(typename iterator &amp;)" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool EntityContainer&lt;Type&gt;::iterator::operator!=</definition>
        <argsstring>(typename iterator &amp;other)</argsstring>
        <name>operator!=</name>
        <param>
          <type>typename <ref refid="EntityContainer.iterator" kindref="compound">iterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/EntitySystem/EntityContainer.h" line="155" column="1" bodyfile="ShadowEngine/src/EntitySystem/EntityContainer.h" bodystart="155" bodyend="159" />
      </memberdef>
    </sectiondef>
    <briefdescription></briefdescription>
    <detaileddescription></detaileddescription>
    <location file="ShadowEngine/src/EntitySystem/EntityContainer.h" line="91" column="1" bodyfile="ShadowEngine/src/EntitySystem/EntityContainer.h" bodystart="90" bodyend="160" />
    <listofallmembers>
      <member refid="EntityContainer.iterator.index" prot="private" virt="non-virtual">
        <scope>EntityContainer::iterator</scope>
        <name>index</name>
      </member>
      <member refid="EntityContainer.iterator.iterator(typename MemoryChunks::iterator,typename MemoryChunks::iterator)" prot="public" virt="non-virtual">
        <scope>EntityContainer::iterator</scope>
        <name>iterator</name>
      </member>
      <member refid="EntityContainer.iterator.m_CurrentChunk" prot="private" virt="non-virtual">
        <scope>EntityContainer::iterator</scope>
        <name>m_CurrentChunk</name>
      </member>
      <member refid="EntityContainer.iterator.m_CurrentElement" prot="private" virt="non-virtual">
        <scope>EntityContainer::iterator</scope>
        <name>m_CurrentElement</name>
      </member>
      <member refid="EntityContainer.iterator.m_EndChunk" prot="private" virt="non-virtual">
        <scope>EntityContainer::iterator</scope>
        <name>m_EndChunk</name>
      </member>
      <member refid="EntityContainer.iterator.operator *()" prot="public" virt="non-virtual">
        <scope>EntityContainer::iterator</scope>
        <name>operator *</name>
      </member>
      <member refid="EntityContainer.iterator.operator!=(typename iterator &amp;)" prot="public" virt="non-virtual">
        <scope>EntityContainer::iterator</scope>
        <name>operator!=</name>
      </member>
      <member refid="EntityContainer.iterator.operator++()" prot="public" virt="non-virtual">
        <scope>EntityContainer::iterator</scope>
        <name>operator++</name>
      </member>
      <member refid="EntityContainer.iterator.operator-&gt;()" prot="public" virt="non-virtual">
        <scope>EntityContainer::iterator</scope>
        <name>operator-&gt;</name>
      </member>
      <member refid="EntityContainer.iterator.operator==(typename iterator &amp;)" prot="public" virt="non-virtual">
        <scope>EntityContainer::iterator</scope>
        <name>operator==</name>
      </member>
    </listofallmembers>
  </compounddef>
</doxygen>