<?xml version="1.0" encoding="utf-8" standalone="no"?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="ShadowEngine.EventSystem.ShadowEventManager" kind="class" language="C++" prot="public">
    <compoundname>ShadowEngine::EventSystem::ShadowEventManager</compoundname>
    <basecompoundref refid="ShadowEngine.ShadowModule" prot="public" virt="non-virtual">ShadowEngine::ShadowModule</basecompoundref>
    <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="ShadowEngine.EventSystem.ShadowEventManager.instance" prot="private" static="yes" mutable="no">
        <type>
          <ref refid="ShadowEngine.EventSystem.ShadowEventManager" kindref="compound">ShadowEventManager</ref> *</type>
        <definition>ShadowEventManager * ShadowEngine::EventSystem::ShadowEventManager::instance</definition>
        <argsstring></argsstring>
        <name>instance</name>
        <initializer>= nullptr</initializer>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowEvents/ShadowEventManager.h" line="13" column="1" bodyfile="ShadowEngine/src/ShadowEvents/ShadowEventManager.h" bodystart="13" bodyend="-1" />
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="ShadowEngine.EventSystem.ShadowEventManager.eventQueue" prot="private" static="no" mutable="no">
        <type>std::queue&lt;<ref refid="ShadowEngine.EventSystem.ShadowEvent" kindref="compound">ShadowEvent</ref> *&gt;</type>
        <definition>std::queue&lt;ShadowEvent*&gt; ShadowEngine::EventSystem::ShadowEventManager::eventQueue</definition>
        <argsstring></argsstring>
        <name>eventQueue</name>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowEvents/ShadowEventManager.h" line="15" column="1" bodyfile="ShadowEngine/src/ShadowEvents/ShadowEventManager.h" bodystart="15" bodyend="-1" />
      </memberdef>
      <memberdef kind="variable" id="ShadowEngine.EventSystem.ShadowEventManager.eventSources" prot="private" static="no" mutable="no">
        <type>std::list&lt;<ref refid="ShadowEngine.EventSystem.IShadowEventSource" kindref="compound">IShadowEventSource</ref> *&gt;</type>
        <definition>std::list&lt;IShadowEventSource*&gt; ShadowEngine::EventSystem::ShadowEventManager::eventSources</definition>
        <argsstring></argsstring>
        <name>eventSources</name>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowEvents/ShadowEventManager.h" line="16" column="1" bodyfile="ShadowEngine/src/ShadowEvents/ShadowEventManager.h" bodystart="16" bodyend="-1" />
      </memberdef>
      <memberdef kind="variable" id="ShadowEngine.EventSystem.ShadowEventManager.eventConsumers" prot="private" static="no" mutable="no">
        <type>std::list&lt;<ref refid="ShadowEngine.EventSystem.IShadowEventListener" kindref="compound">IShadowEventListener</ref> *&gt;</type>
        <definition>std::list&lt;IShadowEventListener*&gt; ShadowEngine::EventSystem::ShadowEventManager::eventConsumers</definition>
        <argsstring></argsstring>
        <name>eventConsumers</name>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowEvents/ShadowEventManager.h" line="17" column="1" bodyfile="ShadowEngine/src/ShadowEvents/ShadowEventManager.h" bodystart="17" bodyend="-1" />
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="ShadowEngine.EventSystem.ShadowEventManager.PollEvents_()" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ShadowEngine::EventSystem::ShadowEventManager::PollEvents_</definition>
        <argsstring>()</argsstring>
        <name>PollEvents_</name>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowEvents/ShadowEventManager.h" line="20" column="1" bodyfile="ShadowEngine/src/ShadowEvents/ShadowEventManager.cpp" bodystart="33" bodyend="39" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.EventSystem.ShadowEventManager.PushNewEvent_(ShadowEvent *)" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ShadowEngine::EventSystem::ShadowEventManager::PushNewEvent_</definition>
        <argsstring>(ShadowEvent *e)</argsstring>
        <name>PushNewEvent_</name>
        <param>
          <type>
            <ref refid="ShadowEngine.EventSystem.ShadowEvent" kindref="compound">ShadowEvent</ref> *</type>
          <declname>e</declname>
        </param>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowEvents/ShadowEventManager.h" line="22" column="1" bodyfile="ShadowEngine/src/ShadowEvents/ShadowEventManager.cpp" bodystart="41" bodyend="44" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.EventSystem.ShadowEventManager.ProcessEvents_()" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ShadowEngine::EventSystem::ShadowEventManager::ProcessEvents_</definition>
        <argsstring>()</argsstring>
        <name>ProcessEvents_</name>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowEvents/ShadowEventManager.h" line="24" column="1" bodyfile="ShadowEngine/src/ShadowEvents/ShadowEventManager.cpp" bodystart="46" bodyend="57" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.EventSystem.ShadowEventManager.AddNewEventSource_(IShadowEventSource *)" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ShadowEngine::EventSystem::ShadowEventManager::AddNewEventSource_</definition>
        <argsstring>(IShadowEventSource *shadowEventSource)</argsstring>
        <name>AddNewEventSource_</name>
        <param>
          <type>
            <ref refid="ShadowEngine.EventSystem.IShadowEventSource" kindref="compound">IShadowEventSource</ref> *</type>
          <declname>shadowEventSource</declname>
        </param>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowEvents/ShadowEventManager.h" line="26" column="1" bodyfile="ShadowEngine/src/ShadowEvents/ShadowEventManager.cpp" bodystart="59" bodyend="62" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.EventSystem.ShadowEventManager.AddNewEventListener_(IShadowEventListener *)" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ShadowEngine::EventSystem::ShadowEventManager::AddNewEventListener_</definition>
        <argsstring>(IShadowEventListener *shadowEventSource)</argsstring>
        <name>AddNewEventListener_</name>
        <param>
          <type>
            <ref refid="ShadowEngine.EventSystem.IShadowEventListener" kindref="compound">IShadowEventListener</ref> *</type>
          <declname>shadowEventSource</declname>
        </param>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowEvents/ShadowEventManager.h" line="28" column="1" bodyfile="ShadowEngine/src/ShadowEvents/ShadowEventManager.cpp" bodystart="64" bodyend="67" />
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="ShadowEngine.EventSystem.ShadowEventManager.ShadowEventManager()" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ShadowEngine::EventSystem::ShadowEventManager::ShadowEventManager</definition>
        <argsstring>()</argsstring>
        <name>ShadowEventManager</name>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowEvents/ShadowEventManager.h" line="31" column="1" bodyfile="ShadowEngine/src/ShadowEvents/ShadowEventManager.cpp" bodystart="11" bodyend="17" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.EventSystem.ShadowEventManager.~ShadowEventManager()" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ShadowEngine::EventSystem::ShadowEventManager::~ShadowEventManager</definition>
        <argsstring>()</argsstring>
        <name>~ShadowEventManager</name>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowEvents/ShadowEventManager.h" line="32" column="1" bodyfile="ShadowEngine/src/ShadowEvents/ShadowEventManager.cpp" bodystart="20" bodyend="26" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.EventSystem.ShadowEventManager.Init()" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ShadowEngine::EventSystem::ShadowEventManager::Init</definition>
        <argsstring>() override</argsstring>
        <name>Init</name>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowEvents/ShadowEventManager.h" line="34" column="1" bodyfile="ShadowEngine/src/ShadowEvents/ShadowEventManager.cpp" bodystart="28" bodyend="31" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.EventSystem.ShadowEventManager.Update()" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void ShadowEngine::EventSystem::ShadowEventManager::Update</definition>
        <argsstring>() override</argsstring>
        <name>Update</name>
        <reimplements refid="ShadowEngine.ShadowModule.Update()">Update</reimplements>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowEvents/ShadowEventManager.h" line="36" column="1" bodyfile="ShadowEngine/src/ShadowEvents/ShadowEventManager.h" bodystart="36" bodyend="36" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.EventSystem.ShadowEventManager.Render()" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void ShadowEngine::EventSystem::ShadowEventManager::Render</definition>
        <argsstring>() override</argsstring>
        <name>Render</name>
        <reimplements refid="ShadowEngine.ShadowModule.Render()">Render</reimplements>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowEvents/ShadowEventManager.h" line="37" column="1" bodyfile="ShadowEngine/src/ShadowEvents/ShadowEventManager.h" bodystart="37" bodyend="37" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.EventSystem.ShadowEventManager.LateRender()" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void ShadowEngine::EventSystem::ShadowEventManager::LateRender</definition>
        <argsstring>() override</argsstring>
        <name>LateRender</name>
        <reimplements refid="ShadowEngine.ShadowModule.LateRender()">LateRender</reimplements>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowEvents/ShadowEventManager.h" line="38" column="1" bodyfile="ShadowEngine/src/ShadowEvents/ShadowEventManager.h" bodystart="38" bodyend="38" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.EventSystem.ShadowEventManager.GetName()" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>std::string ShadowEngine::EventSystem::ShadowEventManager::GetName</definition>
        <argsstring>() override</argsstring>
        <name>GetName</name>
        <reimplements refid="ShadowEngine.ShadowModule.GetName()">GetName</reimplements>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowEvents/ShadowEventManager.h" line="40" column="1" bodyfile="ShadowEngine/src/ShadowEvents/ShadowEventManager.h" bodystart="40" bodyend="40" />
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="ShadowEngine.EventSystem.ShadowEventManager.PollEvents()" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void ShadowEngine::EventSystem::ShadowEventManager::PollEvents</definition>
        <argsstring>()</argsstring>
        <name>PollEvents</name>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowEvents/ShadowEventManager.h" line="42" column="1" bodyfile="ShadowEngine/src/ShadowEvents/ShadowEventManager.h" bodystart="42" bodyend="42" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.EventSystem.ShadowEventManager.PushNewEvent(ShadowEvent *)" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void ShadowEngine::EventSystem::ShadowEventManager::PushNewEvent</definition>
        <argsstring>(ShadowEvent *e)</argsstring>
        <name>PushNewEvent</name>
        <param>
          <type>
            <ref refid="ShadowEngine.EventSystem.ShadowEvent" kindref="compound">ShadowEvent</ref> *</type>
          <declname>e</declname>
        </param>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowEvents/ShadowEventManager.h" line="44" column="1" bodyfile="ShadowEngine/src/ShadowEvents/ShadowEventManager.h" bodystart="44" bodyend="44" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.EventSystem.ShadowEventManager.ProcessEvents()" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void ShadowEngine::EventSystem::ShadowEventManager::ProcessEvents</definition>
        <argsstring>()</argsstring>
        <name>ProcessEvents</name>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowEvents/ShadowEventManager.h" line="46" column="1" bodyfile="ShadowEngine/src/ShadowEvents/ShadowEventManager.h" bodystart="46" bodyend="46" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.EventSystem.ShadowEventManager.AddNewEventSource(IShadowEventSource *)" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void ShadowEngine::EventSystem::ShadowEventManager::AddNewEventSource</definition>
        <argsstring>(IShadowEventSource *shadowEventSource)</argsstring>
        <name>AddNewEventSource</name>
        <param>
          <type>
            <ref refid="ShadowEngine.EventSystem.IShadowEventSource" kindref="compound">IShadowEventSource</ref> *</type>
          <declname>shadowEventSource</declname>
        </param>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowEvents/ShadowEventManager.h" line="48" column="1" bodyfile="ShadowEngine/src/ShadowEvents/ShadowEventManager.h" bodystart="48" bodyend="51" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.EventSystem.ShadowEventManager.AddNewEventListener(IShadowEventListener *)" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void ShadowEngine::EventSystem::ShadowEventManager::AddNewEventListener</definition>
        <argsstring>(IShadowEventListener *shadowEventListener)</argsstring>
        <name>AddNewEventListener</name>
        <param>
          <type>
            <ref refid="ShadowEngine.EventSystem.IShadowEventListener" kindref="compound">IShadowEventListener</ref> *</type>
          <declname>shadowEventListener</declname>
        </param>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowEvents/ShadowEventManager.h" line="53" column="1" bodyfile="ShadowEngine/src/ShadowEvents/ShadowEventManager.h" bodystart="53" bodyend="56" />
      </memberdef>
    </sectiondef>
    <briefdescription></briefdescription>
    <detaileddescription></detaileddescription>
    <inheritancegraph>
      <node id="533">
        <label>ShadowEngine::SHObject</label>
        <link refid="ShadowEngine.SHObject" />
      </node>
      <node id="531">
        <label>ShadowEngine::EventSystem::ShadowEventManager</label>
        <link refid="ShadowEngine.EventSystem.ShadowEventManager" />
        <childnode refid="532" relation="public-inheritance"></childnode>
      </node>
      <node id="532">
        <label>ShadowEngine::ShadowModule</label>
        <link refid="ShadowEngine.ShadowModule" />
        <childnode refid="533" relation="public-inheritance"></childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="536">
        <label>ShadowEngine::SHObject</label>
        <link refid="ShadowEngine.SHObject" />
      </node>
      <node id="534">
        <label>ShadowEngine::EventSystem::ShadowEventManager</label>
        <link refid="ShadowEngine.EventSystem.ShadowEventManager" />
        <childnode refid="535" relation="public-inheritance"></childnode>
      </node>
      <node id="535">
        <label>ShadowEngine::ShadowModule</label>
        <link refid="ShadowEngine.ShadowModule" />
        <childnode refid="536" relation="public-inheritance"></childnode>
      </node>
    </collaborationgraph>
    <location file="ShadowEngine/src/ShadowEvents/ShadowEventManager.h" line="12" column="1" bodyfile="ShadowEngine/src/ShadowEvents/ShadowEventManager.h" bodystart="11" bodyend="57" />
    <listofallmembers>
      <member refid="ShadowEngine.EventSystem.ShadowEventManager.AddNewEventListener(IShadowEventListener *)" prot="public" virt="non-virtual">
        <scope>ShadowEngine::EventSystem::ShadowEventManager</scope>
        <name>AddNewEventListener</name>
      </member>
      <member refid="ShadowEngine.EventSystem.ShadowEventManager.AddNewEventListener_(IShadowEventListener *)" prot="private" virt="non-virtual">
        <scope>ShadowEngine::EventSystem::ShadowEventManager</scope>
        <name>AddNewEventListener_</name>
      </member>
      <member refid="ShadowEngine.EventSystem.ShadowEventManager.AddNewEventSource(IShadowEventSource *)" prot="public" virt="non-virtual">
        <scope>ShadowEngine::EventSystem::ShadowEventManager</scope>
        <name>AddNewEventSource</name>
      </member>
      <member refid="ShadowEngine.EventSystem.ShadowEventManager.AddNewEventSource_(IShadowEventSource *)" prot="private" virt="non-virtual">
        <scope>ShadowEngine::EventSystem::ShadowEventManager</scope>
        <name>AddNewEventSource_</name>
      </member>
      <member refid="ShadowEngine.EventSystem.ShadowEventManager.eventConsumers" prot="private" virt="non-virtual">
        <scope>ShadowEngine::EventSystem::ShadowEventManager</scope>
        <name>eventConsumers</name>
      </member>
      <member refid="ShadowEngine.EventSystem.ShadowEventManager.eventQueue" prot="private" virt="non-virtual">
        <scope>ShadowEngine::EventSystem::ShadowEventManager</scope>
        <name>eventQueue</name>
      </member>
      <member refid="ShadowEngine.EventSystem.ShadowEventManager.eventSources" prot="private" virt="non-virtual">
        <scope>ShadowEngine::EventSystem::ShadowEventManager</scope>
        <name>eventSources</name>
      </member>
      <member refid="ShadowEngine.SHObject.GenerateId()" prot="protected" virt="non-virtual">
        <scope>ShadowEngine::EventSystem::ShadowEventManager</scope>
        <name>GenerateId</name>
      </member>
      <member refid="ShadowEngine.EventSystem.ShadowEventManager.GetName()" prot="public" virt="virtual">
        <scope>ShadowEngine::EventSystem::ShadowEventManager</scope>
        <name>GetName</name>
      </member>
      <member refid="ShadowEngine.SHObject.GetType()" prot="public" virt="pure-virtual">
        <scope>ShadowEngine::EventSystem::ShadowEventManager</scope>
        <name>GetType</name>
      </member>
      <member refid="ShadowEngine.SHObject.GetTypeId()" prot="public" virt="pure-virtual">
        <scope>ShadowEngine::EventSystem::ShadowEventManager</scope>
        <name>GetTypeId</name>
      </member>
      <member refid="ShadowEngine.EventSystem.ShadowEventManager.Init()" prot="public" virt="non-virtual">
        <scope>ShadowEngine::EventSystem::ShadowEventManager</scope>
        <name>Init</name>
      </member>
      <member refid="ShadowEngine.EventSystem.ShadowEventManager.instance" prot="private" virt="non-virtual">
        <scope>ShadowEngine::EventSystem::ShadowEventManager</scope>
        <name>instance</name>
      </member>
      <member refid="ShadowEngine.EventSystem.ShadowEventManager.LateRender()" prot="public" virt="virtual">
        <scope>ShadowEngine::EventSystem::ShadowEventManager</scope>
        <name>LateRender</name>
      </member>
      <member refid="ShadowEngine.EventSystem.ShadowEventManager.PollEvents()" prot="public" virt="non-virtual">
        <scope>ShadowEngine::EventSystem::ShadowEventManager</scope>
        <name>PollEvents</name>
      </member>
      <member refid="ShadowEngine.EventSystem.ShadowEventManager.PollEvents_()" prot="private" virt="non-virtual">
        <scope>ShadowEngine::EventSystem::ShadowEventManager</scope>
        <name>PollEvents_</name>
      </member>
      <member refid="ShadowEngine.EventSystem.ShadowEventManager.ProcessEvents()" prot="public" virt="non-virtual">
        <scope>ShadowEngine::EventSystem::ShadowEventManager</scope>
        <name>ProcessEvents</name>
      </member>
      <member refid="ShadowEngine.EventSystem.ShadowEventManager.ProcessEvents_()" prot="private" virt="non-virtual">
        <scope>ShadowEngine::EventSystem::ShadowEventManager</scope>
        <name>ProcessEvents_</name>
      </member>
      <member refid="ShadowEngine.EventSystem.ShadowEventManager.PushNewEvent(ShadowEvent *)" prot="public" virt="non-virtual">
        <scope>ShadowEngine::EventSystem::ShadowEventManager</scope>
        <name>PushNewEvent</name>
      </member>
      <member refid="ShadowEngine.EventSystem.ShadowEventManager.PushNewEvent_(ShadowEvent *)" prot="private" virt="non-virtual">
        <scope>ShadowEngine::EventSystem::ShadowEventManager</scope>
        <name>PushNewEvent_</name>
      </member>
      <member refid="ShadowEngine.EventSystem.ShadowEventManager.Render()" prot="public" virt="virtual">
        <scope>ShadowEngine::EventSystem::ShadowEventManager</scope>
        <name>Render</name>
      </member>
      <member refid="ShadowEngine.EventSystem.ShadowEventManager.ShadowEventManager()" prot="public" virt="non-virtual">
        <scope>ShadowEngine::EventSystem::ShadowEventManager</scope>
        <name>ShadowEventManager</name>
      </member>
      <member refid="ShadowEngine.EventSystem.ShadowEventManager.Update()" prot="public" virt="virtual">
        <scope>ShadowEngine::EventSystem::ShadowEventManager</scope>
        <name>Update</name>
      </member>
      <member refid="ShadowEngine.EventSystem.ShadowEventManager.~ShadowEventManager()" prot="public" virt="non-virtual">
        <scope>ShadowEngine::EventSystem::ShadowEventManager</scope>
        <name>~ShadowEventManager</name>
      </member>
      <member refid="ShadowEngine.SHObject.~SHObject()" prot="public" virt="virtual">
        <scope>ShadowEngine::EventSystem::ShadowEventManager</scope>
        <name>~SHObject</name>
      </member>
    </listofallmembers>
  </compounddef>
</doxygen>