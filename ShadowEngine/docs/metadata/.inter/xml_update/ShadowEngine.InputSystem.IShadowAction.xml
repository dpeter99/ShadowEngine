<?xml version="1.0" encoding="utf-8" standalone="no"?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="ShadowEngine.InputSystem.IShadowAction" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>ShadowEngine::InputSystem::IShadowAction</compoundname>
    <basecompoundref refid="ShadowEngine.SHObject" prot="public" virt="non-virtual">ShadowEngine::SHObject</basecompoundref>
    <derivedcompoundref refid="ShadowEngine.InputSystem.ShadowAction" prot="public" virt="non-virtual">ShadowEngine::InputSystem::ShadowAction&lt;float&gt;</derivedcompoundref>
    <derivedcompoundref refid="ShadowEngine.InputSystem.ShadowAction" prot="public" virt="non-virtual">ShadowEngine::InputSystem::ShadowAction&lt;T&gt;</derivedcompoundref>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="ShadowEngine.InputSystem.IShadowAction.ProcessEvent(EventSystem::ShadowEvent &amp;)" prot="private" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>SHObject_Base(<ref refid="ShadowEngine.InputSystem.IShadowAction" kindref="compound">IShadowAction</ref>) public void</type>
        <definition>virtual SHObject_Base (IShadowAction) public void ShadowEngine::InputSystem::IShadowAction::ProcessEvent</definition>
        <argsstring>(EventSystem::ShadowEvent &amp;e)=0</argsstring>
        <name>ProcessEvent</name>
        <reimplementedby refid="ShadowEngine.InputSystem.ShadowAction.ProcessEvent(EventSystem::ShadowEvent &amp;)">ProcessEvent</reimplementedby>
        <reimplementedby refid="ShadowEngine.InputSystem.ShadowAction.ProcessEvent(EventSystem::ShadowEvent &amp;)">ProcessEvent</reimplementedby>
        <param>
          <type>
            <ref refid="ShadowEngine.EventSystem.ShadowEvent" kindref="compound">EventSystem::ShadowEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowInput/IShadowAction.h" line="16" column="1" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.InputSystem.IShadowAction.Update()" prot="private" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void ShadowEngine::InputSystem::IShadowAction::Update</definition>
        <argsstring>()=0</argsstring>
        <name>Update</name>
        <reimplementedby refid="ShadowEngine.InputSystem.ShadowAction.Update()">Update</reimplementedby>
        <reimplementedby refid="ShadowEngine.InputSystem.ShadowAction.Update()">Update</reimplementedby>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowInput/IShadowAction.h" line="18" column="1" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.InputSystem.IShadowAction.AddEventListener(ActionState)" prot="private" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void ShadowEngine::InputSystem::IShadowAction::AddEventListener</definition>
        <argsstring>(ActionState state)=0</argsstring>
        <name>AddEventListener</name>
        <reimplementedby refid="ShadowEngine.InputSystem.ShadowAction.AddEventListener(ActionState)">AddEventListener</reimplementedby>
        <reimplementedby refid="ShadowEngine.InputSystem.ShadowAction.AddEventListener(ActionState)">AddEventListener</reimplementedby>
        <param>
          <type>ActionState</type>
          <declname>state</declname>
        </param>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowInput/IShadowAction.h" line="20" column="1" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.InputSystem.IShadowAction.RemoveEventListener()" prot="private" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void ShadowEngine::InputSystem::IShadowAction::RemoveEventListener</definition>
        <argsstring>()=0</argsstring>
        <name>RemoveEventListener</name>
        <reimplementedby refid="ShadowEngine.InputSystem.ShadowAction.RemoveEventListener()">RemoveEventListener</reimplementedby>
        <reimplementedby refid="ShadowEngine.InputSystem.ShadowAction.RemoveEventListener()">RemoveEventListener</reimplementedby>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowInput/IShadowAction.h" line="21" column="1" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.InputSystem.IShadowAction.SetActive(bool)" prot="private" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void ShadowEngine::InputSystem::IShadowAction::SetActive</definition>
        <argsstring>(bool set)=0</argsstring>
        <name>SetActive</name>
        <reimplementedby refid="ShadowEngine.InputSystem.ShadowAction.SetActive(bool)">SetActive</reimplementedby>
        <reimplementedby refid="ShadowEngine.InputSystem.ShadowAction.SetActive(bool)">SetActive</reimplementedby>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowInput/IShadowAction.h" line="23" column="1" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.InputSystem.IShadowAction.GetName()" prot="private" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::string</type>
        <definition>virtual std::string ShadowEngine::InputSystem::IShadowAction::GetName</definition>
        <argsstring>()=0</argsstring>
        <name>GetName</name>
        <reimplementedby refid="ShadowEngine.InputSystem.ShadowAction.GetName()">GetName</reimplementedby>
        <reimplementedby refid="ShadowEngine.InputSystem.ShadowAction.GetName()">GetName</reimplementedby>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowInput/IShadowAction.h" line="25" column="1" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.InputSystem.IShadowAction.GetState()" prot="private" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>ActionState</type>
        <definition>virtual ActionState ShadowEngine::InputSystem::IShadowAction::GetState</definition>
        <argsstring>()=0</argsstring>
        <name>GetState</name>
        <reimplementedby refid="ShadowEngine.InputSystem.ShadowAction.GetState()">GetState</reimplementedby>
        <reimplementedby refid="ShadowEngine.InputSystem.ShadowAction.GetState()">GetState</reimplementedby>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowInput/IShadowAction.h" line="27" column="1" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.InputSystem.IShadowAction.SetState(ActionState)" prot="private" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void ShadowEngine::InputSystem::IShadowAction::SetState</definition>
        <argsstring>(ActionState state)=0</argsstring>
        <name>SetState</name>
        <reimplementedby refid="ShadowEngine.InputSystem.ShadowAction.SetState(ActionState)">SetState</reimplementedby>
        <reimplementedby refid="ShadowEngine.InputSystem.ShadowAction.SetState(ActionState)">SetState</reimplementedby>
        <param>
          <type>ActionState</type>
          <declname>state</declname>
        </param>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowInput/IShadowAction.h" line="28" column="1" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.InputSystem.IShadowAction.GetPerformed()" prot="private" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool ShadowEngine::InputSystem::IShadowAction::GetPerformed</definition>
        <argsstring>()=0</argsstring>
        <name>GetPerformed</name>
        <reimplementedby refid="ShadowEngine.InputSystem.ShadowAction.GetPerformed()">GetPerformed</reimplementedby>
        <reimplementedby refid="ShadowEngine.InputSystem.ShadowAction.GetPerformed()">GetPerformed</reimplementedby>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowInput/IShadowAction.h" line="30" column="1" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.InputSystem.IShadowAction.IsContinuous()" prot="private" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool ShadowEngine::InputSystem::IShadowAction::IsContinuous</definition>
        <argsstring>()=0</argsstring>
        <name>IsContinuous</name>
        <reimplementedby refid="ShadowEngine.InputSystem.ShadowAction.IsContinuous()">IsContinuous</reimplementedby>
        <reimplementedby refid="ShadowEngine.InputSystem.ShadowAction.IsContinuous()">IsContinuous</reimplementedby>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowInput/IShadowAction.h" line="32" column="1" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.InputSystem.IShadowAction.SetContinuous(bool)" prot="private" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void ShadowEngine::InputSystem::IShadowAction::SetContinuous</definition>
        <argsstring>(bool set)=0</argsstring>
        <name>SetContinuous</name>
        <reimplementedby refid="ShadowEngine.InputSystem.ShadowAction.SetContinuous(bool)">SetContinuous</reimplementedby>
        <reimplementedby refid="ShadowEngine.InputSystem.ShadowAction.SetContinuous(bool)">SetContinuous</reimplementedby>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowInput/IShadowAction.h" line="33" column="1" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.InputSystem.IShadowAction.GetBinding()" prot="private" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>
          <ref refid="ShadowEngine.InputSystem.IInputBinding" kindref="compound">IInputBinding</ref> &amp;</type>
        <definition>virtual IInputBinding&amp; ShadowEngine::InputSystem::IShadowAction::GetBinding</definition>
        <argsstring>()=0</argsstring>
        <name>GetBinding</name>
        <reimplementedby refid="ShadowEngine.InputSystem.ShadowAction.GetBinding()">GetBinding</reimplementedby>
        <reimplementedby refid="ShadowEngine.InputSystem.ShadowAction.GetBinding()">GetBinding</reimplementedby>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowInput/IShadowAction.h" line="35" column="1" />
      </memberdef>
    </sectiondef>
    <briefdescription></briefdescription>
    <detaileddescription></detaileddescription>
    <inheritancegraph>
      <node id="260">
        <label>ShadowEngine::InputSystem::IShadowAction</label>
        <link refid="ShadowEngine.InputSystem.IShadowAction" />
        <childnode refid="261" relation="public-inheritance"></childnode>
      </node>
      <node id="261">
        <label>ShadowEngine::SHObject</label>
        <link refid="ShadowEngine.SHObject" />
      </node>
      <node id="262">
        <label>ShadowEngine::InputSystem::ShadowAction&lt;float&gt;</label>
        <link refid="ShadowEngine.InputSystem.ShadowAction" />
        <childnode refid="260" relation="public-inheritance"></childnode>
      </node>
      <node id="263">
        <label>ShadowEngine::InputSystem::ShadowAction&lt;T&gt;</label>
        <link refid="ShadowEngine.InputSystem.ShadowAction" />
        <childnode refid="260" relation="public-inheritance"></childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="264">
        <label>ShadowEngine::InputSystem::IShadowAction</label>
        <link refid="ShadowEngine.InputSystem.IShadowAction" />
        <childnode refid="265" relation="public-inheritance"></childnode>
      </node>
      <node id="265">
        <label>ShadowEngine::SHObject</label>
        <link refid="ShadowEngine.SHObject" />
      </node>
    </collaborationgraph>
    <location file="ShadowEngine/src/ShadowInput/IShadowAction.h" line="11" column="1" bodyfile="ShadowEngine/src/ShadowInput/IShadowAction.h" bodystart="10" bodyend="36" />
    <listofallmembers>
      <member refid="ShadowEngine.InputSystem.IShadowAction.AddEventListener(ActionState)" prot="private" virt="pure-virtual">
        <scope>ShadowEngine::InputSystem::IShadowAction</scope>
        <name>AddEventListener</name>
      </member>
      <member refid="ShadowEngine.SHObject.GenerateId()" prot="protected" virt="non-virtual">
        <scope>ShadowEngine::InputSystem::IShadowAction</scope>
        <name>GenerateId</name>
      </member>
      <member refid="ShadowEngine.InputSystem.IShadowAction.GetBinding()" prot="private" virt="pure-virtual">
        <scope>ShadowEngine::InputSystem::IShadowAction</scope>
        <name>GetBinding</name>
      </member>
      <member refid="ShadowEngine.InputSystem.IShadowAction.GetName()" prot="private" virt="pure-virtual">
        <scope>ShadowEngine::InputSystem::IShadowAction</scope>
        <name>GetName</name>
      </member>
      <member refid="ShadowEngine.InputSystem.IShadowAction.GetPerformed()" prot="private" virt="pure-virtual">
        <scope>ShadowEngine::InputSystem::IShadowAction</scope>
        <name>GetPerformed</name>
      </member>
      <member refid="ShadowEngine.InputSystem.IShadowAction.GetState()" prot="private" virt="pure-virtual">
        <scope>ShadowEngine::InputSystem::IShadowAction</scope>
        <name>GetState</name>
      </member>
      <member refid="ShadowEngine.SHObject.GetType()" prot="public" virt="pure-virtual">
        <scope>ShadowEngine::InputSystem::IShadowAction</scope>
        <name>GetType</name>
      </member>
      <member refid="ShadowEngine.SHObject.GetTypeId()" prot="public" virt="pure-virtual">
        <scope>ShadowEngine::InputSystem::IShadowAction</scope>
        <name>GetTypeId</name>
      </member>
      <member refid="ShadowEngine.InputSystem.IShadowAction.IsContinuous()" prot="private" virt="pure-virtual">
        <scope>ShadowEngine::InputSystem::IShadowAction</scope>
        <name>IsContinuous</name>
      </member>
      <member refid="ShadowEngine.InputSystem.IShadowAction.ProcessEvent(EventSystem::ShadowEvent &amp;)" prot="private" virt="pure-virtual">
        <scope>ShadowEngine::InputSystem::IShadowAction</scope>
        <name>ProcessEvent</name>
      </member>
      <member refid="ShadowEngine.InputSystem.IShadowAction.RemoveEventListener()" prot="private" virt="pure-virtual">
        <scope>ShadowEngine::InputSystem::IShadowAction</scope>
        <name>RemoveEventListener</name>
      </member>
      <member refid="ShadowEngine.InputSystem.IShadowAction.SetActive(bool)" prot="private" virt="pure-virtual">
        <scope>ShadowEngine::InputSystem::IShadowAction</scope>
        <name>SetActive</name>
      </member>
      <member refid="ShadowEngine.InputSystem.IShadowAction.SetContinuous(bool)" prot="private" virt="pure-virtual">
        <scope>ShadowEngine::InputSystem::IShadowAction</scope>
        <name>SetContinuous</name>
      </member>
      <member refid="ShadowEngine.InputSystem.IShadowAction.SetState(ActionState)" prot="private" virt="pure-virtual">
        <scope>ShadowEngine::InputSystem::IShadowAction</scope>
        <name>SetState</name>
      </member>
      <member refid="ShadowEngine.InputSystem.IShadowAction.Update()" prot="private" virt="pure-virtual">
        <scope>ShadowEngine::InputSystem::IShadowAction</scope>
        <name>Update</name>
      </member>
      <member refid="ShadowEngine.SHObject.~SHObject()" prot="public" virt="virtual">
        <scope>ShadowEngine::InputSystem::IShadowAction</scope>
        <name>~SHObject</name>
      </member>
    </listofallmembers>
  </compounddef>
</doxygen>