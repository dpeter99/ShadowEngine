<?xml version="1.0" encoding="utf-8" standalone="no"?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="ShadowEngine.Rendering.D3D12.D3D12CommandList" kind="class" language="C++" prot="public">
    <compoundname>ShadowEngine::Rendering::D3D12::D3D12CommandList</compoundname>
    <includes refid="_d3_d12_command_list_8h" local="no">D3D12CommandList.h</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="ShadowEngine.Rendering.D3D12.D3D12CommandList.commandAllocator" prot="private" static="no" mutable="no">
        <type>com_ptr&lt;ID3D12CommandAllocator&gt;</type>
        <definition>com_ptr&lt;ID3D12CommandAllocator&gt; ShadowEngine::Rendering::D3D12::D3D12CommandList::commandAllocator</definition>
        <argsstring></argsstring>
        <name>commandAllocator</name>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/Platform/D3D12/D3D12CommandList.h" line="21" column="1" bodyfile="ShadowEngine/src/Platform/D3D12/D3D12CommandList.h" bodystart="21" bodyend="-1" />
      </memberdef>
      <memberdef kind="variable" id="ShadowEngine.Rendering.D3D12.D3D12CommandList.commandList" prot="private" static="no" mutable="no">
        <type>com_ptr&lt;ID3D12GraphicsCommandList&gt;</type>
        <definition>com_ptr&lt;ID3D12GraphicsCommandList&gt; ShadowEngine::Rendering::D3D12::D3D12CommandList::commandList</definition>
        <argsstring></argsstring>
        <name>commandList</name>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/Platform/D3D12/D3D12CommandList.h" line="22" column="1" bodyfile="ShadowEngine/src/Platform/D3D12/D3D12CommandList.h" bodystart="22" bodyend="-1" />
      </memberdef>
      <memberdef kind="variable" id="ShadowEngine.Rendering.D3D12.D3D12CommandList.renderTarget" prot="private" static="no" mutable="no">
        <type>D3D12_CPU_DESCRIPTOR_HANDLE</type>
        <definition>D3D12_CPU_DESCRIPTOR_HANDLE ShadowEngine::Rendering::D3D12::D3D12CommandList::renderTarget</definition>
        <argsstring></argsstring>
        <name>renderTarget</name>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/Platform/D3D12/D3D12CommandList.h" line="24" column="1" bodyfile="ShadowEngine/src/Platform/D3D12/D3D12CommandList.h" bodystart="24" bodyend="-1" />
      </memberdef>
      <memberdef kind="variable" id="ShadowEngine.Rendering.D3D12.D3D12CommandList.depthBuffer" prot="private" static="no" mutable="no">
        <type>D3D12_CPU_DESCRIPTOR_HANDLE</type>
        <definition>D3D12_CPU_DESCRIPTOR_HANDLE ShadowEngine::Rendering::D3D12::D3D12CommandList::depthBuffer</definition>
        <argsstring></argsstring>
        <name>depthBuffer</name>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/Platform/D3D12/D3D12CommandList.h" line="25" column="1" bodyfile="ShadowEngine/src/Platform/D3D12/D3D12CommandList.h" bodystart="25" bodyend="-1" />
      </memberdef>
      <memberdef kind="variable" id="ShadowEngine.Rendering.D3D12.D3D12CommandList.isBeingRecorded" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool ShadowEngine::Rendering::D3D12::D3D12CommandList::isBeingRecorded</definition>
        <argsstring></argsstring>
        <name>isBeingRecorded</name>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/Platform/D3D12/D3D12CommandList.h" line="27" column="1" bodyfile="ShadowEngine/src/Platform/D3D12/D3D12CommandList.h" bodystart="27" bodyend="-1" />
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="ShadowEngine.Rendering.D3D12.D3D12CommandList.D3D12CommandList()" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ShadowEngine::Rendering::D3D12::D3D12CommandList::D3D12CommandList</definition>
        <argsstring>()</argsstring>
        <name>D3D12CommandList</name>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/Platform/D3D12/D3D12CommandList.h" line="29" column="1" bodyfile="ShadowEngine/src/Platform/D3D12/D3D12CommandList.cpp" bodystart="9" bodyend="20" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.Rendering.D3D12.D3D12CommandList.GetCommandList()" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>com_ptr&lt;ID3D12GraphicsCommandList&gt;</type>
        <definition>com_ptr&lt;ID3D12GraphicsCommandList&gt; ShadowEngine::Rendering::D3D12::D3D12CommandList::GetCommandList</definition>
        <argsstring>()</argsstring>
        <name>GetCommandList</name>
        <briefdescription></briefdescription>
        <detaileddescription>
          <para>
            <simplesect kind="return">
              <para>The dx12 command list </para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/Platform/D3D12/D3D12CommandList.h" line="35" column="1" bodyfile="ShadowEngine/src/Platform/D3D12/D3D12CommandList.h" bodystart="35" bodyend="35" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.Rendering.D3D12.D3D12CommandList.UseShader(const Ref&lt;D3D12Shader&gt; &amp;)" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ShadowEngine::Rendering::D3D12::D3D12CommandList::UseShader</definition>
        <argsstring>(const Ref&lt;D3D12Shader&gt; &amp;shader)</argsstring>
        <name>UseShader</name>
        <param>
          <type>const Ref&lt;<ref refid="ShadowEngine.Rendering.D3D12.D3D12Shader" kindref="compound">D3D12Shader</ref>&gt; &amp;</type>
          <declname>shader</declname>
        </param>
        <briefdescription>
          <para>Binds a new shader to the command list to use. </para>
        </briefdescription>
        <detaileddescription>
          <para>
            <parameterlist kind="param">
              <parameteritem>
                <parameternamelist>
                  <parametername>shader</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>The shader to be used </para>
                </parameterdescription>
              </parameteritem>
            </parameterlist>
          </para>
        </detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/Platform/D3D12/D3D12CommandList.h" line="43" column="1" bodyfile="ShadowEngine/src/Platform/D3D12/D3D12CommandList.cpp" bodystart="22" bodyend="26" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.Rendering.D3D12.D3D12CommandList.Reset()" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ShadowEngine::Rendering::D3D12::D3D12CommandList::Reset</definition>
        <argsstring>()</argsstring>
        <name>Reset</name>
        <briefdescription>
          <para>Resets the Command List Should only be used when we are sure it is not in use. </para>
        </briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/Platform/D3D12/D3D12CommandList.h" line="49" column="1" bodyfile="ShadowEngine/src/Platform/D3D12/D3D12CommandList.cpp" bodystart="28" bodyend="35" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.Rendering.D3D12.D3D12CommandList.StartRecording()" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ShadowEngine::Rendering::D3D12::D3D12CommandList::StartRecording</definition>
        <argsstring>()</argsstring>
        <name>StartRecording</name>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/Platform/D3D12/D3D12CommandList.h" line="51" column="1" bodyfile="ShadowEngine/src/Platform/D3D12/D3D12CommandList.cpp" bodystart="37" bodyend="44" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.Rendering.D3D12.D3D12CommandList.SetViewports(D3D12_VIEWPORT)" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ShadowEngine::Rendering::D3D12::D3D12CommandList::SetViewports</definition>
        <argsstring>(D3D12_VIEWPORT viewPort)</argsstring>
        <name>SetViewports</name>
        <param>
          <type>D3D12_VIEWPORT</type>
          <declname>viewPort</declname>
        </param>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/Platform/D3D12/D3D12CommandList.h" line="53" column="1" bodyfile="ShadowEngine/src/Platform/D3D12/D3D12CommandList.cpp" bodystart="46" bodyend="49" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.Rendering.D3D12.D3D12CommandList.SetScissorRects(D3D12_RECT)" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ShadowEngine::Rendering::D3D12::D3D12CommandList::SetScissorRects</definition>
        <argsstring>(D3D12_RECT scissorRect)</argsstring>
        <name>SetScissorRects</name>
        <param>
          <type>D3D12_RECT</type>
          <declname>scissorRect</declname>
        </param>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/Platform/D3D12/D3D12CommandList.h" line="55" column="1" bodyfile="ShadowEngine/src/Platform/D3D12/D3D12CommandList.cpp" bodystart="51" bodyend="54" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.Rendering.D3D12.D3D12CommandList.ResourceBarrier(D3D12_RESOURCE_BARRIER *)" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ShadowEngine::Rendering::D3D12::D3D12CommandList::ResourceBarrier</definition>
        <argsstring>(D3D12_RESOURCE_BARRIER *barrier)</argsstring>
        <name>ResourceBarrier</name>
        <param>
          <type>D3D12_RESOURCE_BARRIER *</type>
          <declname>barrier</declname>
        </param>
        <briefdescription>
          <para>Adds a new resource barrier to the command list. </para>
        </briefdescription>
        <detaileddescription>
          <para>
            <parameterlist kind="param">
              <parameteritem>
                <parameternamelist>
                  <parametername>barrier</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>The barrier to use Used to wait for a resource transition to happen (eg. rendertarget is available) </para>
                </parameterdescription>
              </parameteritem>
            </parameterlist>
          </para>
        </detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/Platform/D3D12/D3D12CommandList.h" line="62" column="1" bodyfile="ShadowEngine/src/Platform/D3D12/D3D12CommandList.cpp" bodystart="56" bodyend="59" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.Rendering.D3D12.D3D12CommandList.SetRenderTargets(Ref&lt;D3D12SwapChain&gt;,Ref&lt;D3D12DepthBuffer&gt;)" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ShadowEngine::Rendering::D3D12::D3D12CommandList::SetRenderTargets</definition>
        <argsstring>(Ref&lt;D3D12SwapChain&gt; swapchain, Ref&lt;D3D12DepthBuffer&gt; depthBuffer)</argsstring>
        <name>SetRenderTargets</name>
        <param>
          <type>Ref&lt;<ref refid="ShadowEngine.Rendering.D3D12.D3D12SwapChain" kindref="compound">D3D12SwapChain</ref>&gt;</type>
          <declname>swapchain</declname>
        </param>
        <param>
          <type>Ref&lt;<ref refid="ShadowEngine.Rendering.D3D12.D3D12DepthBuffer" kindref="compound">D3D12DepthBuffer</ref>&gt;</type>
          <declname>depthBuffer</declname>
        </param>
        <briefdescription>
          <para>Set the render targets used in this command list. </para>
        </briefdescription>
        <detaileddescription>
          <para>
            <parameterlist kind="param">
              <parameteritem>
                <parameternamelist>
                  <parametername>swapchain</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>The swap chain to get the render target form </para>
                </parameterdescription>
              </parameteritem>
              <parameteritem>
                <parameternamelist>
                  <parametername>depthBuffer</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>The depth buffer to use </para>
                </parameterdescription>
              </parameteritem>
            </parameterlist>
          </para>
        </detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/Platform/D3D12/D3D12CommandList.h" line="69" column="1" bodyfile="ShadowEngine/src/Platform/D3D12/D3D12CommandList.cpp" bodystart="61" bodyend="66" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.Rendering.D3D12.D3D12CommandList.ClearRenderTargetView(const float *)" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ShadowEngine::Rendering::D3D12::D3D12CommandList::ClearRenderTargetView</definition>
        <argsstring>(const float *color)</argsstring>
        <name>ClearRenderTargetView</name>
        <param>
          <type>const float *</type>
          <declname>color</declname>
        </param>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/Platform/D3D12/D3D12CommandList.h" line="73" column="1" bodyfile="ShadowEngine/src/Platform/D3D12/D3D12CommandList.cpp" bodystart="68" bodyend="71" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.Rendering.D3D12.D3D12CommandList.ClearDepthStencilView(float,uint8_t)" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ShadowEngine::Rendering::D3D12::D3D12CommandList::ClearDepthStencilView</definition>
        <argsstring>(float depth, uint8_t stencil)</argsstring>
        <name>ClearDepthStencilView</name>
        <param>
          <type>float</type>
          <declname>depth</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>stencil</declname>
        </param>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/Platform/D3D12/D3D12CommandList.h" line="75" column="1" bodyfile="ShadowEngine/src/Platform/D3D12/D3D12CommandList.cpp" bodystart="73" bodyend="76" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.Rendering.D3D12.D3D12CommandList.Close()" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ShadowEngine::Rendering::D3D12::D3D12CommandList::Close</definition>
        <argsstring>()</argsstring>
        <name>Close</name>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/Platform/D3D12/D3D12CommandList.h" line="76" column="1" bodyfile="ShadowEngine/src/Platform/D3D12/D3D12CommandList.cpp" bodystart="78" bodyend="82" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.Rendering.D3D12.D3D12CommandList.DrawMesh(const std::shared_ptr&lt;Assets::Mesh&gt; &amp;)" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ShadowEngine::Rendering::D3D12::D3D12CommandList::DrawMesh</definition>
        <argsstring>(const std::shared_ptr&lt;Assets::Mesh&gt; &amp;mesh)</argsstring>
        <name>DrawMesh</name>
        <param>
          <type>const std::shared_ptr&lt;<ref refid="ShadowEngine.Assets.Mesh" kindref="compound">Assets::Mesh</ref>&gt; &amp;</type>
          <declname>mesh</declname>
        </param>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/Platform/D3D12/D3D12CommandList.h" line="77" column="1" bodyfile="ShadowEngine/src/Platform/D3D12/D3D12CommandList.cpp" bodystart="84" bodyend="93" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.Rendering.D3D12.D3D12CommandList.BindConstantBuffer(const Ref&lt;ConstantBuffer&gt; &amp;,int)" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ShadowEngine::Rendering::D3D12::D3D12CommandList::BindConstantBuffer</definition>
        <argsstring>(const Ref&lt;ConstantBuffer&gt; &amp;buffer, int materialSlotIndex)</argsstring>
        <name>BindConstantBuffer</name>
        <param>
          <type>const Ref&lt;<ref refid="ShadowEngine.Rendering.ConstantBuffer" kindref="compound">ConstantBuffer</ref>&gt; &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>materialSlotIndex</declname>
        </param>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/Platform/D3D12/D3D12CommandList.h" line="79" column="1" bodyfile="ShadowEngine/src/Platform/D3D12/D3D12CommandList.cpp" bodystart="95" bodyend="99" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.Rendering.D3D12.D3D12CommandList.BindConstantBuffer(const ConstantBuffer &amp;,int)" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ShadowEngine::Rendering::D3D12::D3D12CommandList::BindConstantBuffer</definition>
        <argsstring>(const ConstantBuffer &amp;buffer, int registerIndex)</argsstring>
        <name>BindConstantBuffer</name>
        <param>
          <type>const <ref refid="ShadowEngine.Rendering.ConstantBuffer" kindref="compound">ConstantBuffer</ref> &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>registerIndex</declname>
        </param>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/Platform/D3D12/D3D12CommandList.h" line="80" column="1" bodyfile="ShadowEngine/src/Platform/D3D12/D3D12CommandList.cpp" bodystart="101" bodyend="105" />
      </memberdef>
    </sectiondef>
    <briefdescription>
      <para>A list of commands Used to record graphics/compute commands and than submit them at once. </para>
    </briefdescription>
    <detaileddescription></detaileddescription>
    <location file="ShadowEngine/src/Platform/D3D12/D3D12CommandList.h" line="20" column="1" bodyfile="ShadowEngine/src/Platform/D3D12/D3D12CommandList.h" bodystart="19" bodyend="81" />
    <listofallmembers>
      <member refid="ShadowEngine.Rendering.D3D12.D3D12CommandList.BindConstantBuffer(const Ref&lt;ConstantBuffer&gt; &amp;,int)" prot="public" virt="non-virtual">
        <scope>ShadowEngine::Rendering::D3D12::D3D12CommandList</scope>
        <name>BindConstantBuffer</name>
      </member>
      <member refid="ShadowEngine.Rendering.D3D12.D3D12CommandList.BindConstantBuffer(const ConstantBuffer &amp;,int)" prot="public" virt="non-virtual">
        <scope>ShadowEngine::Rendering::D3D12::D3D12CommandList</scope>
        <name>BindConstantBuffer</name>
      </member>
      <member refid="ShadowEngine.Rendering.D3D12.D3D12CommandList.ClearDepthStencilView(float,uint8_t)" prot="public" virt="non-virtual">
        <scope>ShadowEngine::Rendering::D3D12::D3D12CommandList</scope>
        <name>ClearDepthStencilView</name>
      </member>
      <member refid="ShadowEngine.Rendering.D3D12.D3D12CommandList.ClearRenderTargetView(const float *)" prot="public" virt="non-virtual">
        <scope>ShadowEngine::Rendering::D3D12::D3D12CommandList</scope>
        <name>ClearRenderTargetView</name>
      </member>
      <member refid="ShadowEngine.Rendering.D3D12.D3D12CommandList.Close()" prot="public" virt="non-virtual">
        <scope>ShadowEngine::Rendering::D3D12::D3D12CommandList</scope>
        <name>Close</name>
      </member>
      <member refid="ShadowEngine.Rendering.D3D12.D3D12CommandList.commandAllocator" prot="private" virt="non-virtual">
        <scope>ShadowEngine::Rendering::D3D12::D3D12CommandList</scope>
        <name>commandAllocator</name>
      </member>
      <member refid="ShadowEngine.Rendering.D3D12.D3D12CommandList.commandList" prot="private" virt="non-virtual">
        <scope>ShadowEngine::Rendering::D3D12::D3D12CommandList</scope>
        <name>commandList</name>
      </member>
      <member refid="ShadowEngine.Rendering.D3D12.D3D12CommandList.D3D12CommandList()" prot="public" virt="non-virtual">
        <scope>ShadowEngine::Rendering::D3D12::D3D12CommandList</scope>
        <name>D3D12CommandList</name>
      </member>
      <member refid="ShadowEngine.Rendering.D3D12.D3D12CommandList.depthBuffer" prot="private" virt="non-virtual">
        <scope>ShadowEngine::Rendering::D3D12::D3D12CommandList</scope>
        <name>depthBuffer</name>
      </member>
      <member refid="ShadowEngine.Rendering.D3D12.D3D12CommandList.DrawMesh(const std::shared_ptr&lt;Assets::Mesh&gt; &amp;)" prot="public" virt="non-virtual">
        <scope>ShadowEngine::Rendering::D3D12::D3D12CommandList</scope>
        <name>DrawMesh</name>
      </member>
      <member refid="ShadowEngine.Rendering.D3D12.D3D12CommandList.GetCommandList()" prot="public" virt="non-virtual">
        <scope>ShadowEngine::Rendering::D3D12::D3D12CommandList</scope>
        <name>GetCommandList</name>
      </member>
      <member refid="ShadowEngine.Rendering.D3D12.D3D12CommandList.isBeingRecorded" prot="private" virt="non-virtual">
        <scope>ShadowEngine::Rendering::D3D12::D3D12CommandList</scope>
        <name>isBeingRecorded</name>
      </member>
      <member refid="ShadowEngine.Rendering.D3D12.D3D12CommandList.renderTarget" prot="private" virt="non-virtual">
        <scope>ShadowEngine::Rendering::D3D12::D3D12CommandList</scope>
        <name>renderTarget</name>
      </member>
      <member refid="ShadowEngine.Rendering.D3D12.D3D12CommandList.Reset()" prot="public" virt="non-virtual">
        <scope>ShadowEngine::Rendering::D3D12::D3D12CommandList</scope>
        <name>Reset</name>
      </member>
      <member refid="ShadowEngine.Rendering.D3D12.D3D12CommandList.ResourceBarrier(D3D12_RESOURCE_BARRIER *)" prot="public" virt="non-virtual">
        <scope>ShadowEngine::Rendering::D3D12::D3D12CommandList</scope>
        <name>ResourceBarrier</name>
      </member>
      <member refid="ShadowEngine.Rendering.D3D12.D3D12CommandList.SetRenderTargets(Ref&lt;D3D12SwapChain&gt;,Ref&lt;D3D12DepthBuffer&gt;)" prot="public" virt="non-virtual">
        <scope>ShadowEngine::Rendering::D3D12::D3D12CommandList</scope>
        <name>SetRenderTargets</name>
      </member>
      <member refid="ShadowEngine.Rendering.D3D12.D3D12CommandList.SetScissorRects(D3D12_RECT)" prot="public" virt="non-virtual">
        <scope>ShadowEngine::Rendering::D3D12::D3D12CommandList</scope>
        <name>SetScissorRects</name>
      </member>
      <member refid="ShadowEngine.Rendering.D3D12.D3D12CommandList.SetViewports(D3D12_VIEWPORT)" prot="public" virt="non-virtual">
        <scope>ShadowEngine::Rendering::D3D12::D3D12CommandList</scope>
        <name>SetViewports</name>
      </member>
      <member refid="ShadowEngine.Rendering.D3D12.D3D12CommandList.StartRecording()" prot="public" virt="non-virtual">
        <scope>ShadowEngine::Rendering::D3D12::D3D12CommandList</scope>
        <name>StartRecording</name>
      </member>
      <member refid="ShadowEngine.Rendering.D3D12.D3D12CommandList.UseShader(const Ref&lt;D3D12Shader&gt; &amp;)" prot="public" virt="non-virtual">
        <scope>ShadowEngine::Rendering::D3D12::D3D12CommandList</scope>
        <name>UseShader</name>
      </member>
    </listofallmembers>
  </compounddef>
</doxygen>