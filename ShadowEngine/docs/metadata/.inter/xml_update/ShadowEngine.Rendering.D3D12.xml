<?xml version="1.0" encoding="utf-8" standalone="no"?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="ShadowEngine.Rendering.D3D12" kind="namespace" language="C++">
    <compoundname>ShadowEngine::Rendering::D3D12</compoundname>
    <innerclass refid="ShadowEngine.Rendering.D3D12.D3D12CommandList" prot="public">ShadowEngine::Rendering::D3D12::D3D12CommandList</innerclass>
    <innerclass refid="ShadowEngine.Rendering.D3D12.D3D12CommandQueue" prot="public">ShadowEngine::Rendering::D3D12::D3D12CommandQueue</innerclass>
    <innerclass refid="ShadowEngine.Rendering.D3D12.D3D12ConstantBuffer" prot="public">ShadowEngine::Rendering::D3D12::D3D12ConstantBuffer</innerclass>
    <innerclass refid="ShadowEngine.Rendering.D3D12.D3D12Context" prot="public">ShadowEngine::Rendering::D3D12::D3D12Context</innerclass>
    <innerclass refid="ShadowEngine.Rendering.D3D12.D3D12DepthBuffer" prot="public">ShadowEngine::Rendering::D3D12::D3D12DepthBuffer</innerclass>
    <innerclass refid="ShadowEngine.Rendering.D3D12.D3D12DescriptorHeap" prot="public">ShadowEngine::Rendering::D3D12::D3D12DescriptorHeap</innerclass>
    <innerclass refid="ShadowEngine.Rendering.D3D12.D3D12Fence" prot="public">ShadowEngine::Rendering::D3D12::D3D12Fence</innerclass>
    <innerclass refid="ShadowEngine.Rendering.D3D12.D3D12IndexBuffer" prot="public">ShadowEngine::Rendering::D3D12::D3D12IndexBuffer</innerclass>
    <innerclass refid="ShadowEngine.Rendering.D3D12.D3D12RendererAPI" prot="public">ShadowEngine::Rendering::D3D12::D3D12RendererAPI</innerclass>
    <innerclass refid="ShadowEngine.Rendering.D3D12.D3D12Shader" prot="public">ShadowEngine::Rendering::D3D12::D3D12Shader</innerclass>
    <innerclass refid="ShadowEngine.Rendering.D3D12.D3D12SwapChain" prot="public">ShadowEngine::Rendering::D3D12::D3D12SwapChain</innerclass>
    <innerclass refid="ShadowEngine.Rendering.D3D12.D3D12VertexBuffer" prot="public">ShadowEngine::Rendering::D3D12::D3D12VertexBuffer</innerclass>
    <innerclass refid="ShadowEngine.Rendering.D3D12.HResultTester" prot="public">ShadowEngine::Rendering::D3D12::HResultTester</innerclass>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="ShadowEngine.Rendering.D3D12.com_ptr" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Microsoft::WRL::ComPtr&lt;T&gt;</type>
        <definition>using ShadowEngine::Rendering::D3D12::com_ptr = typedef Microsoft::WRL::ComPtr&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>com_ptr</name>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/Platform/D3D12/Common.h" line="27" column="1" bodyfile="ShadowEngine/src/Platform/D3D12/Common.h" bodystart="27" bodyend="-1" />
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="ShadowEngine.Rendering.D3D12.BlobAsString(com_ptr&lt;ID3DBlob&gt;)" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* ShadowEngine::Rendering::D3D12::BlobAsString</definition>
        <argsstring>(com_ptr&lt;ID3DBlob&gt; blob)</argsstring>
        <name>BlobAsString</name>
        <param>
          <type>com_ptr&lt;ID3DBlob&gt;</type>
          <declname>blob</declname>
        </param>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/Platform/D3D12/Common.h" line="32" column="1" bodyfile="ShadowEngine/src/Platform/D3D12/Common.h" bodystart="32" bodyend="34" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.Rendering.D3D12.WFormat(const wchar_t *,...)" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::wstring</type>
        <definition>std::wstring ShadowEngine::Rendering::D3D12::WFormat</definition>
        <argsstring>(const wchar_t *format,...)</argsstring>
        <name>WFormat</name>
        <param>
          <type>const wchar_t *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/Platform/D3D12/Common.h" line="59" column="1" bodyfile="ShadowEngine/src/Platform/D3D12/Common.h" bodystart="59" bodyend="68" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.Rendering.D3D12.GetAdapters(IDXGIFactory6 *,std::vector&lt;com_ptr&lt;IDXGIAdapter1&gt;&gt; &amp;)" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ShadowEngine::Rendering::D3D12::GetAdapters</definition>
        <argsstring>(IDXGIFactory6 *dxgiFactory, std::vector&lt;com_ptr&lt;IDXGIAdapter1&gt;&gt; &amp;adapters)</argsstring>
        <name>GetAdapters</name>
        <param>
          <type>IDXGIFactory6 *</type>
          <declname>dxgiFactory</declname>
        </param>
        <param>
          <type>std::vector&lt;com_ptr&lt;IDXGIAdapter1&gt;&gt; &amp;</type>
          <declname>adapters</declname>
        </param>
        <briefdescription>
          <para>Loads the GPU adapters. </para>
        </briefdescription>
        <detaileddescription>
          <para>
            <parameterlist kind="param">
              <parameteritem>
                <parameternamelist>
                  <parametername>dxgiFactory</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>DXGI factory instance </para>
                </parameterdescription>
              </parameteritem>
              <parameteritem>
                <parameternamelist>
                  <parametername>adapters</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>Returns the Vector of adapters </para>
                </parameterdescription>
              </parameteritem>
            </parameterlist>
          </para>
        </detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/Platform/D3D12/D3D12RendererAPI.cpp" line="23" column="1" bodyfile="ShadowEngine/src/Platform/D3D12/D3D12RendererAPI.cpp" bodystart="23" bodyend="48" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.Rendering.D3D12.ShaderDataTypeToD3D12BaseType(ShaderDataType)" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DXGI_FORMAT</type>
        <definition>static DXGI_FORMAT ShadowEngine::Rendering::D3D12::ShaderDataTypeToD3D12BaseType</definition>
        <argsstring>(ShaderDataType type)</argsstring>
        <name>ShaderDataTypeToD3D12BaseType</name>
        <param>
          <type>ShaderDataType</type>
          <declname>type</declname>
        </param>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/Platform/D3D12/D3D12Shader.cpp" line="9" column="1" bodyfile="ShadowEngine/src/Platform/D3D12/D3D12Shader.cpp" bodystart="9" bodyend="25" />
      </memberdef>
    </sectiondef>
    <briefdescription></briefdescription>
    <detaileddescription></detaileddescription>
    <location file="ShadowEngine/src/Platform/D3D12/Common.h" line="25" column="1" />
  </compounddef>
</doxygen>