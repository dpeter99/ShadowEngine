<?xml version="1.0" encoding="utf-8" standalone="no"?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="ShadowEngine.Rendering.RenderScene" kind="class" language="C++" prot="public">
    <compoundname>ShadowEngine::Rendering::RenderScene</compoundname>
    <sectiondef kind="private-type">
      <memberdef kind="typedef" id="ShadowEngine.Rendering.RenderScene.RenderNodeList" prot="private" static="no">
        <type>std::vector&lt;Ref&lt;<ref refid="ShadowEngine.Rendering.RenderNode" kindref="compound">RenderNode</ref>&gt;&gt;</type>
        <definition>using ShadowEngine::Rendering::RenderScene::RenderNodeList =  std::vector&lt;Ref&lt;RenderNode&gt;&gt;</definition>
        <argsstring></argsstring>
        <name>RenderNodeList</name>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowRenderer/RenderScene.h" line="29" column="1" bodyfile="ShadowEngine/src/ShadowRenderer/RenderScene.h" bodystart="29" bodyend="-1" />
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="ShadowEngine.Rendering.RenderScene.iterator" prot="public" static="no">
        <type>RenderNodeList::iterator</type>
        <definition>using ShadowEngine::Rendering::RenderScene::iterator =  RenderNodeList::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowRenderer/RenderScene.h" line="44" column="1" bodyfile="ShadowEngine/src/ShadowRenderer/RenderScene.h" bodystart="44" bodyend="-1" />
      </memberdef>
      <memberdef kind="typedef" id="ShadowEngine.Rendering.RenderScene.const_iterator" prot="public" static="no">
        <type>RenderNodeList::const_iterator</type>
        <definition>using ShadowEngine::Rendering::RenderScene::const_iterator =  RenderNodeList::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowRenderer/RenderScene.h" line="45" column="1" bodyfile="ShadowEngine/src/ShadowRenderer/RenderScene.h" bodystart="45" bodyend="-1" />
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="ShadowEngine.Rendering.RenderScene.nodes" prot="private" static="no" mutable="no">
        <type>RenderNodeList</type>
        <definition>RenderNodeList ShadowEngine::Rendering::RenderScene::nodes</definition>
        <argsstring></argsstring>
        <name>nodes</name>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowRenderer/RenderScene.h" line="31" column="1" bodyfile="ShadowEngine/src/ShadowRenderer/RenderScene.h" bodystart="31" bodyend="-1" />
      </memberdef>
      <memberdef kind="variable" id="ShadowEngine.Rendering.RenderScene.worldData" prot="private" static="no" mutable="no">
        <type>Ref&lt;<ref refid="ShadowEngine.Rendering.ConstantBuffer_Typed" kindref="compound">ConstantBuffer_Typed</ref>&lt;<ref refid="ShadowEngine.Rendering.WorldData" kindref="compound">WorldData</ref>&gt;&gt;</type>
        <definition>Ref&lt;ConstantBuffer_Typed&lt;WorldData&gt;&gt; ShadowEngine::Rendering::RenderScene::worldData</definition>
        <argsstring></argsstring>
        <name>worldData</name>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowRenderer/RenderScene.h" line="33" column="1" bodyfile="ShadowEngine/src/ShadowRenderer/RenderScene.h" bodystart="33" bodyend="-1" />
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="ShadowEngine.Rendering.RenderScene.RenderScene()" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ShadowEngine::Rendering::RenderScene::RenderScene</definition>
        <argsstring>()</argsstring>
        <name>RenderScene</name>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowRenderer/RenderScene.h" line="36" column="1" bodyfile="ShadowEngine/src/ShadowRenderer/RenderScene.cpp" bodystart="36" bodyend="39" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.Rendering.RenderScene.GetNodeCount()" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t ShadowEngine::Rendering::RenderScene::GetNodeCount</definition>
        <argsstring>()</argsstring>
        <name>GetNodeCount</name>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowRenderer/RenderScene.h" line="38" column="1" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.Rendering.RenderScene.AddRenderNode(Ref&lt;Assets::Mesh&gt;,Ref&lt;Assets::Material&gt;)" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Ref&lt;<ref refid="ShadowEngine.Rendering.RenderNode" kindref="compound">RenderNode</ref>&gt;</type>
        <definition>Ref&lt;RenderNode&gt; ShadowEngine::Rendering::RenderScene::AddRenderNode</definition>
        <argsstring>(Ref&lt;Assets::Mesh&gt; mesh, Ref&lt;Assets::Material&gt; material)</argsstring>
        <name>AddRenderNode</name>
        <param>
          <type>Ref&lt;<ref refid="ShadowEngine.Assets.Mesh" kindref="compound">Assets::Mesh</ref>&gt;</type>
          <declname>mesh</declname>
        </param>
        <param>
          <type>Ref&lt;Assets::Material&gt;</type>
          <declname>material</declname>
        </param>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowRenderer/RenderScene.h" line="40" column="1" bodyfile="ShadowEngine/src/ShadowRenderer/RenderScene.cpp" bodystart="41" bodyend="49" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.Rendering.RenderScene.GetWorldData()" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Ref&lt;<ref refid="ShadowEngine.Rendering.ConstantBuffer_Typed" kindref="compound">ConstantBuffer_Typed</ref>&lt;<ref refid="ShadowEngine.Rendering.WorldData" kindref="compound">WorldData</ref>&gt;&gt;</type>
        <definition>Ref&lt;ConstantBuffer_Typed&lt;WorldData&gt;&gt; ShadowEngine::Rendering::RenderScene::GetWorldData</definition>
        <argsstring>()</argsstring>
        <name>GetWorldData</name>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowRenderer/RenderScene.h" line="42" column="1" bodyfile="ShadowEngine/src/ShadowRenderer/RenderScene.cpp" bodystart="51" bodyend="54" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.Rendering.RenderScene.begin()" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator ShadowEngine::Rendering::RenderScene::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowRenderer/RenderScene.h" line="47" column="1" bodyfile="ShadowEngine/src/ShadowRenderer/RenderScene.h" bodystart="47" bodyend="47" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.Rendering.RenderScene.end()" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator ShadowEngine::Rendering::RenderScene::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowRenderer/RenderScene.h" line="48" column="1" bodyfile="ShadowEngine/src/ShadowRenderer/RenderScene.h" bodystart="48" bodyend="48" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.Rendering.RenderScene.begin()" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_iterator</type>
        <definition>const_iterator ShadowEngine::Rendering::RenderScene::begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowRenderer/RenderScene.h" line="49" column="1" bodyfile="ShadowEngine/src/ShadowRenderer/RenderScene.h" bodystart="49" bodyend="49" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.Rendering.RenderScene.end()" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_iterator</type>
        <definition>const_iterator ShadowEngine::Rendering::RenderScene::end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowRenderer/RenderScene.h" line="50" column="1" bodyfile="ShadowEngine/src/ShadowRenderer/RenderScene.h" bodystart="50" bodyend="50" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.Rendering.RenderScene.cbegin()" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_iterator</type>
        <definition>const_iterator ShadowEngine::Rendering::RenderScene::cbegin</definition>
        <argsstring>() const</argsstring>
        <name>cbegin</name>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowRenderer/RenderScene.h" line="51" column="1" bodyfile="ShadowEngine/src/ShadowRenderer/RenderScene.h" bodystart="51" bodyend="51" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.Rendering.RenderScene.cend()" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_iterator</type>
        <definition>const_iterator ShadowEngine::Rendering::RenderScene::cend</definition>
        <argsstring>() const</argsstring>
        <name>cend</name>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowRenderer/RenderScene.h" line="52" column="1" bodyfile="ShadowEngine/src/ShadowRenderer/RenderScene.h" bodystart="52" bodyend="52" />
      </memberdef>
    </sectiondef>
    <briefdescription></briefdescription>
    <detaileddescription></detaileddescription>
    <location file="ShadowEngine/src/ShadowRenderer/RenderScene.h" line="28" column="1" bodyfile="ShadowEngine/src/ShadowRenderer/RenderScene.h" bodystart="27" bodyend="53" />
    <listofallmembers>
      <member refid="ShadowEngine.Rendering.RenderScene.AddRenderNode(Ref&lt;Assets::Mesh&gt;,Ref&lt;Assets::Material&gt;)" prot="public" virt="non-virtual">
        <scope>ShadowEngine::Rendering::RenderScene</scope>
        <name>AddRenderNode</name>
      </member>
      <member refid="ShadowEngine.Rendering.RenderScene.begin()" prot="public" virt="non-virtual">
        <scope>ShadowEngine::Rendering::RenderScene</scope>
        <name>begin</name>
      </member>
      <member refid="ShadowEngine.Rendering.RenderScene.begin()" prot="public" virt="non-virtual">
        <scope>ShadowEngine::Rendering::RenderScene</scope>
        <name>begin</name>
      </member>
      <member refid="ShadowEngine.Rendering.RenderScene.cbegin()" prot="public" virt="non-virtual">
        <scope>ShadowEngine::Rendering::RenderScene</scope>
        <name>cbegin</name>
      </member>
      <member refid="ShadowEngine.Rendering.RenderScene.cend()" prot="public" virt="non-virtual">
        <scope>ShadowEngine::Rendering::RenderScene</scope>
        <name>cend</name>
      </member>
      <member refid="ShadowEngine.Rendering.RenderScene.const_iterator" prot="public" virt="non-virtual">
        <scope>ShadowEngine::Rendering::RenderScene</scope>
        <name>const_iterator</name>
      </member>
      <member refid="ShadowEngine.Rendering.RenderScene.end()" prot="public" virt="non-virtual">
        <scope>ShadowEngine::Rendering::RenderScene</scope>
        <name>end</name>
      </member>
      <member refid="ShadowEngine.Rendering.RenderScene.end()" prot="public" virt="non-virtual">
        <scope>ShadowEngine::Rendering::RenderScene</scope>
        <name>end</name>
      </member>
      <member refid="ShadowEngine.Rendering.RenderScene.GetNodeCount()" prot="public" virt="non-virtual">
        <scope>ShadowEngine::Rendering::RenderScene</scope>
        <name>GetNodeCount</name>
      </member>
      <member refid="ShadowEngine.Rendering.RenderScene.GetWorldData()" prot="public" virt="non-virtual">
        <scope>ShadowEngine::Rendering::RenderScene</scope>
        <name>GetWorldData</name>
      </member>
      <member refid="ShadowEngine.Rendering.RenderScene.iterator" prot="public" virt="non-virtual">
        <scope>ShadowEngine::Rendering::RenderScene</scope>
        <name>iterator</name>
      </member>
      <member refid="ShadowEngine.Rendering.RenderScene.nodes" prot="private" virt="non-virtual">
        <scope>ShadowEngine::Rendering::RenderScene</scope>
        <name>nodes</name>
      </member>
      <member refid="ShadowEngine.Rendering.RenderScene.RenderNodeList" prot="private" virt="non-virtual">
        <scope>ShadowEngine::Rendering::RenderScene</scope>
        <name>RenderNodeList</name>
      </member>
      <member refid="ShadowEngine.Rendering.RenderScene.RenderScene()" prot="public" virt="non-virtual">
        <scope>ShadowEngine::Rendering::RenderScene</scope>
        <name>RenderScene</name>
      </member>
      <member refid="ShadowEngine.Rendering.RenderScene.worldData" prot="private" virt="non-virtual">
        <scope>ShadowEngine::Rendering::RenderScene</scope>
        <name>worldData</name>
      </member>
    </listofallmembers>
  </compounddef>
</doxygen>