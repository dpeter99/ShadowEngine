<?xml version="1.0" encoding="utf-8" standalone="no"?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="ShadowEngine.Rendering.Renderer" kind="class" language="C++" prot="public">
    <compoundname>ShadowEngine::Rendering::Renderer</compoundname>
    <basecompoundref refid="ShadowEngine.ShadowModule" prot="public" virt="non-virtual">ShadowEngine::ShadowModule</basecompoundref>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="ShadowEngine.Rendering.Renderer.scene" prot="private" static="no" mutable="no">
        <type>SHObject_Base(<ref refid="ShadowEngine.Rendering.Renderer" kindref="compound">Renderer</ref>) private <ref refid="ShadowEngine.Rendering.RenderScene" kindref="compound">RenderScene</ref> *</type>
        <definition>SHObject_Base (Renderer) private RenderScene* ShadowEngine::Rendering::Renderer::scene</definition>
        <argsstring></argsstring>
        <name>scene</name>
        <initializer>= nullptr</initializer>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowRenderer/Renderer.h" line="27" column="1" bodyfile="ShadowEngine/src/ShadowRenderer/Renderer.h" bodystart="27" bodyend="-1" />
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="ShadowEngine.Rendering.Renderer.instance" prot="public" static="yes" mutable="no">
        <type>
          <ref refid="ShadowEngine.Rendering.Renderer" kindref="compound">Renderer</ref> *</type>
        <definition>Renderer * ShadowEngine::Rendering::Renderer::instance</definition>
        <argsstring></argsstring>
        <name>instance</name>
        <initializer>= NULL</initializer>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowRenderer/Renderer.h" line="33" column="1" bodyfile="ShadowEngine/src/ShadowRenderer/Renderer.h" bodystart="33" bodyend="-1" />
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="ShadowEngine.Rendering.Renderer.Renderer()" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ShadowEngine::Rendering::Renderer::Renderer</definition>
        <argsstring>()</argsstring>
        <name>Renderer</name>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowRenderer/Renderer.h" line="30" column="1" bodyfile="ShadowEngine/src/ShadowRenderer/Renderer.cpp" bodystart="13" bodyend="15" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.Rendering.Renderer.Init()" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ShadowEngine::Rendering::Renderer::Init</definition>
        <argsstring>() override</argsstring>
        <name>Init</name>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowRenderer/Renderer.h" line="35" column="1" bodyfile="ShadowEngine/src/ShadowRenderer/Renderer.cpp" bodystart="17" bodyend="31" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.Rendering.Renderer.Update()" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void ShadowEngine::Rendering::Renderer::Update</definition>
        <argsstring>() override</argsstring>
        <name>Update</name>
        <reimplements refid="ShadowEngine.ShadowModule.Update()">Update</reimplements>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowRenderer/Renderer.h" line="36" column="1" bodyfile="ShadowEngine/src/ShadowRenderer/Renderer.h" bodystart="36" bodyend="36" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.Rendering.Renderer.Render()" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void ShadowEngine::Rendering::Renderer::Render</definition>
        <argsstring>() override</argsstring>
        <name>Render</name>
        <reimplements refid="ShadowEngine.ShadowModule.Render()">Render</reimplements>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowRenderer/Renderer.h" line="37" column="1" bodyfile="ShadowEngine/src/ShadowRenderer/Renderer.cpp" bodystart="33" bodyend="36" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.Rendering.Renderer.LateRender()" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void ShadowEngine::Rendering::Renderer::LateRender</definition>
        <argsstring>() override</argsstring>
        <name>LateRender</name>
        <reimplements refid="ShadowEngine.ShadowModule.LateRender()">LateRender</reimplements>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowRenderer/Renderer.h" line="38" column="1" bodyfile="ShadowEngine/src/ShadowRenderer/Renderer.h" bodystart="38" bodyend="38" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.Rendering.Renderer.GetName()" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>std::string ShadowEngine::Rendering::Renderer::GetName</definition>
        <argsstring>() override</argsstring>
        <name>GetName</name>
        <reimplements refid="ShadowEngine.ShadowModule.GetName()">GetName</reimplements>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowRenderer/Renderer.h" line="40" column="1" bodyfile="ShadowEngine/src/ShadowRenderer/Renderer.h" bodystart="40" bodyend="40" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.Rendering.Renderer.BeginScene(Camera *)" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ShadowEngine::Rendering::Renderer::BeginScene</definition>
        <argsstring>(Camera *camera)</argsstring>
        <name>BeginScene</name>
        <param>
          <type>
            <ref refid="Camera" kindref="compound">Camera</ref> *</type>
          <declname>camera</declname>
        </param>
        <briefdescription>
          <para>Starts the Rendering scene Sets up the render API Sets up the render graph for the new frame. </para>
        </briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowRenderer/Renderer.h" line="49" column="1" bodyfile="ShadowEngine/src/ShadowRenderer/Renderer.cpp" bodystart="39" bodyend="55" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.Rendering.Renderer.EndScene()" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ShadowEngine::Rendering::Renderer::EndScene</definition>
        <argsstring>()</argsstring>
        <name>EndScene</name>
        <briefdescription>
          <para>Finishes the draw recording. </para>
        </briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowRenderer/Renderer.h" line="54" column="1" bodyfile="ShadowEngine/src/ShadowRenderer/Renderer.cpp" bodystart="57" bodyend="62" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.Rendering.Renderer.RenderNodes()" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ShadowEngine::Rendering::Renderer::RenderNodes</definition>
        <argsstring>()</argsstring>
        <name>RenderNodes</name>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowRenderer/Renderer.h" line="56" column="1" bodyfile="ShadowEngine/src/ShadowRenderer/Renderer.cpp" bodystart="64" bodyend="71" />
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="ShadowEngine.Rendering.Renderer.Submit(const Ref&lt;Assets::Mesh&gt;,const Ref&lt;Assets::Material&gt;,const glm::mat4 &amp;)" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ShadowEngine::Rendering::Renderer::Submit</definition>
        <argsstring>(const Ref&lt;Assets::Mesh&gt; mesh, const Ref&lt;Assets::Material&gt; shader, const glm::mat4 &amp;transform=glm::mat4(1.0f))</argsstring>
        <name>Submit</name>
        <param>
          <type>const Ref&lt;<ref refid="ShadowEngine.Assets.Mesh" kindref="compound">Assets::Mesh</ref>&gt;</type>
          <declname>mesh</declname>
        </param>
        <param>
          <type>const Ref&lt;Assets::Material&gt;</type>
          <declname>shader</declname>
        </param>
        <param>
          <type>const glm::mat4 &amp;</type>
          <declname>transform</declname>
          <defval>glm::mat4(1.0f)</defval>
        </param>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowRenderer/Renderer.h" line="58" column="1" bodyfile="ShadowEngine/src/ShadowRenderer/Renderer.cpp" bodystart="73" bodyend="76" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.Rendering.Renderer.AddRenderNode(const Ref&lt;Assets::Mesh&gt;,const Ref&lt;Assets::Material&gt;,const glm::mat4 &amp;)" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Ref&lt;<ref refid="ShadowEngine.Rendering.RenderNode" kindref="compound">RenderNode</ref>&gt;</type>
        <definition>Ref&lt;RenderNode&gt; ShadowEngine::Rendering::Renderer::AddRenderNode</definition>
        <argsstring>(const Ref&lt;Assets::Mesh&gt; mesh, const Ref&lt;Assets::Material&gt; material, const glm::mat4 &amp;transform=glm::mat4(1.0f))</argsstring>
        <name>AddRenderNode</name>
        <param>
          <type>const Ref&lt;<ref refid="ShadowEngine.Assets.Mesh" kindref="compound">Assets::Mesh</ref>&gt;</type>
          <declname>mesh</declname>
        </param>
        <param>
          <type>const Ref&lt;Assets::Material&gt;</type>
          <declname>material</declname>
        </param>
        <param>
          <type>const glm::mat4 &amp;</type>
          <declname>transform</declname>
          <defval>glm::mat4(1.0f)</defval>
        </param>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowRenderer/Renderer.h" line="60" column="1" bodyfile="ShadowEngine/src/ShadowRenderer/Renderer.cpp" bodystart="78" bodyend="84" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.Rendering.Renderer.GetAPI()" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>RendererAPI::API</type>
        <definition>static RendererAPI::API ShadowEngine::Rendering::Renderer::GetAPI</definition>
        <argsstring>()</argsstring>
        <name>GetAPI</name>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowRenderer/Renderer.h" line="62" column="1" bodyfile="ShadowEngine/src/ShadowRenderer/Renderer.h" bodystart="62" bodyend="62" />
      </memberdef>
    </sectiondef>
    <briefdescription></briefdescription>
    <detaileddescription></detaileddescription>
    <inheritancegraph>
      <node id="439">
        <label>ShadowEngine::SHObject</label>
        <link refid="ShadowEngine.SHObject" />
      </node>
      <node id="437">
        <label>ShadowEngine::Rendering::Renderer</label>
        <link refid="ShadowEngine.Rendering.Renderer" />
        <childnode refid="438" relation="public-inheritance"></childnode>
      </node>
      <node id="438">
        <label>ShadowEngine::ShadowModule</label>
        <link refid="ShadowEngine.ShadowModule" />
        <childnode refid="439" relation="public-inheritance"></childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="442">
        <label>ShadowEngine::SHObject</label>
        <link refid="ShadowEngine.SHObject" />
      </node>
      <node id="440">
        <label>ShadowEngine::Rendering::Renderer</label>
        <link refid="ShadowEngine.Rendering.Renderer" />
        <childnode refid="441" relation="public-inheritance"></childnode>
        <childnode refid="440" relation="usage">
          <edgelabel>instance</edgelabel>
        </childnode>
      </node>
      <node id="441">
        <label>ShadowEngine::ShadowModule</label>
        <link refid="ShadowEngine.ShadowModule" />
        <childnode refid="442" relation="public-inheritance"></childnode>
      </node>
    </collaborationgraph>
    <location file="ShadowEngine/src/ShadowRenderer/Renderer.h" line="21" column="1" bodyfile="ShadowEngine/src/ShadowRenderer/Renderer.h" bodystart="20" bodyend="64" />
    <listofallmembers>
      <member refid="ShadowEngine.Rendering.Renderer.AddRenderNode(const Ref&lt;Assets::Mesh&gt;,const Ref&lt;Assets::Material&gt;,const glm::mat4 &amp;)" prot="public" virt="non-virtual">
        <scope>ShadowEngine::Rendering::Renderer</scope>
        <name>AddRenderNode</name>
      </member>
      <member refid="ShadowEngine.Rendering.Renderer.BeginScene(Camera *)" prot="public" virt="non-virtual">
        <scope>ShadowEngine::Rendering::Renderer</scope>
        <name>BeginScene</name>
      </member>
      <member refid="ShadowEngine.Rendering.Renderer.EndScene()" prot="public" virt="non-virtual">
        <scope>ShadowEngine::Rendering::Renderer</scope>
        <name>EndScene</name>
      </member>
      <member refid="ShadowEngine.SHObject.GenerateId()" prot="protected" virt="non-virtual">
        <scope>ShadowEngine::Rendering::Renderer</scope>
        <name>GenerateId</name>
      </member>
      <member refid="ShadowEngine.Rendering.Renderer.GetAPI()" prot="public" virt="non-virtual">
        <scope>ShadowEngine::Rendering::Renderer</scope>
        <name>GetAPI</name>
      </member>
      <member refid="ShadowEngine.Rendering.Renderer.GetName()" prot="public" virt="virtual">
        <scope>ShadowEngine::Rendering::Renderer</scope>
        <name>GetName</name>
      </member>
      <member refid="ShadowEngine.SHObject.GetType()" prot="public" virt="pure-virtual">
        <scope>ShadowEngine::Rendering::Renderer</scope>
        <name>GetType</name>
      </member>
      <member refid="ShadowEngine.SHObject.GetTypeId()" prot="public" virt="pure-virtual">
        <scope>ShadowEngine::Rendering::Renderer</scope>
        <name>GetTypeId</name>
      </member>
      <member refid="ShadowEngine.Rendering.Renderer.Init()" prot="public" virt="non-virtual">
        <scope>ShadowEngine::Rendering::Renderer</scope>
        <name>Init</name>
      </member>
      <member refid="ShadowEngine.Rendering.Renderer.instance" prot="public" virt="non-virtual">
        <scope>ShadowEngine::Rendering::Renderer</scope>
        <name>instance</name>
      </member>
      <member refid="ShadowEngine.Rendering.Renderer.LateRender()" prot="public" virt="virtual">
        <scope>ShadowEngine::Rendering::Renderer</scope>
        <name>LateRender</name>
      </member>
      <member refid="ShadowEngine.Rendering.Renderer.Render()" prot="public" virt="virtual">
        <scope>ShadowEngine::Rendering::Renderer</scope>
        <name>Render</name>
      </member>
      <member refid="ShadowEngine.Rendering.Renderer.Renderer()" prot="public" virt="non-virtual">
        <scope>ShadowEngine::Rendering::Renderer</scope>
        <name>Renderer</name>
      </member>
      <member refid="ShadowEngine.Rendering.Renderer.RenderNodes()" prot="public" virt="non-virtual">
        <scope>ShadowEngine::Rendering::Renderer</scope>
        <name>RenderNodes</name>
      </member>
      <member refid="ShadowEngine.Rendering.Renderer.scene" prot="private" virt="non-virtual">
        <scope>ShadowEngine::Rendering::Renderer</scope>
        <name>scene</name>
      </member>
      <member refid="ShadowEngine.Rendering.Renderer.Submit(const Ref&lt;Assets::Mesh&gt;,const Ref&lt;Assets::Material&gt;,const glm::mat4 &amp;)" prot="public" virt="non-virtual">
        <scope>ShadowEngine::Rendering::Renderer</scope>
        <name>Submit</name>
      </member>
      <member refid="ShadowEngine.Rendering.Renderer.Update()" prot="public" virt="virtual">
        <scope>ShadowEngine::Rendering::Renderer</scope>
        <name>Update</name>
      </member>
      <member refid="ShadowEngine.SHObject.~SHObject()" prot="public" virt="virtual">
        <scope>ShadowEngine::Rendering::Renderer</scope>
        <name>~SHObject</name>
      </member>
    </listofallmembers>
  </compounddef>
</doxygen>