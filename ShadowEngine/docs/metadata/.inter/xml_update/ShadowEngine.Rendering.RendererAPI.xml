<?xml version="1.0" encoding="utf-8" standalone="no"?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="ShadowEngine.Rendering.RendererAPI" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>ShadowEngine::Rendering::RendererAPI</compoundname>
    <derivedcompoundref refid="ShadowEngine.Rendering.D3D12.D3D12RendererAPI" prot="public" virt="non-virtual">ShadowEngine::Rendering::D3D12::D3D12RendererAPI</derivedcompoundref>
    <sectiondef kind="public-type">
      <memberdef kind="enum" id="ShadowEngine.Rendering.RendererAPI.API" prot="public" static="no" strong="yes">
        <type></type>
        <name>API</name>
        <enumvalue id="_shadow_engine._rendering._renderer_a_p_i_1a1502b3070bb227671710dee540ace24ca6adf97f83acf6453d4a6a4b1070f3754" prot="public">
          <name>None</name>
          <initializer>= 0</initializer>
          <briefdescription></briefdescription>
          <detaileddescription></detaileddescription>
        </enumvalue>
        <enumvalue id="_shadow_engine._rendering._renderer_a_p_i_1a1502b3070bb227671710dee540ace24ca760716b590ee7c0adc25f434f577d8be" prot="public">
          <name>OpenGL</name>
          <initializer>= 1</initializer>
          <briefdescription></briefdescription>
          <detaileddescription></detaileddescription>
        </enumvalue>
        <enumvalue id="_shadow_engine._rendering._renderer_a_p_i_1a1502b3070bb227671710dee540ace24cafac777d230cd7175697748a8c5260df6" prot="public">
          <name>D3D12</name>
          <initializer>= 2</initializer>
          <briefdescription></briefdescription>
          <detaileddescription></detaileddescription>
        </enumvalue>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowRenderer/RendererAPI.h" line="15" column="1" bodyfile="ShadowEngine/src/ShadowRenderer/RendererAPI.h" bodystart="14" bodyend="19" />
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="ShadowEngine.Rendering.RendererAPI.s_API" prot="private" static="yes" mutable="no">
        <type>API</type>
        <definition>RendererAPI::API ShadowEngine::Rendering::RendererAPI::s_API</definition>
        <argsstring></argsstring>
        <name>s_API</name>
        <initializer>= RendererAPI::API::D3D12</initializer>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowRenderer/RendererAPI.h" line="43" column="1" bodyfile="ShadowEngine/src/ShadowRenderer/RendererAPI.h" bodystart="43" bodyend="-1" />
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="ShadowEngine.Rendering.RendererAPI.Init(ShadowEngine::Ref&lt;GraphicsContext&gt;)" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void ShadowEngine::Rendering::RendererAPI::Init</definition>
        <argsstring>(ShadowEngine::Ref&lt;GraphicsContext&gt; ctx)=0</argsstring>
        <name>Init</name>
        <reimplementedby refid="ShadowEngine.Rendering.D3D12.D3D12RendererAPI.Init(ShadowEngine::Ref&lt;GraphicsContext&gt;)">Init</reimplementedby>
        <param>
          <type>ShadowEngine::Ref&lt;<ref refid="ShadowEngine.Rendering.GraphicsContext" kindref="compound">GraphicsContext</ref>&gt;</type>
          <declname>ctx</declname>
        </param>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowRenderer/RendererAPI.h" line="21" column="1" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.Rendering.RendererAPI.SetClearColor(const glm::vec4 &amp;)" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void ShadowEngine::Rendering::RendererAPI::SetClearColor</definition>
        <argsstring>(const glm::vec4 &amp;color)=0</argsstring>
        <name>SetClearColor</name>
        <reimplementedby refid="ShadowEngine.Rendering.D3D12.D3D12RendererAPI.SetClearColor(const glm::vec4 &amp;)">SetClearColor</reimplementedby>
        <param>
          <type>const glm::vec4 &amp;</type>
          <declname>color</declname>
        </param>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowRenderer/RendererAPI.h" line="22" column="1" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.Rendering.RendererAPI.Clear()" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void ShadowEngine::Rendering::RendererAPI::Clear</definition>
        <argsstring>()=0</argsstring>
        <name>Clear</name>
        <reimplementedby refid="ShadowEngine.Rendering.D3D12.D3D12RendererAPI.Clear()">Clear</reimplementedby>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowRenderer/RendererAPI.h" line="23" column="1" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.Rendering.RendererAPI.Draw(const Ref&lt;Assets::Mesh&gt;,const Ref&lt;Assets::Material&gt;,const glm::mat4 &amp;)" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void ShadowEngine::Rendering::RendererAPI::Draw</definition>
        <argsstring>(const Ref&lt;Assets::Mesh&gt; mesh, const Ref&lt;Assets::Material&gt; shader, const glm::mat4 &amp;transform=glm::mat4(1.0f))=0</argsstring>
        <name>Draw</name>
        <reimplementedby refid="ShadowEngine.Rendering.D3D12.D3D12RendererAPI.Draw(const Ref&lt;Assets::Mesh&gt;,const Ref&lt;Assets::Material&gt;,const glm::mat4 &amp;)">Draw</reimplementedby>
        <param>
          <type>const Ref&lt;<ref refid="ShadowEngine.Assets.Mesh" kindref="compound">Assets::Mesh</ref>&gt;</type>
          <declname>mesh</declname>
        </param>
        <param>
          <type>const Ref&lt;Assets::Material&gt;</type>
          <declname>shader</declname>
        </param>
        <param>
          <type>const glm::mat4 &amp;</type>
          <declname>transform</declname>
          <defval>glm::mat4(1.0f)</defval>
        </param>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowRenderer/RendererAPI.h" line="25" column="1" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.Rendering.RendererAPI.Draw(const std::shared_ptr&lt;Assets::Mesh&gt; &amp;,const std::shared_ptr&lt;Assets::Material&gt; &amp;,const ConstantBuffer &amp;)" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void ShadowEngine::Rendering::RendererAPI::Draw</definition>
        <argsstring>(const std::shared_ptr&lt;Assets::Mesh&gt; &amp;mesh, const std::shared_ptr&lt;Assets::Material&gt; &amp;shader, const ConstantBuffer &amp;materialData)=0</argsstring>
        <name>Draw</name>
        <reimplementedby refid="ShadowEngine.Rendering.D3D12.D3D12RendererAPI.Draw(const std::shared_ptr&lt;Assets::Mesh&gt; &amp;,const std::shared_ptr&lt;Assets::Material&gt; &amp;,const ConstantBuffer &amp;)">Draw</reimplementedby>
        <param>
          <type>const std::shared_ptr&lt;<ref refid="ShadowEngine.Assets.Mesh" kindref="compound">Assets::Mesh</ref>&gt; &amp;</type>
          <declname>mesh</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt;Assets::Material&gt; &amp;</type>
          <declname>shader</declname>
        </param>
        <param>
          <type>const <ref refid="ShadowEngine.Rendering.ConstantBuffer" kindref="compound">ConstantBuffer</ref> &amp;</type>
          <declname>materialData</declname>
        </param>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowRenderer/RendererAPI.h" line="26" column="1" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.Rendering.RendererAPI.StartFrame(Ref&lt;ConstantBuffer&gt;)" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void ShadowEngine::Rendering::RendererAPI::StartFrame</definition>
        <argsstring>(Ref&lt;ConstantBuffer&gt; worldCB)=0</argsstring>
        <name>StartFrame</name>
        <reimplementedby refid="ShadowEngine.Rendering.D3D12.D3D12RendererAPI.StartFrame(Ref&lt;ConstantBuffer&gt;)">StartFrame</reimplementedby>
        <param>
          <type>Ref&lt;<ref refid="ShadowEngine.Rendering.ConstantBuffer" kindref="compound">ConstantBuffer</ref>&gt;</type>
          <declname>worldCB</declname>
        </param>
        <briefdescription>
          <para>Starts recording the draw commands. </para>
        </briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowRenderer/RendererAPI.h" line="31" column="1" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.Rendering.RendererAPI.EndFrame()" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void ShadowEngine::Rendering::RendererAPI::EndFrame</definition>
        <argsstring>()=0</argsstring>
        <name>EndFrame</name>
        <reimplementedby refid="ShadowEngine.Rendering.D3D12.D3D12RendererAPI.EndFrame()">EndFrame</reimplementedby>
        <briefdescription>
          <para>Finalizes the render command recording. </para>
        </briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowRenderer/RendererAPI.h" line="36" column="1" />
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="ShadowEngine.Rendering.RendererAPI.GetAPI()" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>API</type>
        <definition>static API ShadowEngine::Rendering::RendererAPI::GetAPI</definition>
        <argsstring>()</argsstring>
        <name>GetAPI</name>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowRenderer/RendererAPI.h" line="39" column="1" bodyfile="ShadowEngine/src/ShadowRenderer/RendererAPI.h" bodystart="39" bodyend="39" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.Rendering.RendererAPI.RendererAPI::MakeRendererAPI()" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>
          <ref refid="ShadowEngine.Rendering.RendererAPI" kindref="compound">RendererAPI</ref> *</type>
        <definition>static RendererAPI* ShadowEngine::Rendering::RendererAPI::RendererAPI::MakeRendererAPI</definition>
        <argsstring>()</argsstring>
        <name>RendererAPI::MakeRendererAPI</name>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowRenderer/RendererAPI.h" line="41" column="1" />
      </memberdef>
    </sectiondef>
    <briefdescription></briefdescription>
    <detaileddescription></detaileddescription>
    <inheritancegraph>
      <node id="444">
        <label>ShadowEngine::Rendering::D3D12::D3D12RendererAPI</label>
        <link refid="ShadowEngine.Rendering.D3D12.D3D12RendererAPI" />
        <childnode refid="443" relation="public-inheritance"></childnode>
      </node>
      <node id="443">
        <label>ShadowEngine::Rendering::RendererAPI</label>
        <link refid="ShadowEngine.Rendering.RendererAPI" />
      </node>
    </inheritancegraph>
    <location file="ShadowEngine/src/ShadowRenderer/RendererAPI.h" line="12" column="1" bodyfile="ShadowEngine/src/ShadowRenderer/RendererAPI.h" bodystart="11" bodyend="44" />
    <listofallmembers>
      <member refid="ShadowEngine.Rendering.RendererAPI.API" prot="public" virt="non-virtual">
        <scope>ShadowEngine::Rendering::RendererAPI</scope>
        <name>API</name>
      </member>
      <member refid="ShadowEngine.Rendering.RendererAPI.Clear()" prot="public" virt="pure-virtual">
        <scope>ShadowEngine::Rendering::RendererAPI</scope>
        <name>Clear</name>
      </member>
      <member refid="ShadowEngine.Rendering.RendererAPI.Draw(const Ref&lt;Assets::Mesh&gt;,const Ref&lt;Assets::Material&gt;,const glm::mat4 &amp;)" prot="public" virt="pure-virtual">
        <scope>ShadowEngine::Rendering::RendererAPI</scope>
        <name>Draw</name>
      </member>
      <member refid="ShadowEngine.Rendering.RendererAPI.Draw(const std::shared_ptr&lt;Assets::Mesh&gt; &amp;,const std::shared_ptr&lt;Assets::Material&gt; &amp;,const ConstantBuffer &amp;)" prot="public" virt="pure-virtual">
        <scope>ShadowEngine::Rendering::RendererAPI</scope>
        <name>Draw</name>
      </member>
      <member refid="ShadowEngine.Rendering.RendererAPI.EndFrame()" prot="public" virt="pure-virtual">
        <scope>ShadowEngine::Rendering::RendererAPI</scope>
        <name>EndFrame</name>
      </member>
      <member refid="ShadowEngine.Rendering.RendererAPI.GetAPI()" prot="public" virt="non-virtual">
        <scope>ShadowEngine::Rendering::RendererAPI</scope>
        <name>GetAPI</name>
      </member>
      <member refid="ShadowEngine.Rendering.RendererAPI.Init(ShadowEngine::Ref&lt;GraphicsContext&gt;)" prot="public" virt="pure-virtual">
        <scope>ShadowEngine::Rendering::RendererAPI</scope>
        <name>Init</name>
      </member>
      <member refid="ShadowEngine.Rendering.RendererAPI.RendererAPI::MakeRendererAPI()" prot="public" virt="non-virtual">
        <scope>ShadowEngine::Rendering::RendererAPI</scope>
        <name>RendererAPI::MakeRendererAPI</name>
      </member>
      <member refid="ShadowEngine.Rendering.RendererAPI.s_API" prot="private" virt="non-virtual">
        <scope>ShadowEngine::Rendering::RendererAPI</scope>
        <name>s_API</name>
      </member>
      <member refid="ShadowEngine.Rendering.RendererAPI.SetClearColor(const glm::vec4 &amp;)" prot="public" virt="pure-virtual">
        <scope>ShadowEngine::Rendering::RendererAPI</scope>
        <name>SetClearColor</name>
      </member>
      <member refid="ShadowEngine.Rendering.RendererAPI.StartFrame(Ref&lt;ConstantBuffer&gt;)" prot="public" virt="pure-virtual">
        <scope>ShadowEngine::Rendering::RendererAPI</scope>
        <name>StartFrame</name>
      </member>
    </listofallmembers>
  </compounddef>
</doxygen>