<?xml version="1.0" encoding="utf-8" standalone="no"?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="ShadowEngine.Rendering.Shader" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>ShadowEngine::Rendering::Shader</compoundname>
    <derivedcompoundref refid="ShadowEngine.Rendering.D3D12.D3D12Shader" prot="public" virt="non-virtual">ShadowEngine::Rendering::D3D12::D3D12Shader</derivedcompoundref>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="ShadowEngine.Rendering.Shader.properties" prot="protected" static="no" mutable="no">
        <type>
          <ref refid="ShadowEngine.Rendering.ShaderPropertySheet" kindref="compound">ShaderPropertySheet</ref>
        </type>
        <definition>ShaderPropertySheet ShadowEngine::Rendering::Shader::properties</definition>
        <argsstring></argsstring>
        <name>properties</name>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowRenderer/Shader.h" line="11" column="1" bodyfile="ShadowEngine/src/ShadowRenderer/Shader.h" bodystart="11" bodyend="-1" />
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="ShadowEngine.Rendering.Shader.~Shader()" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual ShadowEngine::Rendering::Shader::~Shader</definition>
        <argsstring>()=default</argsstring>
        <name>~Shader</name>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowRenderer/Shader.h" line="13" column="1" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.Rendering.Shader.GetPropertiesCopy()" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>
          <ref refid="ShadowEngine.Rendering.ShaderPropertySheet" kindref="compound">ShaderPropertySheet</ref> *</type>
        <definition>ShaderPropertySheet * ShadowEngine::Rendering::Shader::GetPropertiesCopy</definition>
        <argsstring>()</argsstring>
        <name>GetPropertiesCopy</name>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowRenderer/Shader.h" line="15" column="1" bodyfile="ShadowEngine/src/ShadowRenderer/Shader.cpp" bodystart="10" bodyend="13" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.Rendering.Shader.Bind()" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void ShadowEngine::Rendering::Shader::Bind</definition>
        <argsstring>() const =0</argsstring>
        <name>Bind</name>
        <reimplementedby refid="ShadowEngine.Rendering.D3D12.D3D12Shader.Bind()">Bind</reimplementedby>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowRenderer/Shader.h" line="17" column="1" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.Rendering.Shader.Unbind()" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void ShadowEngine::Rendering::Shader::Unbind</definition>
        <argsstring>() const =0</argsstring>
        <name>Unbind</name>
        <reimplementedby refid="ShadowEngine.Rendering.D3D12.D3D12Shader.Unbind()">Unbind</reimplementedby>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowRenderer/Shader.h" line="18" column="1" />
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="ShadowEngine.Rendering.Shader.Create(const std::string &amp;,const std::string &amp;)" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>
          <ref refid="ShadowEngine.Rendering.Shader" kindref="compound">Shader</ref> *</type>
        <definition>Shader * ShadowEngine::Rendering::Shader::Create</definition>
        <argsstring>(const std::string &amp;vertexSrc, const std::string &amp;fragmentSrc)</argsstring>
        <name>Create</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>vertexSrc</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>fragmentSrc</declname>
        </param>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowRenderer/Shader.h" line="20" column="1" bodyfile="ShadowEngine/src/ShadowRenderer/Shader.cpp" bodystart="15" bodyend="25" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.Rendering.Shader.CreateFromCompiled(const std::string &amp;,const std::string &amp;)" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>
          <ref refid="ShadowEngine.Rendering.Shader" kindref="compound">Shader</ref> *</type>
        <definition>Shader * ShadowEngine::Rendering::Shader::CreateFromCompiled</definition>
        <argsstring>(const std::string &amp;VSfilePath, const std::string &amp;PSfilePath)</argsstring>
        <name>CreateFromCompiled</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>VSfilePath</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>PSfilePath</declname>
        </param>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/ShadowRenderer/Shader.h" line="21" column="1" bodyfile="ShadowEngine/src/ShadowRenderer/Shader.cpp" bodystart="27" bodyend="37" />
      </memberdef>
    </sectiondef>
    <briefdescription></briefdescription>
    <detaileddescription></detaileddescription>
    <inheritancegraph>
      <node id="479">
        <label>ShadowEngine::Rendering::D3D12::D3D12Shader</label>
        <link refid="ShadowEngine.Rendering.D3D12.D3D12Shader" />
        <childnode refid="478" relation="public-inheritance"></childnode>
      </node>
      <node id="478">
        <label>ShadowEngine::Rendering::Shader</label>
        <link refid="ShadowEngine.Rendering.Shader" />
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="481">
        <label>ShadowEngine::Rendering::ShaderPropertySheet</label>
        <link refid="ShadowEngine.Rendering.ShaderPropertySheet" />
      </node>
      <node id="480">
        <label>ShadowEngine::Rendering::Shader</label>
        <link refid="ShadowEngine.Rendering.Shader" />
        <childnode refid="481" relation="usage">
          <edgelabel>properties</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ShadowEngine/src/ShadowRenderer/Shader.h" line="9" column="1" bodyfile="ShadowEngine/src/ShadowRenderer/Shader.h" bodystart="8" bodyend="22" />
    <listofallmembers>
      <member refid="ShadowEngine.Rendering.Shader.Bind()" prot="public" virt="pure-virtual">
        <scope>ShadowEngine::Rendering::Shader</scope>
        <name>Bind</name>
      </member>
      <member refid="ShadowEngine.Rendering.Shader.Create(const std::string &amp;,const std::string &amp;)" prot="public" virt="non-virtual">
        <scope>ShadowEngine::Rendering::Shader</scope>
        <name>Create</name>
      </member>
      <member refid="ShadowEngine.Rendering.Shader.CreateFromCompiled(const std::string &amp;,const std::string &amp;)" prot="public" virt="non-virtual">
        <scope>ShadowEngine::Rendering::Shader</scope>
        <name>CreateFromCompiled</name>
      </member>
      <member refid="ShadowEngine.Rendering.Shader.GetPropertiesCopy()" prot="public" virt="non-virtual">
        <scope>ShadowEngine::Rendering::Shader</scope>
        <name>GetPropertiesCopy</name>
      </member>
      <member refid="ShadowEngine.Rendering.Shader.properties" prot="protected" virt="non-virtual">
        <scope>ShadowEngine::Rendering::Shader</scope>
        <name>properties</name>
      </member>
      <member refid="ShadowEngine.Rendering.Shader.Unbind()" prot="public" virt="pure-virtual">
        <scope>ShadowEngine::Rendering::Shader</scope>
        <name>Unbind</name>
      </member>
      <member refid="ShadowEngine.Rendering.Shader.~Shader()" prot="public" virt="virtual">
        <scope>ShadowEngine::Rendering::Shader</scope>
        <name>~Shader</name>
      </member>
    </listofallmembers>
  </compounddef>
</doxygen>