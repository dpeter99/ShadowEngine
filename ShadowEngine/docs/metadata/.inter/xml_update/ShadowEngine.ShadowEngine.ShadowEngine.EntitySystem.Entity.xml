<?xml version="1.0" encoding="utf-8" standalone="no"?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity" kind="class" language="C++" prot="public">
    <compoundname>ShadowEngine::ShadowEngine::ShadowEngine::EntitySystem::Entity</compoundname>
    <basecompoundref refid="ShadowEngine.SHObject" prot="public" virt="non-virtual">ShadowEngine::SHObject</basecompoundref>
    <includes refid="_entity_8h" local="no">Entity.h</includes>
    <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.INVALID_UID" prot="private" static="yes" mutable="no">
        <type>SHObject_Base(<ref refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity" kindref="compound">Entity</ref>) public const int</type>
        <definition>SHObject_Base (Entity) public const int ShadowEngine::ShadowEngine::ShadowEngine::EntitySystem::Entity::INVALID_UID</definition>
        <argsstring></argsstring>
        <name>INVALID_UID</name>
        <initializer>= -1</initializer>
        <briefdescription>
          <para>This is the Globaly unique ID of this Entity </para>
        </briefdescription>
        <detaileddescription>
          <para>This ID will be only assigned to this Entity instance It can be used to look up entities, but it is not recommended as it is a slow process For Entity Lookup use the m_runtimeIndex </para>
          <para>This is the UID that represents an invalid ID </para>
        </detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/EntitySystem/Entity.h" line="81" column="1" bodyfile="ShadowEngine/src/EntitySystem/Entity.h" bodystart="81" bodyend="-1" />
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.m_runtimeIndex" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int ShadowEngine::ShadowEngine::ShadowEngine::EntitySystem::Entity::m_runtimeIndex</definition>
        <argsstring></argsstring>
        <name>m_runtimeIndex</name>
        <briefdescription>
          <para>This is the ID of the entity usable for lookup </para>
        </briefdescription>
        <detaileddescription>
          <para>This ID will be reused when the Entity is removed</para>
          <para>To use this Entity for lookup use the LUT in the EntityManager </para>
        </detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/EntitySystem/Entity.h" line="90" column="1" bodyfile="ShadowEngine/src/EntitySystem/Entity.h" bodystart="90" bodyend="-1" />
      </memberdef>
      <memberdef kind="variable" id="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.scene" prot="private" static="no" mutable="no">
        <type>Scene *</type>
        <definition>Scene* ShadowEngine::ShadowEngine::ShadowEngine::EntitySystem::Entity::scene</definition>
        <argsstring></argsstring>
        <name>scene</name>
        <briefdescription>
          <para>The scene this Enity is assigned to </para>
        </briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/EntitySystem/Entity.h" line="96" column="1" bodyfile="ShadowEngine/src/EntitySystem/Entity.h" bodystart="96" bodyend="-1" />
      </memberdef>
      <memberdef kind="variable" id="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.internalHierarchy" prot="private" static="no" mutable="no">
        <type>std::vector&lt;<ref refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.rtm_ptr" kindref="compound">rtm_ptr</ref>&lt;<ref refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity" kindref="compound">Entity</ref>&gt;&gt;</type>
        <definition>std::vector&lt;rtm_ptr&lt;Entity&gt;&gt; ShadowEngine::ShadowEngine::ShadowEngine::EntitySystem::Entity::internalHierarchy</definition>
        <argsstring></argsstring>
        <name>internalHierarchy</name>
        <briefdescription>
          <para>the internal hierarchy of this Entity </para>
        </briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/EntitySystem/Entity.h" line="101" column="1" bodyfile="ShadowEngine/src/EntitySystem/Entity.h" bodystart="101" bodyend="-1" />
      </memberdef>
      <memberdef kind="variable" id="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.hierarchy" prot="private" static="no" mutable="no">
        <type>std::vector&lt;<ref refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity" kindref="compound">Entity</ref>&gt;</type>
        <definition>std::vector&lt;Entity&gt; ShadowEngine::ShadowEngine::ShadowEngine::EntitySystem::Entity::hierarchy</definition>
        <argsstring></argsstring>
        <name>hierarchy</name>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/EntitySystem/Entity.h" line="103" column="1" bodyfile="ShadowEngine/src/EntitySystem/Entity.h" bodystart="103" bodyend="-1" />
      </memberdef>
      <memberdef kind="variable" id="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.parent" prot="private" static="no" mutable="no">
        <type>
          <ref refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.rtm_ptr" kindref="compound">rtm_ptr</ref>&lt;<ref refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity" kindref="compound">Entity</ref>&gt;</type>
        <definition>rtm_ptr&lt;Entity&gt; ShadowEngine::ShadowEngine::ShadowEngine::EntitySystem::Entity::parent</definition>
        <argsstring></argsstring>
        <name>parent</name>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/EntitySystem/Entity.h" line="105" column="1" bodyfile="ShadowEngine/src/EntitySystem/Entity.h" bodystart="105" bodyend="-1" />
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.Entity()" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Entity::Entity</definition>
        <argsstring>()</argsstring>
        <name>Entity</name>
        <briefdescription>
          <para>Empty default constructor </para>
        </briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/EntitySystem/Entity.h" line="111" column="1" bodyfile="ShadowEngine/src/EntitySystem/Entity.cpp" bodystart="61" bodyend="64" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.Entity(Scene *)" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Entity::Entity</definition>
        <argsstring>(Scene *scene)</argsstring>
        <name>Entity</name>
        <param>
          <type>Scene *</type>
          <declname>scene</declname>
        </param>
        <briefdescription>
          <para>Constructor defining the scene it is located in </para>
        </briefdescription>
        <detaileddescription>
          <para>
            <parameterlist kind="param">
              <parameteritem>
                <parameternamelist>
                  <parametername>scene</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>The scene that this entity is in</para>
                </parameterdescription>
              </parameteritem>
            </parameterlist>
          </para>
        </detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/EntitySystem/Entity.h" line="117" column="1" bodyfile="ShadowEngine/src/EntitySystem/Entity.cpp" bodystart="66" bodyend="69" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.~Entity()" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual ShadowEngine::ShadowEngine::ShadowEngine::EntitySystem::Entity::~Entity</definition>
        <argsstring>()</argsstring>
        <name>~Entity</name>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/EntitySystem/Entity.h" line="119" column="1" bodyfile="ShadowEngine/src/EntitySystem/Entity.h" bodystart="119" bodyend="119" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.Create(Scene *)" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>
          <ref refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity" kindref="compound">Entity</ref> *</type>
        <definition>Entity * Entity::Create</definition>
        <argsstring>(Scene *scene)</argsstring>
        <name>Create</name>
        <param>
          <type>Scene *</type>
          <declname>scene</declname>
        </param>
        <briefdescription>
          <para>Creates a new Entity </para>
        </briefdescription>
        <detaileddescription>
          <para>
            <parameterlist kind="param">
              <parameteritem>
                <parameternamelist>
                  <parametername>scene</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>The scene that this entity is in</para>
                </parameterdescription>
              </parameteritem>
            </parameterlist>
            <simplesect kind="return">
              <para>Pointer to the Entity created</para>
            </simplesect>
          </para>
        </detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/EntitySystem/Entity.h" line="126" column="1" bodyfile="ShadowEngine/src/EntitySystem/Entity.cpp" bodystart="71" bodyend="74" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.Init()" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Entity::Init</definition>
        <argsstring>()</argsstring>
        <name>Init</name>
        <briefdescription>
          <para>Called when the Entity needs to be initialised. </para>
        </briefdescription>
        <detaileddescription>
          <para>Called when the Entity needs to be initialised. Should be used as a constructor </para>
        </detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/EntitySystem/Entity.h" line="132" column="1" bodyfile="ShadowEngine/src/EntitySystem/Entity.cpp" bodystart="76" bodyend="78" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.Start()" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Entity::Start</definition>
        <argsstring>()</argsstring>
        <name>Start</name>
        <briefdescription>
          <para>Called when the world starts or before the Entity get's it's first tick </para>
        </briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/EntitySystem/Entity.h" line="137" column="1" bodyfile="ShadowEngine/src/EntitySystem/Entity.cpp" bodystart="13" bodyend="15" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.Update()" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Entity::Update</definition>
        <argsstring>()</argsstring>
        <name>Update</name>
        <briefdescription>
          <para>Called every tick </para>
        </briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/EntitySystem/Entity.h" line="142" column="1" bodyfile="ShadowEngine/src/EntitySystem/Entity.cpp" bodystart="17" bodyend="19" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.LateUpdate()" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Entity::LateUpdate</definition>
        <argsstring>()</argsstring>
        <name>LateUpdate</name>
        <briefdescription>
          <para>Called every Tick after the first is finished </para>
        </briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/EntitySystem/Entity.h" line="147" column="1" bodyfile="ShadowEngine/src/EntitySystem/Entity.cpp" bodystart="21" bodyend="23" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.Render()" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Entity::Render</definition>
        <argsstring>()</argsstring>
        <name>Render</name>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/EntitySystem/Entity.h" line="149" column="1" bodyfile="ShadowEngine/src/EntitySystem/Entity.cpp" bodystart="25" bodyend="27" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.LateRender()" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Entity::LateRender</definition>
        <argsstring>()</argsstring>
        <name>LateRender</name>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/EntitySystem/Entity.h" line="151" column="1" bodyfile="ShadowEngine/src/EntitySystem/Entity.cpp" bodystart="29" bodyend="31" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.GetFlags()" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>EntityFlags</type>
        <definition>EntityFlags Entity::GetFlags</definition>
        <argsstring>()</argsstring>
        <name>GetFlags</name>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/EntitySystem/Entity.h" line="153" column="1" bodyfile="ShadowEngine/src/EntitySystem/Entity.cpp" bodystart="33" bodyend="36" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.TransformChanged(bool)" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Entity::TransformChanged</definition>
        <argsstring>(bool self)</argsstring>
        <name>TransformChanged</name>
        <param>
          <type>bool</type>
          <declname>self</declname>
        </param>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/EntitySystem/Entity.h" line="155" column="1" bodyfile="ShadowEngine/src/EntitySystem/Entity.cpp" bodystart="38" bodyend="44" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.GetTransform()" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>
          <ref refid="ShadowEngine.ShadowEngine.ShadowEntity.Transform" kindref="compound">ShadowEntity::Transform</ref> *</type>
        <definition>ShadowEntity::Transform * Entity::GetTransform</definition>
        <argsstring>()</argsstring>
        <name>GetTransform</name>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/EntitySystem/Entity.h" line="157" column="1" bodyfile="ShadowEngine/src/EntitySystem/Entity.cpp" bodystart="46" bodyend="49" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.SetScene(Scene *)" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Entity::SetScene</definition>
        <argsstring>(Scene *se)</argsstring>
        <name>SetScene</name>
        <param>
          <type>Scene *</type>
          <declname>se</declname>
        </param>
        <briefdescription>
          <para>Sets the scene this Entity is in </para>
        </briefdescription>
        <detaileddescription>
          <para>
            <parameterlist kind="param">
              <parameteritem>
                <parameternamelist>
                  <parametername>se</parametername>
                </parameternamelist>
                <parameterdescription>
                  <para>The scene this entity belongs to</para>
                </parameterdescription>
              </parameteritem>
            </parameterlist>
          </para>
        </detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/EntitySystem/Entity.h" line="164" column="1" bodyfile="ShadowEngine/src/EntitySystem/Entity.cpp" bodystart="51" bodyend="54" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.SetParent(rtm_ptr&lt;Entity&gt;)" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Entity::SetParent</definition>
        <argsstring>(rtm_ptr&lt;Entity&gt; e)</argsstring>
        <name>SetParent</name>
        <param>
          <type>
            <ref refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.rtm_ptr" kindref="compound">rtm_ptr</ref>&lt;<ref refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity" kindref="compound">Entity</ref>&gt;</type>
          <declname>e</declname>
        </param>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/EntitySystem/Entity.h" line="166" column="1" bodyfile="ShadowEngine/src/EntitySystem/Entity.cpp" bodystart="56" bodyend="59" />
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.operator&lt;&lt;" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Entity &amp;dt)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity" kindref="compound">Entity</ref> &amp;</type>
          <declname>dt</declname>
        </param>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/EntitySystem/Entity.h" line="168" column="1" />
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.UpdateEntities(EntityManager *)" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void ShadowEngine::ShadowEngine::ShadowEngine::EntitySystem::Entity::UpdateEntities</definition>
        <argsstring>(EntityManager *mgr)</argsstring>
        <name>UpdateEntities</name>
        <param>
          <type>EntityManager *</type>
          <declname>mgr</declname>
        </param>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/EntitySystem/Entity.h" line="172" column="1" bodyfile="ShadowEngine/src/EntitySystem/Entity.h" bodystart="172" bodyend="182" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.InitEntities(EntityManager *)" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void ShadowEngine::ShadowEngine::ShadowEngine::EntitySystem::Entity::InitEntities</definition>
        <argsstring>(EntityManager *mgr)</argsstring>
        <name>InitEntities</name>
        <param>
          <type>EntityManager *</type>
          <declname>mgr</declname>
        </param>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/EntitySystem/Entity.h" line="185" column="1" bodyfile="ShadowEngine/src/EntitySystem/Entity.h" bodystart="185" bodyend="195" />
      </memberdef>
      <memberdef kind="function" id="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.RegisterDefaultUpdate(EntityManager &amp;)" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void ShadowEngine::ShadowEngine::ShadowEngine::EntitySystem::Entity::RegisterDefaultUpdate</definition>
        <argsstring>(EntityManager &amp;mgr)</argsstring>
        <name>RegisterDefaultUpdate</name>
        <param>
          <type>EntityManager &amp;</type>
          <declname>mgr</declname>
        </param>
        <briefdescription></briefdescription>
        <detaileddescription></detaileddescription>
        <inbodydescription></inbodydescription>
        <location file="ShadowEngine/src/EntitySystem/Entity.h" line="198" column="1" bodyfile="ShadowEngine/src/EntitySystem/Entity.h" bodystart="198" bodyend="204" />
      </memberdef>
    </sectiondef>
    <briefdescription>
      <para>Base Entity in the scene </para>
    </briefdescription>
    <detaileddescription>
      <para>This is the base entity used in the game world. This should never be instanciated only the derived classes </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="155">
        <label>ShadowEngine::SHObject</label>
        <link refid="ShadowEngine.SHObject" />
      </node>
      <node id="154">
        <label>ShadowEngine::ShadowEngine::ShadowEngine::EntitySystem::Entity</label>
        <link refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity" />
        <childnode refid="155" relation="public-inheritance"></childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="157">
        <label>ShadowEngine::SHObject</label>
        <link refid="ShadowEngine.SHObject" />
      </node>
      <node id="156">
        <label>ShadowEngine::ShadowEngine::ShadowEngine::EntitySystem::Entity</label>
        <link refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity" />
        <childnode refid="157" relation="public-inheritance"></childnode>
      </node>
    </collaborationgraph>
    <location file="ShadowEngine/src/EntitySystem/Entity.h" line="66" column="1" bodyfile="ShadowEngine/src/EntitySystem/Entity.h" bodystart="65" bodyend="205" />
    <listofallmembers>
      <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.Create(Scene *)" prot="public" virt="virtual">
        <scope>ShadowEngine::ShadowEngine::ShadowEngine::EntitySystem::Entity</scope>
        <name>Create</name>
      </member>
      <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.Entity()" prot="public" virt="non-virtual">
        <scope>ShadowEngine::ShadowEngine::ShadowEngine::EntitySystem::Entity</scope>
        <name>Entity</name>
      </member>
      <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.Entity(Scene *)" prot="public" virt="non-virtual">
        <scope>ShadowEngine::ShadowEngine::ShadowEngine::EntitySystem::Entity</scope>
        <name>Entity</name>
      </member>
      <member refid="ShadowEngine.SHObject.GenerateId()" prot="protected" virt="non-virtual">
        <scope>ShadowEngine::ShadowEngine::ShadowEngine::EntitySystem::Entity</scope>
        <name>GenerateId</name>
      </member>
      <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.GetFlags()" prot="public" virt="virtual">
        <scope>ShadowEngine::ShadowEngine::ShadowEngine::EntitySystem::Entity</scope>
        <name>GetFlags</name>
      </member>
      <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.GetTransform()" prot="public" virt="virtual">
        <scope>ShadowEngine::ShadowEngine::ShadowEngine::EntitySystem::Entity</scope>
        <name>GetTransform</name>
      </member>
      <member refid="ShadowEngine.SHObject.GetType()" prot="public" virt="pure-virtual">
        <scope>ShadowEngine::ShadowEngine::ShadowEngine::EntitySystem::Entity</scope>
        <name>GetType</name>
      </member>
      <member refid="ShadowEngine.SHObject.GetTypeId()" prot="public" virt="pure-virtual">
        <scope>ShadowEngine::ShadowEngine::ShadowEngine::EntitySystem::Entity</scope>
        <name>GetTypeId</name>
      </member>
      <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.hierarchy" prot="private" virt="non-virtual">
        <scope>ShadowEngine::ShadowEngine::ShadowEngine::EntitySystem::Entity</scope>
        <name>hierarchy</name>
      </member>
      <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.Init()" prot="public" virt="virtual">
        <scope>ShadowEngine::ShadowEngine::ShadowEngine::EntitySystem::Entity</scope>
        <name>Init</name>
      </member>
      <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.InitEntities(EntityManager *)" prot="public" virt="non-virtual">
        <scope>ShadowEngine::ShadowEngine::ShadowEngine::EntitySystem::Entity</scope>
        <name>InitEntities</name>
      </member>
      <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.internalHierarchy" prot="private" virt="non-virtual">
        <scope>ShadowEngine::ShadowEngine::ShadowEngine::EntitySystem::Entity</scope>
        <name>internalHierarchy</name>
      </member>
      <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.INVALID_UID" prot="private" virt="non-virtual">
        <scope>ShadowEngine::ShadowEngine::ShadowEngine::EntitySystem::Entity</scope>
        <name>INVALID_UID</name>
      </member>
      <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.LateRender()" prot="public" virt="virtual">
        <scope>ShadowEngine::ShadowEngine::ShadowEngine::EntitySystem::Entity</scope>
        <name>LateRender</name>
      </member>
      <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.LateUpdate()" prot="public" virt="virtual">
        <scope>ShadowEngine::ShadowEngine::ShadowEngine::EntitySystem::Entity</scope>
        <name>LateUpdate</name>
      </member>
      <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.m_runtimeIndex" prot="private" virt="non-virtual">
        <scope>ShadowEngine::ShadowEngine::ShadowEngine::EntitySystem::Entity</scope>
        <name>m_runtimeIndex</name>
      </member>
      <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.operator&lt;&lt;" prot="public" virt="non-virtual">
        <scope>ShadowEngine::ShadowEngine::ShadowEngine::EntitySystem::Entity</scope>
        <name>operator&lt;&lt;</name>
      </member>
      <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.parent" prot="private" virt="non-virtual">
        <scope>ShadowEngine::ShadowEngine::ShadowEngine::EntitySystem::Entity</scope>
        <name>parent</name>
      </member>
      <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.RegisterDefaultUpdate(EntityManager &amp;)" prot="public" virt="non-virtual">
        <scope>ShadowEngine::ShadowEngine::ShadowEngine::EntitySystem::Entity</scope>
        <name>RegisterDefaultUpdate</name>
      </member>
      <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.Render()" prot="public" virt="virtual">
        <scope>ShadowEngine::ShadowEngine::ShadowEngine::EntitySystem::Entity</scope>
        <name>Render</name>
      </member>
      <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.scene" prot="private" virt="non-virtual">
        <scope>ShadowEngine::ShadowEngine::ShadowEngine::EntitySystem::Entity</scope>
        <name>scene</name>
      </member>
      <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.SetParent(rtm_ptr&lt;Entity&gt;)" prot="public" virt="virtual">
        <scope>ShadowEngine::ShadowEngine::ShadowEngine::EntitySystem::Entity</scope>
        <name>SetParent</name>
      </member>
      <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.SetScene(Scene *)" prot="public" virt="non-virtual">
        <scope>ShadowEngine::ShadowEngine::ShadowEngine::EntitySystem::Entity</scope>
        <name>SetScene</name>
      </member>
      <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.Start()" prot="public" virt="virtual">
        <scope>ShadowEngine::ShadowEngine::ShadowEngine::EntitySystem::Entity</scope>
        <name>Start</name>
      </member>
      <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.TransformChanged(bool)" prot="public" virt="virtual">
        <scope>ShadowEngine::ShadowEngine::ShadowEngine::EntitySystem::Entity</scope>
        <name>TransformChanged</name>
      </member>
      <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.Update()" prot="public" virt="virtual">
        <scope>ShadowEngine::ShadowEngine::ShadowEngine::EntitySystem::Entity</scope>
        <name>Update</name>
      </member>
      <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.UpdateEntities(EntityManager *)" prot="public" virt="non-virtual">
        <scope>ShadowEngine::ShadowEngine::ShadowEngine::EntitySystem::Entity</scope>
        <name>UpdateEntities</name>
      </member>
      <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.~Entity()" prot="public" virt="virtual">
        <scope>ShadowEngine::ShadowEngine::ShadowEngine::EntitySystem::Entity</scope>
        <name>~Entity</name>
      </member>
      <member refid="ShadowEngine.SHObject.~SHObject()" prot="public" virt="virtual">
        <scope>ShadowEngine::ShadowEngine::ShadowEngine::EntitySystem::Entity</scope>
        <name>~SHObject</name>
      </member>
    </listofallmembers>
  </compounddef>
</doxygen>