<?xml version="1.0" encoding="utf-8" standalone="no"?>
<doxygenindex xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="index.xsd" version="1.8.15">
  <compound refid="ShadowEngine.Assets.AssetLoader" kind="class">
    <name>ShadowEngine::Assets::AssetLoader</name>
    <member refid="ShadowEngine.Assets.AssetLoader.LoadFile(std::string)" kind="function">
      <name>LoadFile</name>
    </member>
    <member refid="ShadowEngine.Assets.AssetLoader.LoadMap(std::string)" kind="function">
      <name>LoadMap</name>
    </member>
    <member refid="ShadowEngine.Assets.AssetLoader.LoadWorld(std::string)" kind="function">
      <name>LoadWorld</name>
    </member>
    <member refid="ShadowEngine.Assets.AssetLoader.LoadAsset(std::string)" kind="function">
      <name>LoadAsset</name>
    </member>
  </compound>
  <compound refid="AssetManager" kind="class">
    <name>AssetManager</name>
    <member refid="AssetManager.instance" kind="variable">
      <name>instance</name>
    </member>
    <member refid="AssetManager.loadedAssets" kind="variable">
      <name>loadedAssets</name>
    </member>
    <member refid="AssetManager.nextID" kind="variable">
      <name>nextID</name>
    </member>
    <member refid="AssetManager.getInstance()" kind="function">
      <name>getInstance</name>
    </member>
    <member refid="AssetManager.GetAsset(std::string)" kind="function">
      <name>GetAsset</name>
    </member>
    <member refid="AssetManager.AssetManager()" kind="function">
      <name>AssetManager</name>
    </member>
    <member refid="AssetManager.~AssetManager()" kind="function">
      <name>~AssetManager</name>
    </member>
    <member refid="AssetManager.CheckLoaded(std::string,ShadowEngine::Assets::ShadowAsset **)" kind="function">
      <name>CheckLoaded</name>
    </member>
    <member refid="AssetManager.UnloadAsset(std::string)" kind="function">
      <name>UnloadAsset</name>
    </member>
    <member refid="AssetManager.UnloadAsset(ShadowEngine::Assets::ShadowAsset *)" kind="function">
      <name>UnloadAsset</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.InputSystem.Binding1D" kind="class">
    <name>ShadowEngine::InputSystem::Binding1D</name>
    <member refid="ShadowEngine.InputSystem.Binding1D.neg" kind="variable">
      <name>neg</name>
    </member>
    <member refid="ShadowEngine.InputSystem.Binding1D.Binding1D(InputBinding&lt;I&gt; *,InputBinding&lt;I&gt; *)" kind="function">
      <name>Binding1D</name>
    </member>
    <member refid="ShadowEngine.InputSystem.Binding1D.~Binding1D()" kind="function">
      <name>~Binding1D</name>
    </member>
    <member refid="ShadowEngine.InputSystem.Binding1D.ProcessEvent(BindingContext&lt;float&gt; &amp;)" kind="function">
      <name>ProcessEvent</name>
    </member>
    <member refid="ShadowEngine.InputSystem.Binding1D.DefaultBehaviour(ModifierContext &amp;)" kind="function">
      <name>DefaultBehaviour</name>
    </member>
    <member refid="ShadowEngine.InputSystem.Binding1D.GetPositiveBinding()" kind="function">
      <name>GetPositiveBinding</name>
    </member>
    <member refid="ShadowEngine.InputSystem.Binding1D.GetNegativeBinding()" kind="function">
      <name>GetNegativeBinding</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.InputSystem.Binding1DInspector" kind="class">
    <name>ShadowEngine::InputSystem::Binding1DInspector</name>
  </compound>
  <compound refid="ShadowEngine.InputSystem.Binding2D" kind="class">
    <name>ShadowEngine::InputSystem::Binding2D</name>
    <member refid="ShadowEngine.InputSystem.Binding2D.xpos_" kind="variable">
      <name>xpos_</name>
    </member>
    <member refid="ShadowEngine.InputSystem.Binding2D.xneg_" kind="variable">
      <name>xneg_</name>
    </member>
    <member refid="ShadowEngine.InputSystem.Binding2D.ypos_" kind="variable">
      <name>ypos_</name>
    </member>
    <member refid="ShadowEngine.InputSystem.Binding2D.yneg_" kind="variable">
      <name>yneg_</name>
    </member>
    <member refid="ShadowEngine.InputSystem.Binding2D.Binding2D(InputBinding&lt;I&gt; *,InputBinding&lt;I&gt; *,InputBinding&lt;I&gt; *,InputBinding&lt;I&gt; *)" kind="function">
      <name>Binding2D</name>
    </member>
    <member refid="ShadowEngine.InputSystem.Binding2D.~Binding2D()" kind="function">
      <name>~Binding2D</name>
    </member>
    <member refid="ShadowEngine.InputSystem.Binding2D.ProcessEvent(BindingContext&lt;ShadowMath::Vector2float&gt; &amp;)" kind="function">
      <name>ProcessEvent</name>
    </member>
    <member refid="ShadowEngine.InputSystem.Binding2D.DefaultBehaviour(ModifierContext &amp;)" kind="function">
      <name>DefaultBehaviour</name>
    </member>
    <member refid="ShadowEngine.InputSystem.Binding2D.GetXPositiveBinding()" kind="function">
      <name>GetXPositiveBinding</name>
    </member>
    <member refid="ShadowEngine.InputSystem.Binding2D.GetXNegativeBinding()" kind="function">
      <name>GetXNegativeBinding</name>
    </member>
    <member refid="ShadowEngine.InputSystem.Binding2D.GetYPositiveBinding()" kind="function">
      <name>GetYPositiveBinding</name>
    </member>
    <member refid="ShadowEngine.InputSystem.Binding2D.GetYNegativeBinding()" kind="function">
      <name>GetYNegativeBinding</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.InputSystem.Binding2DInspector" kind="class">
    <name>ShadowEngine::InputSystem::Binding2DInspector</name>
  </compound>
  <compound refid="ShadowEngine.InputSystem.BindingAND" kind="class">
    <name>ShadowEngine::InputSystem::BindingAND</name>
    <member refid="ShadowEngine.InputSystem.BindingAND.bBinding" kind="variable">
      <name>bBinding</name>
    </member>
    <member refid="ShadowEngine.InputSystem.BindingAND.aState" kind="variable">
      <name>aState</name>
    </member>
    <member refid="ShadowEngine.InputSystem.BindingAND.bState" kind="variable">
      <name>bState</name>
    </member>
    <member refid="ShadowEngine.InputSystem.BindingAND.BindingANDInspector" kind="friend">
      <name>BindingANDInspector</name>
    </member>
    <member refid="ShadowEngine.InputSystem.BindingAND.SHObject_Base(BindingAND&lt;I&gt;)" kind="function">
      <name>SHObject_Base</name>
    </member>
    <member refid="ShadowEngine.InputSystem.BindingAND.BindingAND(InputBinding&lt;I&gt; *,InputBinding&lt;I&gt; *)" kind="function">
      <name>BindingAND</name>
    </member>
    <member refid="ShadowEngine.InputSystem.BindingAND.~BindingAND()" kind="function">
      <name>~BindingAND</name>
    </member>
    <member refid="ShadowEngine.InputSystem.BindingAND.ProcessEvent(BindingContext&lt;I&gt; &amp;)" kind="function">
      <name>ProcessEvent</name>
    </member>
    <member refid="ShadowEngine.InputSystem.BindingAND.DefaultBehaviour(ModifierContext &amp;)" kind="function">
      <name>DefaultBehaviour</name>
    </member>
    <member refid="ShadowEngine.InputSystem.BindingAND.GetABinding()" kind="function">
      <name>GetABinding</name>
    </member>
    <member refid="ShadowEngine.InputSystem.BindingAND.GetBBinding()" kind="function">
      <name>GetBBinding</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.InputSystem.BindingANDInspector" kind="class">
    <name>ShadowEngine::InputSystem::BindingANDInspector</name>
  </compound>
  <compound refid="ShadowEngine.InputSystem.BindingContext" kind="class">
    <name>ShadowEngine::InputSystem::BindingContext</name>
    <member refid="ShadowEngine.InputSystem.BindingContext.event_" kind="variable">
      <name>event_</name>
    </member>
    <member refid="ShadowEngine.InputSystem.BindingContext.continuous_" kind="variable">
      <name>continuous_</name>
    </member>
    <member refid="ShadowEngine.InputSystem.BindingContext.bindingState_" kind="variable">
      <name>bindingState_</name>
    </member>
    <member refid="ShadowEngine.InputSystem.BindingContext.outState_" kind="variable">
      <name>outState_</name>
    </member>
    <member refid="ShadowEngine.InputSystem.BindingContext.data_" kind="variable">
      <name>data_</name>
    </member>
    <member refid="ShadowEngine.InputSystem.BindingContext.processed_" kind="variable">
      <name>processed_</name>
    </member>
    <member refid="ShadowEngine.InputSystem.BindingContext.BindingContext(const EventSystem::ShadowEvent *,bool)" kind="function">
      <name>BindingContext</name>
    </member>
    <member refid="ShadowEngine.InputSystem.BindingContext.~BindingContext()" kind="function">
      <name>~BindingContext</name>
    </member>
    <member refid="ShadowEngine.InputSystem.BindingContext.GetEvent()" kind="function">
      <name>GetEvent</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.InputSystem.BindingOR" kind="class">
    <name>ShadowEngine::InputSystem::BindingOR</name>
    <member refid="ShadowEngine.InputSystem.BindingOR.aBinding" kind="variable">
      <name>aBinding</name>
    </member>
    <member refid="ShadowEngine.InputSystem.BindingOR.bBinding" kind="variable">
      <name>bBinding</name>
    </member>
    <member refid="ShadowEngine.InputSystem.BindingOR.aState" kind="variable">
      <name>aState</name>
    </member>
    <member refid="ShadowEngine.InputSystem.BindingOR.bState" kind="variable">
      <name>bState</name>
    </member>
    <member refid="ShadowEngine.InputSystem.BindingOR.BindingORInspector" kind="friend">
      <name>BindingORInspector</name>
    </member>
    <member refid="ShadowEngine.InputSystem.BindingOR.SHObject_Base(BindingOR&lt;I&gt;)" kind="function">
      <name>SHObject_Base</name>
    </member>
    <member refid="ShadowEngine.InputSystem.BindingOR.BindingOR(InputBinding&lt;I&gt; *,InputBinding&lt;I&gt; *)" kind="function">
      <name>BindingOR</name>
    </member>
    <member refid="ShadowEngine.InputSystem.BindingOR.~BindingOR()" kind="function">
      <name>~BindingOR</name>
    </member>
    <member refid="ShadowEngine.InputSystem.BindingOR.ProcessEvent(BindingContext&lt;I&gt; &amp;)" kind="function">
      <name>ProcessEvent</name>
    </member>
    <member refid="ShadowEngine.InputSystem.BindingOR.DefaultBehaviour(ModifierContext &amp;)" kind="function">
      <name>DefaultBehaviour</name>
    </member>
    <member refid="ShadowEngine.InputSystem.BindingOR.GetABinding()" kind="function">
      <name>GetABinding</name>
    </member>
    <member refid="ShadowEngine.InputSystem.BindingOR.GetBBinding()" kind="function">
      <name>GetBBinding</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.InputSystem.BindingORInspector" kind="class">
    <name>ShadowEngine::InputSystem::BindingORInspector</name>
  </compound>
  <compound refid="ShadowEngine.Rendering.BufferElement" kind="struct">
    <name>ShadowEngine::Rendering::BufferElement</name>
    <member refid="ShadowEngine.Rendering.BufferElement.Name" kind="variable">
      <name>Name</name>
    </member>
    <member refid="ShadowEngine.Rendering.BufferElement.Type" kind="variable">
      <name>Type</name>
    </member>
    <member refid="ShadowEngine.Rendering.BufferElement.Size" kind="variable">
      <name>Size</name>
    </member>
    <member refid="ShadowEngine.Rendering.BufferElement.Offset" kind="variable">
      <name>Offset</name>
    </member>
    <member refid="ShadowEngine.Rendering.BufferElement.Normalized" kind="variable">
      <name>Normalized</name>
    </member>
    <member refid="ShadowEngine.Rendering.BufferElement.BufferElement()" kind="function">
      <name>BufferElement</name>
    </member>
    <member refid="ShadowEngine.Rendering.BufferElement.BufferElement(ShaderDataType,const std::string &amp;,bool)" kind="function">
      <name>BufferElement</name>
    </member>
    <member refid="ShadowEngine.Rendering.BufferElement.GetComponentCount()" kind="function">
      <name>GetComponentCount</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.Rendering.BufferLayout" kind="class">
    <name>ShadowEngine::Rendering::BufferLayout</name>
    <member refid="ShadowEngine.Rendering.BufferLayout.m_Elements" kind="variable">
      <name>m_Elements</name>
    </member>
    <member refid="ShadowEngine.Rendering.BufferLayout.m_Stride" kind="variable">
      <name>m_Stride</name>
    </member>
    <member refid="ShadowEngine.Rendering.BufferLayout.BufferLayout()" kind="function">
      <name>BufferLayout</name>
    </member>
    <member refid="ShadowEngine.Rendering.BufferLayout.BufferLayout(const std::initializer_list&lt;BufferElement&gt; &amp;)" kind="function">
      <name>BufferLayout</name>
    </member>
    <member refid="ShadowEngine.Rendering.BufferLayout.GetStride()" kind="function">
      <name>GetStride</name>
    </member>
    <member refid="ShadowEngine.Rendering.BufferLayout.GetElements()" kind="function">
      <name>GetElements</name>
    </member>
    <member refid="ShadowEngine.Rendering.BufferLayout.begin()" kind="function">
      <name>begin</name>
    </member>
    <member refid="ShadowEngine.Rendering.BufferLayout.end()" kind="function">
      <name>end</name>
    </member>
    <member refid="ShadowEngine.Rendering.BufferLayout.begin()" kind="function">
      <name>begin</name>
    </member>
    <member refid="ShadowEngine.Rendering.BufferLayout.end()" kind="function">
      <name>end</name>
    </member>
    <member refid="ShadowEngine.Rendering.BufferLayout.CalculateOffsetsAndStride()" kind="function">
      <name>CalculateOffsetsAndStride</name>
    </member>
  </compound>
  <compound refid="Callback" kind="class">
    <name>Callback</name>
    <member refid="Callback.callbacks" kind="variable">
      <name>callbacks</name>
    </member>
    <member refid="Callback.operator()()" kind="function">
      <name>operator()</name>
    </member>
    <member refid="Callback.operator+=(std::function&lt;void()&gt;)" kind="function">
      <name>operator+=</name>
    </member>
    <member refid="Callback.Callback()" kind="function">
      <name>Callback</name>
    </member>
    <member refid="Callback.~Callback()" kind="function">
      <name>~Callback</name>
    </member>
  </compound>
  <compound refid="Camera" kind="class">
    <name>Camera</name>
    <member refid="Camera.m_ProjectionMatrix" kind="variable">
      <name>m_ProjectionMatrix</name>
    </member>
    <member refid="Camera.m_ViewMatrix" kind="variable">
      <name>m_ViewMatrix</name>
    </member>
    <member refid="Camera.m_ViewProjectionMatrix" kind="variable">
      <name>m_ViewProjectionMatrix</name>
    </member>
    <member refid="Camera.type" kind="variable">
      <name>type</name>
    </member>
    <member refid="Camera.ortho_height" kind="variable">
      <name>ortho_height</name>
    </member>
    <member refid="Camera.SHObject_Base(Camera)" kind="function">
      <name>SHObject_Base</name>
    </member>
    <member refid="Camera.TransformChanged(bool)" kind="function">
      <name>TransformChanged</name>
    </member>
    <member refid="Camera.ortho_RecalculateViewMatrix()" kind="function">
      <name>ortho_RecalculateViewMatrix</name>
    </member>
    <member refid="Camera.ortho_Setup()" kind="function">
      <name>ortho_Setup</name>
    </member>
    <member refid="Camera.persp_RecalculateViewMatrix()" kind="function">
      <name>persp_RecalculateViewMatrix</name>
    </member>
    <member refid="Camera.persp_Setup()" kind="function">
      <name>persp_Setup</name>
    </member>
    <member refid="Camera.GetProjectionMatrix()" kind="function">
      <name>GetProjectionMatrix</name>
    </member>
    <member refid="Camera.GetViewMatrix()" kind="function">
      <name>GetViewMatrix</name>
    </member>
    <member refid="Camera.GetViewProjectionMatrix()" kind="function">
      <name>GetViewProjectionMatrix</name>
    </member>
    <member refid="Camera.SetCameraType(CameraType)" kind="function">
      <name>SetCameraType</name>
    </member>
    <member refid="Camera.Init()" kind="function">
      <name>Init</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.Rendering.CommandList" kind="class">
    <name>ShadowEngine::Rendering::CommandList</name>
    <member refid="ShadowEngine.Rendering.CommandList.~CommandList()" kind="function">
      <name>~CommandList</name>
    </member>
    <member refid="ShadowEngine.Rendering.CommandList.Reset()" kind="function">
      <name>Reset</name>
    </member>
    <member refid="ShadowEngine.Rendering.CommandList.Create()" kind="function">
      <name>Create</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.Rendering.CommandQueue" kind="class">
    <name>ShadowEngine::Rendering::CommandQueue</name>
    <member refid="ShadowEngine.Rendering.CommandQueue.Execute(Ref&lt;CommandList&gt;)" kind="function">
      <name>Execute</name>
    </member>
    <member refid="ShadowEngine.Rendering.CommandQueue.~CommandQueue()" kind="function">
      <name>~CommandQueue</name>
    </member>
    <member refid="ShadowEngine.Rendering.CommandQueue.Create()" kind="function">
      <name>Create</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.Rendering.ConstantBuffer" kind="class">
    <name>ShadowEngine::Rendering::ConstantBuffer</name>
    <member refid="ShadowEngine.Rendering.ConstantBuffer.impl" kind="variable">
      <name>impl</name>
    </member>
    <member refid="ShadowEngine.Rendering.ConstantBuffer.~ConstantBuffer()" kind="function">
      <name>~ConstantBuffer</name>
    </member>
    <member refid="ShadowEngine.Rendering.ConstantBuffer.ConstantBuffer(size_t)" kind="function">
      <name>ConstantBuffer</name>
    </member>
    <member refid="ShadowEngine.Rendering.ConstantBuffer.GetImpl()" kind="function">
      <name>GetImpl</name>
    </member>
    <member refid="ShadowEngine.Rendering.ConstantBuffer.As()" kind="function">
      <name>As</name>
    </member>
    <member refid="ShadowEngine.Rendering.ConstantBuffer.Set(void *)" kind="function">
      <name>Set</name>
    </member>
    <member refid="ShadowEngine.Rendering.ConstantBuffer.Upload()" kind="function">
      <name>Upload</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.Rendering.ConstantBuffer_ShaderPropertySheet" kind="class">
    <name>ShadowEngine::Rendering::ConstantBuffer_ShaderPropertySheet</name>
    <member refid="ShadowEngine.Rendering.ConstantBuffer_ShaderPropertySheet.data" kind="variable">
      <name>data</name>
    </member>
    <member refid="ShadowEngine.Rendering.ConstantBuffer_ShaderPropertySheet.size" kind="variable">
      <name>size</name>
    </member>
    <member refid="ShadowEngine.Rendering.ConstantBuffer_ShaderPropertySheet.ConstantBuffer_ShaderPropertySheet(Ref&lt;ShaderPropertySheet&gt;)" kind="function">
      <name>ConstantBuffer_ShaderPropertySheet</name>
    </member>
    <member refid="ShadowEngine.Rendering.ConstantBuffer_ShaderPropertySheet.Upload()" kind="function">
      <name>Upload</name>
    </member>
    <member refid="ShadowEngine.Rendering.ConstantBuffer_ShaderPropertySheet.Set(void *)" kind="function">
      <name>Set</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.Rendering.ConstantBuffer_Typed" kind="class">
    <name>ShadowEngine::Rendering::ConstantBuffer_Typed</name>
    <member refid="ShadowEngine.Rendering.ConstantBuffer_Typed.data" kind="variable">
      <name>data</name>
    </member>
    <member refid="ShadowEngine.Rendering.ConstantBuffer_Typed.ConstantBuffer_Typed()" kind="function">
      <name>ConstantBuffer_Typed</name>
    </member>
    <member refid="ShadowEngine.Rendering.ConstantBuffer_Typed.operator=(const T &amp;)" kind="function">
      <name>operator=</name>
    </member>
    <member refid="ShadowEngine.Rendering.ConstantBuffer_Typed.operator-&gt;()" kind="function">
      <name>operator-&gt;</name>
    </member>
    <member refid="ShadowEngine.Rendering.ConstantBuffer_Typed.Set(void *)" kind="function">
      <name>Set</name>
    </member>
    <member refid="ShadowEngine.Rendering.ConstantBuffer_Typed.Upload()" kind="function">
      <name>Upload</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.Rendering.ConstantBufferImpl" kind="class">
    <name>ShadowEngine::Rendering::ConstantBufferImpl</name>
    <member refid="ShadowEngine.Rendering.ConstantBufferImpl.Upload(void *,size_t)" kind="function">
      <name>Upload</name>
    </member>
    <member refid="ShadowEngine.Rendering.ConstantBufferImpl.Create(size_t)" kind="function">
      <name>Create</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.Rendering.D3D12.D3D12CommandList" kind="class">
    <name>ShadowEngine::Rendering::D3D12::D3D12CommandList</name>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12CommandList.commandAllocator" kind="variable">
      <name>commandAllocator</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12CommandList.commandList" kind="variable">
      <name>commandList</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12CommandList.renderTarget" kind="variable">
      <name>renderTarget</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12CommandList.depthBuffer" kind="variable">
      <name>depthBuffer</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12CommandList.isBeingRecorded" kind="variable">
      <name>isBeingRecorded</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12CommandList.D3D12CommandList()" kind="function">
      <name>D3D12CommandList</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12CommandList.GetCommandList()" kind="function">
      <name>GetCommandList</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12CommandList.UseShader(const Ref&lt;D3D12Shader&gt; &amp;)" kind="function">
      <name>UseShader</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12CommandList.Reset()" kind="function">
      <name>Reset</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12CommandList.StartRecording()" kind="function">
      <name>StartRecording</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12CommandList.SetViewports(D3D12_VIEWPORT)" kind="function">
      <name>SetViewports</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12CommandList.SetScissorRects(D3D12_RECT)" kind="function">
      <name>SetScissorRects</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12CommandList.ResourceBarrier(D3D12_RESOURCE_BARRIER *)" kind="function">
      <name>ResourceBarrier</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12CommandList.SetRenderTargets(Ref&lt;D3D12SwapChain&gt;,Ref&lt;D3D12DepthBuffer&gt;)" kind="function">
      <name>SetRenderTargets</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12CommandList.ClearRenderTargetView(const float *)" kind="function">
      <name>ClearRenderTargetView</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12CommandList.ClearDepthStencilView(float,uint8_t)" kind="function">
      <name>ClearDepthStencilView</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12CommandList.Close()" kind="function">
      <name>Close</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12CommandList.DrawMesh(const std::shared_ptr&lt;Assets::Mesh&gt; &amp;)" kind="function">
      <name>DrawMesh</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12CommandList.BindConstantBuffer(const Ref&lt;ConstantBuffer&gt; &amp;,int)" kind="function">
      <name>BindConstantBuffer</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12CommandList.BindConstantBuffer(const ConstantBuffer &amp;,int)" kind="function">
      <name>BindConstantBuffer</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.Rendering.D3D12.D3D12CommandQueue" kind="class">
    <name>ShadowEngine::Rendering::D3D12::D3D12CommandQueue</name>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12CommandQueue.commandQueue" kind="variable">
      <name>commandQueue</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12CommandQueue.D3D12CommandQueue()" kind="function">
      <name>D3D12CommandQueue</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12CommandQueue.GetInternalPtr()" kind="function">
      <name>GetInternalPtr</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12CommandQueue.Execute(Ref&lt;D3D12CommandList&gt;)" kind="function">
      <name>Execute</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12CommandQueue.Signal(Ref&lt;D3D12Fence&gt;,uint64_t)" kind="function">
      <name>Signal</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.Rendering.D3D12.D3D12ConstantBuffer" kind="class">
    <name>ShadowEngine::Rendering::D3D12::D3D12ConstantBuffer</name>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12ConstantBuffer.mappedPtr" kind="variable">
      <name>mappedPtr</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12ConstantBuffer.constantBuffer" kind="variable">
      <name>constantBuffer</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12ConstantBuffer.D3D12ConstantBuffer(size_t)" kind="function">
      <name>D3D12ConstantBuffer</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12ConstantBuffer.~D3D12ConstantBuffer()" kind="function">
      <name>~D3D12ConstantBuffer</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12ConstantBuffer.CreateResources(size_t)" kind="function">
      <name>CreateResources</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12ConstantBuffer.GetGPUVirtualAddress()" kind="function">
      <name>GetGPUVirtualAddress</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12ConstantBuffer.ReleaseResources()" kind="function">
      <name>ReleaseResources</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12ConstantBuffer.Upload(void *,size_t)" kind="function">
      <name>Upload</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.Rendering.D3D12.D3D12Context" kind="class">
    <name>ShadowEngine::Rendering::D3D12::D3D12Context</name>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12Context.m_WindowHandle" kind="variable">
      <name>m_WindowHandle</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12Context.hwnd" kind="variable">
      <name>hwnd</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12Context.window" kind="variable">
      <name>window</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12Context.dxgiFactory" kind="variable">
      <name>dxgiFactory</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12Context.D3D12Context(ShadowWindow *)" kind="function">
      <name>D3D12Context</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12Context.Init()" kind="function">
      <name>Init</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12Context.SwapBuffers()" kind="function">
      <name>SwapBuffers</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.Rendering.D3D12.D3D12DepthBuffer" kind="class">
    <name>ShadowEngine::Rendering::D3D12::D3D12DepthBuffer</name>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12DepthBuffer.depthStencilBuffer" kind="variable">
      <name>depthStencilBuffer</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12DepthBuffer.descriptorHeap" kind="variable">
      <name>descriptorHeap</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12DepthBuffer.D3D12DepthBuffer(D3D12_RECT)" kind="function">
      <name>D3D12DepthBuffer</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12DepthBuffer.GetDescriptorHandle()" kind="function">
      <name>GetDescriptorHandle</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.Rendering.D3D12.D3D12DescriptorHeap" kind="class">
    <name>ShadowEngine::Rendering::D3D12::D3D12DescriptorHeap</name>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12DescriptorHeap._descriptorHeap" kind="variable">
      <name>_descriptorHeap</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12DescriptorHeap.D3D12DescriptorHeap(D3D12_DESCRIPTOR_HEAP_FLAGS,D3D12_DESCRIPTOR_HEAP_TYPE,UINT)" kind="function">
      <name>D3D12DescriptorHeap</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12DescriptorHeap.~D3D12DescriptorHeap()" kind="function">
      <name>~D3D12DescriptorHeap</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12DescriptorHeap.GetCPUDescriptorHandleForHeapStart()" kind="function">
      <name>GetCPUDescriptorHandleForHeapStart</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12DescriptorHeap.Reset()" kind="function">
      <name>Reset</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.Rendering.D3D12.D3D12Fence" kind="class">
    <name>ShadowEngine::Rendering::D3D12::D3D12Fence</name>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12Fence.fence" kind="variable">
      <name>fence</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12Fence.D3D12Fence()" kind="function">
      <name>D3D12Fence</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12Fence.GetCompletedValue()" kind="function">
      <name>GetCompletedValue</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12Fence.SetEventOnCompletion(const UINT64,HANDLE)" kind="function">
      <name>SetEventOnCompletion</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12Fence.GetFencePointer()" kind="function">
      <name>GetFencePointer</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.Rendering.D3D12.D3D12IndexBuffer" kind="class">
    <name>ShadowEngine::Rendering::D3D12::D3D12IndexBuffer</name>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12IndexBuffer.m_Count" kind="variable">
      <name>m_Count</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12IndexBuffer.indexBuffer" kind="variable">
      <name>indexBuffer</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12IndexBuffer.indexBufferView" kind="variable">
      <name>indexBufferView</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12IndexBuffer.D3D12IndexBuffer(void *,uint32_t)" kind="function">
      <name>D3D12IndexBuffer</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12IndexBuffer.~D3D12IndexBuffer()" kind="function">
      <name>~D3D12IndexBuffer</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12IndexBuffer.GetCount()" kind="function">
      <name>GetCount</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12IndexBuffer.GetBufferView()" kind="function">
      <name>GetBufferView</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.Rendering.D3D12.D3D12RendererAPI" kind="class">
    <name>ShadowEngine::Rendering::D3D12::D3D12RendererAPI</name>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12RendererAPI.device" kind="variable">
      <name>device</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12RendererAPI.ctx" kind="variable">
      <name>ctx</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12RendererAPI.command_queue" kind="variable">
      <name>command_queue</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12RendererAPI.command_list" kind="variable">
      <name>command_list</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12RendererAPI.swap_chain" kind="variable">
      <name>swap_chain</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12RendererAPI.depth_buffer" kind="variable">
      <name>depth_buffer</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12RendererAPI.viewPort" kind="variable">
      <name>viewPort</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12RendererAPI.scissorRect" kind="variable">
      <name>scissorRect</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12RendererAPI.aspectRatio" kind="variable">
      <name>aspectRatio</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12RendererAPI.fence" kind="variable">
      <name>fence</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12RendererAPI.fenceEvent" kind="variable">
      <name>fenceEvent</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12RendererAPI.fenceValue" kind="variable">
      <name>fenceValue</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12RendererAPI.worldData" kind="variable">
      <name>worldData</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12RendererAPI.Init(ShadowEngine::Ref&lt;GraphicsContext&gt;)" kind="function">
      <name>Init</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12RendererAPI.SetClearColor(const glm::vec4 &amp;)" kind="function">
      <name>SetClearColor</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12RendererAPI.Clear()" kind="function">
      <name>Clear</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12RendererAPI.Draw(const Ref&lt;Assets::Mesh&gt;,const Ref&lt;Assets::Material&gt;,const glm::mat4 &amp;)" kind="function">
      <name>Draw</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12RendererAPI.Draw(const std::shared_ptr&lt;Assets::Mesh&gt; &amp;,const std::shared_ptr&lt;Assets::Material&gt; &amp;,const ConstantBuffer &amp;)" kind="function">
      <name>Draw</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12RendererAPI.StartFrame(Ref&lt;ConstantBuffer&gt;)" kind="function">
      <name>StartFrame</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12RendererAPI.EndFrame()" kind="function">
      <name>EndFrame</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12RendererAPI.WaitForPreviousFrame()" kind="function">
      <name>WaitForPreviousFrame</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.Rendering.D3D12.D3D12Shader" kind="class">
    <name>ShadowEngine::Rendering::D3D12::D3D12Shader</name>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12Shader.VertexShaderByteCode" kind="variable">
      <name>VertexShaderByteCode</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12Shader.FragmentShaderByteCode" kind="variable">
      <name>FragmentShaderByteCode</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12Shader.rootSig" kind="variable">
      <name>rootSig</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12Shader.blendState" kind="variable">
      <name>blendState</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12Shader.rasterizerState" kind="variable">
      <name>rasterizerState</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12Shader.depthStencilState" kind="variable">
      <name>depthStencilState</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12Shader.dsvFormat" kind="variable">
      <name>dsvFormat</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12Shader.pipelineState" kind="variable">
      <name>pipelineState</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12Shader.gpsoDesc" kind="variable">
      <name>gpsoDesc</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12Shader.vsReflection" kind="variable">
      <name>vsReflection</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12Shader.gsReflection" kind="variable">
      <name>gsReflection</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12Shader.psReflection" kind="variable">
      <name>psReflection</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12Shader.rsDeserializer" kind="variable">
      <name>rsDeserializer</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12Shader.materialDataIndex" kind="variable">
      <name>materialDataIndex</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12Shader.D3D12Shader::LoadCso(const std::string &amp;)" kind="function">
      <name>D3D12Shader::LoadCso</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12Shader.CreateInputDescriptor(BufferLayout &amp;)" kind="function">
      <name>CreateInputDescriptor</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12Shader.CreatePipelineDescriptor(D3D12_GRAPHICS_PIPELINE_STATE_DESC &amp;)" kind="function">
      <name>CreatePipelineDescriptor</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12Shader.D3D12Shader(const std::string &amp;,const std::string &amp;)" kind="function">
      <name>D3D12Shader</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12Shader.~D3D12Shader()" kind="function">
      <name>~D3D12Shader</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12Shader.GetPipelineState()" kind="function">
      <name>GetPipelineState</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12Shader.GetRootSignature()" kind="function">
      <name>GetRootSignature</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12Shader.GetMaterialSlotIndex()" kind="function">
      <name>GetMaterialSlotIndex</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12Shader.Bind()" kind="function">
      <name>Bind</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12Shader.Unbind()" kind="function">
      <name>Unbind</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.Rendering.D3D12.D3D12SwapChain" kind="class">
    <name>ShadowEngine::Rendering::D3D12::D3D12SwapChain</name>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12SwapChain.swapChain" kind="variable">
      <name>swapChain</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12SwapChain.backBufferDepth" kind="variable">
      <name>backBufferDepth</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12SwapChain.rtvDescriptorHeap" kind="variable">
      <name>rtvDescriptorHeap</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12SwapChain.rtvDescriptorHandleIncrementSize" kind="variable">
      <name>rtvDescriptorHandleIncrementSize</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12SwapChain.rtvHandle" kind="variable">
      <name>rtvHandle</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12SwapChain.renderTargets" kind="variable">
      <name>renderTargets</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12SwapChain.frameIndex" kind="variable">
      <name>frameIndex</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12SwapChain.D3D12SwapChain(Ref&lt;D3D12CommandQueue&gt;,int,int)" kind="function">
      <name>D3D12SwapChain</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12SwapChain.~D3D12SwapChain()" kind="function">
      <name>~D3D12SwapChain</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12SwapChain.CreateSwapchain(Ref&lt;D3D12CommandQueue&gt;)" kind="function">
      <name>CreateSwapchain</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12SwapChain.CreateSwapchainResources()" kind="function">
      <name>CreateSwapchainResources</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12SwapChain.GetRenderTarget(int)" kind="function">
      <name>GetRenderTarget</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12SwapChain.GetCurrentRenderTarget()" kind="function">
      <name>GetCurrentRenderTarget</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12SwapChain.GetCurrentRenderTargetDescriptor()" kind="function">
      <name>GetCurrentRenderTargetDescriptor</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12SwapChain.ReleaseSwapChainResources()" kind="function">
      <name>ReleaseSwapChainResources</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12SwapChain.Resize(int,int)" kind="function">
      <name>Resize</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12SwapChain.Present(UINT,UINT)" kind="function">
      <name>Present</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12SwapChain.GetCurrentBackBufferIndex()" kind="function">
      <name>GetCurrentBackBufferIndex</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12SwapChain.UpdateCurrentBackBufferIndex()" kind="function">
      <name>UpdateCurrentBackBufferIndex</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.Rendering.D3D12.D3D12VertexBuffer" kind="class">
    <name>ShadowEngine::Rendering::D3D12::D3D12VertexBuffer</name>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12VertexBuffer.vertexBuffer" kind="variable">
      <name>vertexBuffer</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12VertexBuffer.vertexBufferView" kind="variable">
      <name>vertexBufferView</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12VertexBuffer.m_Layout" kind="variable">
      <name>m_Layout</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12VertexBuffer.D3D12VertexBuffer(void *,uint32_t)" kind="function">
      <name>D3D12VertexBuffer</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12VertexBuffer.~D3D12VertexBuffer()" kind="function">
      <name>~D3D12VertexBuffer</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12VertexBuffer.GetLayout()" kind="function">
      <name>GetLayout</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12VertexBuffer.SetLayout(const ShadowEngine::Rendering::BufferLayout &amp;)" kind="function">
      <name>SetLayout</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.D3D12VertexBuffer.GetBufferView()" kind="function">
      <name>GetBufferView</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.Debug.DebugModule" kind="class">
    <name>ShadowEngine::Debug::DebugModule</name>
    <member refid="ShadowEngine.Debug.DebugModule.active" kind="variable">
      <name>active</name>
    </member>
    <member refid="ShadowEngine.Debug.DebugModule.DebugModule::ActionDebug()" kind="function">
      <name>DebugModule::ActionDebug</name>
    </member>
    <member refid="ShadowEngine.Debug.DebugModule.Init()" kind="function">
      <name>Init</name>
    </member>
    <member refid="ShadowEngine.Debug.DebugModule.Update()" kind="function">
      <name>Update</name>
    </member>
    <member refid="ShadowEngine.Debug.DebugModule.Render()" kind="function">
      <name>Render</name>
    </member>
    <member refid="ShadowEngine.Debug.DebugModule.LateRender()" kind="function">
      <name>LateRender</name>
    </member>
    <member refid="ShadowEngine.Debug.DebugModule.GetName()" kind="function">
      <name>GetName</name>
    </member>
    <member refid="ShadowEngine.Debug.DebugModule.OnEvent(EventSystem::ShadowEvent &amp;)" kind="function">
      <name>OnEvent</name>
    </member>
    <member refid="ShadowEngine.Debug.DebugModule.OnGui()" kind="function">
      <name>OnGui</name>
    </member>
    <member refid="ShadowEngine.Debug.DebugModule.DebugModule()" kind="function">
      <name>DebugModule</name>
    </member>
    <member refid="ShadowEngine.Debug.DebugModule.~DebugModule()" kind="function">
      <name>~DebugModule</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.Assets.Element" kind="class">
    <name>ShadowEngine::Assets::Element</name>
    <member refid="ShadowEngine.Assets.Element.parent" kind="variable">
      <name>parent</name>
    </member>
    <member refid="ShadowEngine.Assets.Element.name" kind="variable">
      <name>name</name>
    </member>
    <member refid="ShadowEngine.Assets.Element.isBlock" kind="variable">
      <name>isBlock</name>
    </member>
    <member refid="ShadowEngine.Assets.Element.value" kind="variable">
      <name>value</name>
    </member>
    <member refid="ShadowEngine.Assets.Element.properties_old" kind="variable">
      <name>properties_old</name>
    </member>
    <member refid="ShadowEngine.Assets.Element.properties" kind="variable">
      <name>properties</name>
    </member>
    <member refid="ShadowEngine.Assets.Element.GetStringProperty(std::string)" kind="function">
      <name>GetStringProperty</name>
    </member>
    <member refid="ShadowEngine.Assets.Element.~Element()" kind="function">
      <name>~Element</name>
    </member>
  </compound>
  <compound refid="EntityContainer.Element" kind="union">
    <name>EntityContainer::Element</name>
    <member refid="EntityContainer.Element.next" kind="variable">
      <name>next</name>
    </member>
    <member refid="EntityContainer.Element.element" kind="variable">
      <name>element</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity" kind="class">
    <name>ShadowEngine::ShadowEngine::ShadowEngine::EntitySystem::Entity</name>
    <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.INVALID_UID" kind="variable">
      <name>INVALID_UID</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.m_runtimeIndex" kind="variable">
      <name>m_runtimeIndex</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.scene" kind="variable">
      <name>scene</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.internalHierarchy" kind="variable">
      <name>internalHierarchy</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.hierarchy" kind="variable">
      <name>hierarchy</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.parent" kind="variable">
      <name>parent</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.Entity()" kind="function">
      <name>Entity</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.Entity(Scene *)" kind="function">
      <name>Entity</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.~Entity()" kind="function">
      <name>~Entity</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.Create(Scene *)" kind="function">
      <name>Create</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.Init()" kind="function">
      <name>Init</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.Start()" kind="function">
      <name>Start</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.Update()" kind="function">
      <name>Update</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.LateUpdate()" kind="function">
      <name>LateUpdate</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.Render()" kind="function">
      <name>Render</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.LateRender()" kind="function">
      <name>LateRender</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.GetFlags()" kind="function">
      <name>GetFlags</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.TransformChanged(bool)" kind="function">
      <name>TransformChanged</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.GetTransform()" kind="function">
      <name>GetTransform</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.SetScene(Scene *)" kind="function">
      <name>SetScene</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.SetParent(rtm_ptr&lt;Entity&gt;)" kind="function">
      <name>SetParent</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.operator&lt;&lt;" kind="friend">
      <name>operator&lt;&lt;</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.UpdateEntities(EntityManager *)" kind="function">
      <name>UpdateEntities</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.InitEntities(EntityManager *)" kind="function">
      <name>InitEntities</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.Entity.RegisterDefaultUpdate(EntityManager &amp;)" kind="function">
      <name>RegisterDefaultUpdate</name>
    </member>
  </compound>
  <compound refid="EntityContainer" kind="class">
    <name>EntityContainer</name>
    <member refid="EntityContainer.MemoryChunks" kind="typedef">
      <name>MemoryChunks</name>
    </member>
    <member refid="EntityContainer.MAX_OBJECTS_IN_CHUNK" kind="variable">
      <name>MAX_OBJECTS_IN_CHUNK</name>
    </member>
    <member refid="EntityContainer.ELEMENT_SIZE" kind="variable">
      <name>ELEMENT_SIZE</name>
    </member>
    <member refid="EntityContainer.ALLOC_SIZE" kind="variable">
      <name>ALLOC_SIZE</name>
    </member>
    <member refid="EntityContainer.m_Chunks" kind="variable">
      <name>m_Chunks</name>
    </member>
    <member refid="EntityContainer.EntityContainer()" kind="function">
      <name>EntityContainer</name>
    </member>
    <member refid="EntityContainer.CreateObject()" kind="function">
      <name>CreateObject</name>
    </member>
    <member refid="EntityContainer.DestroyObject(void *)" kind="function">
      <name>DestroyObject</name>
    </member>
    <member refid="EntityContainer.begin()" kind="function">
      <name>begin</name>
    </member>
    <member refid="EntityContainer.end()" kind="function">
      <name>end</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.EntitySystem.EntityManager" kind="class">
    <name>ShadowEngine::EntitySystem::EntityManager</name>
    <member refid="ShadowEngine.EntitySystem.EntityManager.EntityContainerRegistry" kind="typedef">
      <name>EntityContainerRegistry</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.EntityManager.EntityLookupTable" kind="typedef">
      <name>EntityLookupTable</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.EntityManager.Instance" kind="variable">
      <name>Instance</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.EntityManager.m_EntityContainerRegistry" kind="variable">
      <name>m_EntityContainerRegistry</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.EntityManager.m_EntityLUT" kind="variable">
      <name>m_EntityLUT</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.EntityManager.ENTITY_LUT_GROW" kind="variable">
      <name>ENTITY_LUT_GROW</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.EntityManager.LUTNextFree" kind="variable">
      <name>LUTNextFree</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.EntityManager.LUTFragm" kind="variable">
      <name>LUTFragm</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.EntityManager.LUTFragmFree" kind="variable">
      <name>LUTFragmFree</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.EntityManager.systems" kind="variable">
      <name>systems</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.EntityManager.nextUID" kind="variable">
      <name>nextUID</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.EntityManager.GetComponentContainer()" kind="function">
      <name>GetComponentContainer</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.EntityManager.GetComponentContainer(int)" kind="function">
      <name>GetComponentContainer</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.EntityManager.AssignIndexToEntity(Entity *)" kind="function">
      <name>AssignIndexToEntity</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.EntityManager.ReleaseIndex(int)" kind="function">
      <name>ReleaseIndex</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.EntityManager.EntityManager()" kind="function">
      <name>EntityManager</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.EntityManager.AddEntity(ARGS &amp;&amp;...)" kind="function">
      <name>AddEntity</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.EntityManager.RemoveEntity(const int,const int)" kind="function">
      <name>RemoveEntity</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.EntityManager.RemoveEntity(const int)" kind="function">
      <name>RemoveEntity</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.EntityManager.RemoveEntity(T *)" kind="function">
      <name>RemoveEntity</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.EntityManager.RemoveEntity(rtm_ptr&lt;T&gt;)" kind="function">
      <name>RemoveEntity</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.EntityManager.RemoveEntity(rtm_ptr&lt;Entity&gt;)" kind="function">
      <name>RemoveEntity</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.EntityManager.GetEntityByIndex(int)" kind="function">
      <name>GetEntityByIndex</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.EntityManager.GetContainerByType()" kind="function">
      <name>GetContainerByType</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.EntityManager.AddSystem(SystemCallbacks)" kind="function">
      <name>AddSystem</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.EntityManager.UpdateEntities()" kind="function">
      <name>UpdateEntities</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.EntityManager.InitEntities()" kind="function">
      <name>InitEntities</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.EntitySystem.EntityRegistry" kind="class">
    <name>ShadowEngine::EntitySystem::EntityRegistry</name>
    <member refid="ShadowEngine.EntitySystem.EntityRegistry._registry" kind="variable">
      <name>_registry</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.EntityRegistry.EntityRegistryMap" kind="variable">
      <name>EntityRegistryMap</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.EntityRegistry.EntityRegistry()" kind="function">
      <name>EntityRegistry</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.EntityRegistry.RegisterEntity(std::string,Entity *)" kind="function">
      <name>RegisterEntity</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.EntityRegistry.ListPreRegisteredEntitys()" kind="function">
      <name>ListPreRegisteredEntitys</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.EntityRegistry.InstaciateEntity(std::string)" kind="function">
      <name>InstaciateEntity</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.EntityRegistry.PreRegisterDefaults()" kind="function">
      <name>PreRegisterDefaults</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.EntitySystem.EntitySystem" kind="class">
    <name>ShadowEngine::EntitySystem::EntitySystem</name>
    <member refid="ShadowEngine.EntitySystem.EntitySystem.activeScene" kind="variable">
      <name>activeScene</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.EntitySystem.EntitySystem()" kind="function">
      <name>EntitySystem</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.EntitySystem.GetName()" kind="function">
      <name>GetName</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.EntitySystem.Init()" kind="function">
      <name>Init</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.EntitySystem.Update()" kind="function">
      <name>Update</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.EntitySystem.Render()" kind="function">
      <name>Render</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.EntitySystem.LateRender()" kind="function">
      <name>LateRender</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.EntitySystem.LoadEmptyScene()" kind="function">
      <name>LoadEmptyScene</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.EntitySystem.LoadScene(Scene *)" kind="function">
      <name>LoadScene</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.EntitySystem.GetActiveScene()" kind="function">
      <name>GetActiveScene</name>
    </member>
  </compound>
  <compound refid="FirstPersonCamera" kind="class">
    <name>FirstPersonCamera</name>
    <member refid="FirstPersonCamera.a" kind="variable">
      <name>a</name>
    </member>
    <member refid="FirstPersonCamera.cam" kind="variable">
      <name>cam</name>
    </member>
    <member refid="FirstPersonCamera.forward" kind="variable">
      <name>forward</name>
    </member>
    <member refid="FirstPersonCamera.side" kind="variable">
      <name>side</name>
    </member>
    <member refid="FirstPersonCamera.SHObject_Base(FirstPersonCamera)" kind="function">
      <name>SHObject_Base</name>
    </member>
    <member refid="FirstPersonCamera.Init()" kind="function">
      <name>Init</name>
    </member>
    <member refid="FirstPersonCamera.Update()" kind="function">
      <name>Update</name>
    </member>
  </compound>
  <compound refid="FrameResources" kind="struct">
    <name>FrameResources</name>
    <member refid="FrameResources.IndexBuffer" kind="variable">
      <name>IndexBuffer</name>
    </member>
    <member refid="FrameResources.VertexBuffer" kind="variable">
      <name>VertexBuffer</name>
    </member>
    <member refid="FrameResources.IndexBufferSize" kind="variable">
      <name>IndexBufferSize</name>
    </member>
    <member refid="FrameResources.VertexBufferSize" kind="variable">
      <name>VertexBufferSize</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.Rendering.GraphicsContext" kind="class">
    <name>ShadowEngine::Rendering::GraphicsContext</name>
    <member refid="ShadowEngine.Rendering.GraphicsContext.Init()" kind="function">
      <name>Init</name>
    </member>
    <member refid="ShadowEngine.Rendering.GraphicsContext.SwapBuffers()" kind="function">
      <name>SwapBuffers</name>
    </member>
    <member refid="ShadowEngine.Rendering.GraphicsContext.Create(ShadowWindow *)" kind="function">
      <name>Create</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.Rendering.D3D12.HResultTester" kind="class">
    <name>ShadowEngine::Rendering::D3D12::HResultTester</name>
    <member refid="ShadowEngine.Rendering.D3D12.HResultTester.Message" kind="variable">
      <name>Message</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.HResultTester.File" kind="variable">
      <name>File</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.HResultTester.Line" kind="variable">
      <name>Line</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.HResultTester.HResultTester(const char *,const char *,int)" kind="function">
      <name>HResultTester</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.HResultTester.operator&lt;&lt;(HRESULT)" kind="function">
      <name>operator&lt;&lt;</name>
    </member>
  </compound>
  <compound refid="IEntityContainer" kind="class">
    <name>IEntityContainer</name>
    <member refid="IEntityContainer.CreateObject()" kind="function">
      <name>CreateObject</name>
    </member>
    <member refid="IEntityContainer.DestroyObject(void *)" kind="function">
      <name>DestroyObject</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.InputSystem.IInputBinding" kind="class">
    <name>ShadowEngine::InputSystem::IInputBinding</name>
    <member refid="ShadowEngine.InputSystem.IInputBinding.GetModifier(int)" kind="function">
      <name>GetModifier</name>
    </member>
    <member refid="ShadowEngine.InputSystem.IInputBinding.ModifierCount()" kind="function">
      <name>ModifierCount</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.DebugGui.ImGuiModule" kind="class">
    <name>ShadowEngine::DebugGui::ImGuiModule</name>
    <member refid="ShadowEngine.DebugGui.ImGuiModule.instance" kind="variable">
      <name>instance</name>
    </member>
    <member refid="ShadowEngine.DebugGui.ImGuiModule.guiCalls" kind="variable">
      <name>guiCalls</name>
    </member>
    <member refid="ShadowEngine.DebugGui.ImGuiModule.Init()" kind="function">
      <name>Init</name>
    </member>
    <member refid="ShadowEngine.DebugGui.ImGuiModule.Update()" kind="function">
      <name>Update</name>
    </member>
    <member refid="ShadowEngine.DebugGui.ImGuiModule.Render()" kind="function">
      <name>Render</name>
    </member>
    <member refid="ShadowEngine.DebugGui.ImGuiModule.LateRender()" kind="function">
      <name>LateRender</name>
    </member>
    <member refid="ShadowEngine.DebugGui.ImGuiModule.OnEvent(EventSystem::ShadowEvent &amp;)" kind="function">
      <name>OnEvent</name>
    </member>
    <member refid="ShadowEngine.DebugGui.ImGuiModule.GetName()" kind="function">
      <name>GetName</name>
    </member>
    <member refid="ShadowEngine.DebugGui.ImGuiModule.ImGuiModule()" kind="function">
      <name>ImGuiModule</name>
    </member>
    <member refid="ShadowEngine.DebugGui.ImGuiModule.~ImGuiModule()" kind="function">
      <name>~ImGuiModule</name>
    </member>
    <member refid="ShadowEngine.DebugGui.ImGuiModule.AddGUICall(IShadowImGui *)" kind="function">
      <name>AddGUICall</name>
    </member>
  </compound>
  <compound refid="ImGuiViewportDataDx12" kind="struct">
    <name>ImGuiViewportDataDx12</name>
    <member refid="ImGuiViewportDataDx12.SwapChain" kind="variable">
      <name>SwapChain</name>
    </member>
    <member refid="ImGuiViewportDataDx12.ImGuiViewportDataDx12()" kind="function">
      <name>ImGuiViewportDataDx12</name>
    </member>
    <member refid="ImGuiViewportDataDx12.~ImGuiViewportDataDx12()" kind="function">
      <name>~ImGuiViewportDataDx12</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.Rendering.IndexBuffer" kind="class">
    <name>ShadowEngine::Rendering::IndexBuffer</name>
    <member refid="ShadowEngine.Rendering.IndexBuffer.~IndexBuffer()" kind="function">
      <name>~IndexBuffer</name>
    </member>
    <member refid="ShadowEngine.Rendering.IndexBuffer.GetCount()" kind="function">
      <name>GetCount</name>
    </member>
    <member refid="ShadowEngine.Rendering.IndexBuffer.Create(uint32_t *,uint32_t)" kind="function">
      <name>Create</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.InputSystem.InputActionInspector" kind="class">
    <name>ShadowEngine::InputSystem::InputActionInspector</name>
  </compound>
  <compound refid="ShadowEngine.InputSystem.InputBinding" kind="class">
    <name>ShadowEngine::InputSystem::InputBinding</name>
    <member refid="ShadowEngine.InputSystem.InputBinding.modifiers_" kind="variable">
      <name>modifiers_</name>
    </member>
    <member refid="ShadowEngine.InputSystem.InputBinding.ProcessEvent(BindingContext&lt;T&gt; &amp;)" kind="function">
      <name>ProcessEvent</name>
    </member>
    <member refid="ShadowEngine.InputSystem.InputBinding.DefaultBehaviour(ModifierContext &amp;)" kind="function">
      <name>DefaultBehaviour</name>
    </member>
    <member refid="ShadowEngine.InputSystem.InputBinding.AddModifier(InputModifier *)" kind="function">
      <name>AddModifier</name>
    </member>
    <member refid="ShadowEngine.InputSystem.InputBinding.GetModifier(int)" kind="function">
      <name>GetModifier</name>
    </member>
    <member refid="ShadowEngine.InputSystem.InputBinding.ModifierCount()" kind="function">
      <name>ModifierCount</name>
    </member>
    <member refid="ShadowEngine.InputSystem.InputBinding.GetData()" kind="function">
      <name>GetData</name>
    </member>
    <member refid="ShadowEngine.InputSystem.InputBinding.ProcessContext(BindingContext&lt;T&gt; &amp;,ModifierContext &amp;)" kind="function">
      <name>ProcessContext</name>
    </member>
    <member refid="ShadowEngine.InputSystem.InputBinding.InputBinding()" kind="function">
      <name>InputBinding</name>
    </member>
    <member refid="ShadowEngine.InputSystem.InputBinding.~InputBinding()" kind="function">
      <name>~InputBinding</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.InputSystem.InputMapBinding" kind="class">
    <name>ShadowEngine::InputSystem::InputMapBinding</name>
    <member refid="ShadowEngine.InputSystem.InputMapBinding.InputMapBinding(const char *)" kind="function">
      <name>InputMapBinding</name>
    </member>
    <member refid="ShadowEngine.InputSystem.InputMapBinding.~InputMapBinding()" kind="function">
      <name>~InputMapBinding</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.InputSystem.InputModifier" kind="class">
    <name>ShadowEngine::InputSystem::InputModifier</name>
    <member refid="ShadowEngine.InputSystem.InputModifier.RequiresContinuous()" kind="function">
      <name>RequiresContinuous</name>
    </member>
    <member refid="ShadowEngine.InputSystem.InputModifier.InputModifier()" kind="function">
      <name>InputModifier</name>
    </member>
    <member refid="ShadowEngine.InputSystem.InputModifier.~InputModifier()" kind="function">
      <name>~InputModifier</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.Debug.Inspector" kind="class">
    <name>ShadowEngine::Debug::Inspector</name>
  </compound>
  <compound refid="ShadowEngine.Debug.InspectorSystem" kind="class">
    <name>ShadowEngine::Debug::InspectorSystem</name>
    <member refid="ShadowEngine.Debug.InspectorSystem.inspectors" kind="variable">
      <name>inspectors</name>
    </member>
    <member refid="ShadowEngine.Debug.InspectorSystem.AddInspector(std::string,Inspector *)" kind="function">
      <name>AddInspector</name>
    </member>
    <member refid="ShadowEngine.Debug.InspectorSystem.Draw(ShadowEngine::SHObject &amp;)" kind="function">
      <name>Draw</name>
    </member>
    <member refid="ShadowEngine.Debug.InspectorSystem.DrawSub(ShadowEngine::SHObject &amp;)" kind="function">
      <name>DrawSub</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.Rendering.IShaderProperty" kind="class">
    <name>ShadowEngine::Rendering::IShaderProperty</name>
    <member refid="ShadowEngine.Rendering.IShaderProperty.IShaderProperty(const std::string &amp;)" kind="function">
      <name>IShaderProperty</name>
    </member>
    <member refid="ShadowEngine.Rendering.IShaderProperty.IShaderProperty()" kind="function">
      <name>IShaderProperty</name>
    </member>
    <member refid="ShadowEngine.Rendering.IShaderProperty.Clone()" kind="function">
      <name>Clone</name>
    </member>
    <member refid="ShadowEngine.Rendering.IShaderProperty.GetName()" kind="function">
      <name>GetName</name>
    </member>
    <member refid="ShadowEngine.Rendering.IShaderProperty.GetPropertyTypeName()" kind="function">
      <name>GetPropertyTypeName</name>
    </member>
    <member refid="ShadowEngine.Rendering.IShaderProperty.GetPropertyTypeSize()" kind="function">
      <name>GetPropertyTypeSize</name>
    </member>
    <member refid="ShadowEngine.Rendering.IShaderProperty.GetPropertyData()" kind="function">
      <name>GetPropertyData</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.InputSystem.IShadowAction" kind="class">
    <name>ShadowEngine::InputSystem::IShadowAction</name>
    <member refid="ShadowEngine.InputSystem.IShadowAction.ProcessEvent(EventSystem::ShadowEvent &amp;)" kind="function">
      <name>ProcessEvent</name>
    </member>
    <member refid="ShadowEngine.InputSystem.IShadowAction.Update()" kind="function">
      <name>Update</name>
    </member>
    <member refid="ShadowEngine.InputSystem.IShadowAction.AddEventListener(ActionState)" kind="function">
      <name>AddEventListener</name>
    </member>
    <member refid="ShadowEngine.InputSystem.IShadowAction.RemoveEventListener()" kind="function">
      <name>RemoveEventListener</name>
    </member>
    <member refid="ShadowEngine.InputSystem.IShadowAction.SetActive(bool)" kind="function">
      <name>SetActive</name>
    </member>
    <member refid="ShadowEngine.InputSystem.IShadowAction.GetName()" kind="function">
      <name>GetName</name>
    </member>
    <member refid="ShadowEngine.InputSystem.IShadowAction.GetState()" kind="function">
      <name>GetState</name>
    </member>
    <member refid="ShadowEngine.InputSystem.IShadowAction.SetState(ActionState)" kind="function">
      <name>SetState</name>
    </member>
    <member refid="ShadowEngine.InputSystem.IShadowAction.GetPerformed()" kind="function">
      <name>GetPerformed</name>
    </member>
    <member refid="ShadowEngine.InputSystem.IShadowAction.IsContinuous()" kind="function">
      <name>IsContinuous</name>
    </member>
    <member refid="ShadowEngine.InputSystem.IShadowAction.SetContinuous(bool)" kind="function">
      <name>SetContinuous</name>
    </member>
    <member refid="ShadowEngine.InputSystem.IShadowAction.GetBinding()" kind="function">
      <name>GetBinding</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.EventSystem.IShadowEventListener" kind="class">
    <name>ShadowEngine::EventSystem::IShadowEventListener</name>
    <member refid="ShadowEngine.EventSystem.IShadowEventListener.OnEvent(ShadowEvent &amp;)" kind="function">
      <name>OnEvent</name>
    </member>
    <member refid="ShadowEngine.EventSystem.IShadowEventListener.IShadowEventListener()" kind="function">
      <name>IShadowEventListener</name>
    </member>
    <member refid="ShadowEngine.EventSystem.IShadowEventListener.~IShadowEventListener()" kind="function">
      <name>~IShadowEventListener</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.EventSystem.IShadowEventSource" kind="class">
    <name>ShadowEngine::EventSystem::IShadowEventSource</name>
    <member refid="ShadowEngine.EventSystem.IShadowEventSource.PollEvents()" kind="function">
      <name>PollEvents</name>
    </member>
    <member refid="ShadowEngine.EventSystem.IShadowEventSource.IShadowEventSource()" kind="function">
      <name>IShadowEventSource</name>
    </member>
    <member refid="ShadowEngine.EventSystem.IShadowEventSource.~IShadowEventSource()" kind="function">
      <name>~IShadowEventSource</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.DebugGui.IShadowImGui" kind="class">
    <name>ShadowEngine::DebugGui::IShadowImGui</name>
    <member refid="ShadowEngine.DebugGui.IShadowImGui.OnGui()" kind="function">
      <name>OnGui</name>
    </member>
  </compound>
  <compound refid="EntityContainer.iterator" kind="class">
    <name>EntityContainer::iterator</name>
    <member refid="EntityContainer.iterator.m_CurrentChunk" kind="variable">
      <name>m_CurrentChunk</name>
    </member>
    <member refid="EntityContainer.iterator.m_EndChunk" kind="variable">
      <name>m_EndChunk</name>
    </member>
    <member refid="EntityContainer.iterator.m_CurrentElement" kind="variable">
      <name>m_CurrentElement</name>
    </member>
    <member refid="EntityContainer.iterator.index" kind="variable">
      <name>index</name>
    </member>
    <member refid="EntityContainer.iterator.iterator(typename MemoryChunks::iterator,typename MemoryChunks::iterator)" kind="function">
      <name>iterator</name>
    </member>
    <member refid="EntityContainer.iterator.operator++()" kind="function">
      <name>operator++</name>
    </member>
    <member refid="EntityContainer.iterator.operator *()" kind="function">
      <name>operator *</name>
    </member>
    <member refid="EntityContainer.iterator.operator-&gt;()" kind="function">
      <name>operator-&gt;</name>
    </member>
    <member refid="EntityContainer.iterator.operator==(typename iterator &amp;)" kind="function">
      <name>operator==</name>
    </member>
    <member refid="EntityContainer.iterator.operator!=(typename iterator &amp;)" kind="function">
      <name>operator!=</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.InputSystem.KeyboardBinding" kind="class">
    <name>ShadowEngine::InputSystem::KeyboardBinding</name>
    <member refid="ShadowEngine.InputSystem.KeyboardBinding.SDLKey" kind="variable">
      <name>SDLKey</name>
    </member>
    <member refid="ShadowEngine.InputSystem.KeyboardBinding.GetKeycode()" kind="function">
      <name>GetKeycode</name>
    </member>
    <member refid="ShadowEngine.InputSystem.KeyboardBinding.ProcessEvent(BindingContext&lt;bool&gt; &amp;)" kind="function">
      <name>ProcessEvent</name>
    </member>
    <member refid="ShadowEngine.InputSystem.KeyboardBinding.DefaultBehaviour(ModifierContext &amp;)" kind="function">
      <name>DefaultBehaviour</name>
    </member>
    <member refid="ShadowEngine.InputSystem.KeyboardBinding.KeyboardBinding(const int)" kind="function">
      <name>KeyboardBinding</name>
    </member>
    <member refid="ShadowEngine.InputSystem.KeyboardBinding.~KeyboardBinding()" kind="function">
      <name>~KeyboardBinding</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.InputSystem.KeyboardBindingInspector" kind="class">
    <name>ShadowEngine::InputSystem::KeyboardBindingInspector</name>
    <member refid="ShadowEngine.InputSystem.KeyboardBindingInspector.SHObject_Base(KeyboardBindingInspector)" kind="function">
      <name>SHObject_Base</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.EventSystem.Events.KeyEvent" kind="class">
    <name>ShadowEngine::EventSystem::Events::KeyEvent</name>
    <member refid="ShadowEngine.EventSystem.Events.KeyEvent.m_KeyCode" kind="variable">
      <name>m_KeyCode</name>
    </member>
    <member refid="ShadowEngine.EventSystem.Events.KeyEvent.SHObject_Base(KeyEvent)" kind="function">
      <name>SHObject_Base</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.EventSystem.Events.KeyPressedEvent" kind="class">
    <name>ShadowEngine::EventSystem::Events::KeyPressedEvent</name>
    <member refid="ShadowEngine.EventSystem.Events.KeyPressedEvent.m_RepeatCount" kind="variable">
      <name>m_RepeatCount</name>
    </member>
    <member refid="ShadowEngine.EventSystem.Events.KeyPressedEvent.SHObject_Base(KeyPressedEvent)" kind="function">
      <name>SHObject_Base</name>
    </member>
    <member refid="ShadowEngine.EventSystem.Events.KeyPressedEvent.GetRepeatCount()" kind="function">
      <name>GetRepeatCount</name>
    </member>
    <member refid="ShadowEngine.EventSystem.Events.KeyPressedEvent.ToString()" kind="function">
      <name>ToString</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.EventSystem.Events.KeyReleasedEvent" kind="class">
    <name>ShadowEngine::EventSystem::Events::KeyReleasedEvent</name>
    <member refid="ShadowEngine.EventSystem.Events.KeyReleasedEvent.SHObject_Base(KeyReleasedEvent)" kind="function">
      <name>SHObject_Base</name>
    </member>
    <member refid="ShadowEngine.EventSystem.Events.KeyReleasedEvent.ToString()" kind="function">
      <name>ToString</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.EventSystem.Events.KeyTypedEvent" kind="class">
    <name>ShadowEngine::EventSystem::Events::KeyTypedEvent</name>
    <member refid="ShadowEngine.EventSystem.Events.KeyTypedEvent.keys" kind="variable">
      <name>keys</name>
    </member>
    <member refid="ShadowEngine.EventSystem.Events.KeyTypedEvent.SHObject_Base(KeyTypedEvent)" kind="function">
      <name>SHObject_Base</name>
    </member>
    <member refid="ShadowEngine.EventSystem.Events.KeyTypedEvent.ToString()" kind="function">
      <name>ToString</name>
    </member>
    <member refid="ShadowEngine.EventSystem.Events.KeyTypedEvent.GetText()" kind="function">
      <name>GetText</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.World.LevelMap" kind="class">
    <name>ShadowEngine::World::LevelMap</name>
    <member refid="ShadowEngine.World.LevelMap.id" kind="variable">
      <name>id</name>
    </member>
    <member refid="ShadowEngine.World.LevelMap.name" kind="variable">
      <name>name</name>
    </member>
    <member refid="ShadowEngine.World.LevelMap.prefix" kind="variable">
      <name>prefix</name>
    </member>
    <member refid="ShadowEngine.World.LevelMap.world" kind="variable">
      <name>world</name>
    </member>
    <member refid="ShadowEngine.World.LevelMap.chunks" kind="variable">
      <name>chunks</name>
    </member>
    <member refid="ShadowEngine.World.LevelMap.LevelMap(ShadowWorld *)" kind="function">
      <name>LevelMap</name>
    </member>
    <member refid="ShadowEngine.World.LevelMap.Update(const ShadowMath::Vector2int &amp;)" kind="function">
      <name>Update</name>
    </member>
    <member refid="ShadowEngine.World.LevelMap.UnloadChunk(const ShadowMath::Vector2int &amp;)" kind="function">
      <name>UnloadChunk</name>
    </member>
    <member refid="ShadowEngine.World.LevelMap.UnloadChunk(MapChunk *)" kind="function">
      <name>UnloadChunk</name>
    </member>
    <member refid="ShadowEngine.World.LevelMap.LoadChunk(const ShadowMath::Vector2int &amp;)" kind="function">
      <name>LoadChunk</name>
    </member>
    <member refid="ShadowEngine.World.LevelMap.GetLoadedChunk(const ShadowMath::Vector2int &amp;)" kind="function">
      <name>GetLoadedChunk</name>
    </member>
    <member refid="ShadowEngine.World.LevelMap.GenerateMapName(const ShadowMath::Vector2int &amp;)" kind="function">
      <name>GenerateMapName</name>
    </member>
  </compound>
  <compound refid="Light" kind="class">
    <name>Light</name>
    <member refid="Light.SHObject_Base(Light)" kind="function">
      <name>SHObject_Base</name>
    </member>
    <member refid="Light.Render()" kind="function">
      <name>Render</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.Log" kind="class">
    <name>ShadowEngine::Log</name>
    <member refid="ShadowEngine.Log.s_CoreLogger" kind="variable">
      <name>s_CoreLogger</name>
    </member>
    <member refid="ShadowEngine.Log.s_ClientLogger" kind="variable">
      <name>s_ClientLogger</name>
    </member>
    <member refid="ShadowEngine.Log.Update()" kind="function">
      <name>Update</name>
    </member>
    <member refid="ShadowEngine.Log.LateRender()" kind="function">
      <name>LateRender</name>
    </member>
    <member refid="ShadowEngine.Log.Render()" kind="function">
      <name>Render</name>
    </member>
    <member refid="ShadowEngine.Log.GetName()" kind="function">
      <name>GetName</name>
    </member>
    <member refid="ShadowEngine.Log.GetCoreLogger()" kind="function">
      <name>GetCoreLogger</name>
    </member>
    <member refid="ShadowEngine.Log.GetClientLogger()" kind="function">
      <name>GetClientLogger</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.World.MapChunk" kind="class">
    <name>ShadowEngine::World::MapChunk</name>
    <member refid="ShadowEngine.World.MapChunk.pos" kind="variable">
      <name>pos</name>
    </member>
    <member refid="ShadowEngine.World.MapChunk.height" kind="variable">
      <name>height</name>
    </member>
    <member refid="ShadowEngine.World.MapChunk.width" kind="variable">
      <name>width</name>
    </member>
    <member refid="ShadowEngine.World.MapChunk.tileHeight" kind="variable">
      <name>tileHeight</name>
    </member>
    <member refid="ShadowEngine.World.MapChunk.tileWidth" kind="variable">
      <name>tileWidth</name>
    </member>
    <member refid="ShadowEngine.World.MapChunk.layers" kind="variable">
      <name>layers</name>
    </member>
    <member refid="ShadowEngine.World.MapChunk.entities" kind="variable">
      <name>entities</name>
    </member>
    <member refid="ShadowEngine.World.MapChunk.GetLayer(int)" kind="function">
      <name>GetLayer</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.ShadowEngine.Assets.Material" kind="class">
    <name>ShadowEngine::ShadowEngine::Assets::Material</name>
    <member refid="ShadowEngine.ShadowEngine.Assets.Material.properties" kind="variable">
      <name>properties</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.Assets.Material.shaderData" kind="variable">
      <name>shaderData</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.Assets.Material.dirty" kind="variable">
      <name>dirty</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.Assets.Material.GetProperties()" kind="function">
      <name>GetProperties</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.Assets.Material.GetShader()" kind="function">
      <name>GetShader</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.Assets.Material.SetProperty(const std::string &amp;,const T &amp;)" kind="function">
      <name>SetProperty</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.Assets.Material.GetBuffer()" kind="function">
      <name>GetBuffer</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.Assets.Material.UpdateBufferIfDirty()" kind="function">
      <name>UpdateBufferIfDirty</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.Assets.Material.Material(const Ref&lt;Rendering::Shader&gt; &amp;)" kind="function">
      <name>Material</name>
    </member>
  </compound>
  <compound refid="EntityContainer.MemoryChunk" kind="class">
    <name>EntityContainer::MemoryChunk</name>
    <member refid="EntityContainer.MemoryChunk.chunkStart" kind="variable">
      <name>chunkStart</name>
    </member>
    <member refid="EntityContainer.MemoryChunk.chunkEnd" kind="variable">
      <name>chunkEnd</name>
    </member>
    <member refid="EntityContainer.MemoryChunk.count" kind="variable">
      <name>count</name>
    </member>
    <member refid="EntityContainer.MemoryChunk.metadata" kind="variable">
      <name>metadata</name>
    </member>
    <member refid="EntityContainer.MemoryChunk.nextFree" kind="variable">
      <name>nextFree</name>
    </member>
    <member refid="EntityContainer.MemoryChunk.FreeFlag" kind="variable">
      <name>FreeFlag</name>
    </member>
    <member refid="EntityContainer.MemoryChunk.MemoryChunk()" kind="function">
      <name>MemoryChunk</name>
    </member>
    <member refid="EntityContainer.MemoryChunk.allocate()" kind="function">
      <name>allocate</name>
    </member>
    <member refid="EntityContainer.MemoryChunk.free(void *)" kind="function">
      <name>free</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.Assets.Mesh" kind="class">
    <name>ShadowEngine::Assets::Mesh</name>
    <member refid="ShadowEngine.Assets.Mesh.vertex_buffer" kind="variable">
      <name>vertex_buffer</name>
    </member>
    <member refid="ShadowEngine.Assets.Mesh.Mesh(void *,unsigned int,unsigned int,uint32_t *,unsigned int)" kind="function">
      <name>Mesh</name>
    </member>
    <member refid="ShadowEngine.Assets.Mesh.Mesh::Mesh(void *,unsigned,uint32_t *,unsigned)" kind="function">
      <name>Mesh::Mesh</name>
    </member>
    <member refid="ShadowEngine.Assets.Mesh.LoadModel_obj(const std::string &amp;)" kind="function">
      <name>LoadModel_obj</name>
    </member>
  </compound>
  <compound refid="MeshRenderer" kind="class">
    <name>MeshRenderer</name>
    <member refid="MeshRenderer.mesh" kind="variable">
      <name>mesh</name>
    </member>
    <member refid="MeshRenderer.mat" kind="variable">
      <name>mat</name>
    </member>
    <member refid="MeshRenderer.node" kind="variable">
      <name>node</name>
    </member>
    <member refid="MeshRenderer.SHObject_Base(MeshRenderer)" kind="function">
      <name>SHObject_Base</name>
    </member>
    <member refid="MeshRenderer.TransformChanged(bool)" kind="function">
      <name>TransformChanged</name>
    </member>
    <member refid="MeshRenderer.UpdateRenderNode()" kind="function">
      <name>UpdateRenderNode</name>
    </member>
    <member refid="MeshRenderer.Init()" kind="function">
      <name>Init</name>
    </member>
    <member refid="MeshRenderer.GetFlags()" kind="function">
      <name>GetFlags</name>
    </member>
    <member refid="MeshRenderer.SetMesh(ShadowEngine::Ref&lt;ShadowEngine::Assets::Mesh&gt;)" kind="function">
      <name>SetMesh</name>
    </member>
    <member refid="MeshRenderer.GetMesh()" kind="function">
      <name>GetMesh</name>
    </member>
    <member refid="MeshRenderer.SetMaterial(ShadowEngine::Ref&lt;ShadowEngine::Assets::Material&gt;)" kind="function">
      <name>SetMaterial</name>
    </member>
    <member refid="MeshRenderer.SetMaterial()" kind="function">
      <name>SetMaterial</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.Rendering.ModelData" kind="struct">
    <name>ShadowEngine::Rendering::ModelData</name>
    <member refid="ShadowEngine.Rendering.ModelData.modelToWorld" kind="variable">
      <name>modelToWorld</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.InputSystem.ModifierContext" kind="class">
    <name>ShadowEngine::InputSystem::ModifierContext</name>
    <member refid="ShadowEngine.InputSystem.ModifierContext.event_" kind="variable">
      <name>event_</name>
    </member>
    <member refid="ShadowEngine.InputSystem.ModifierContext.continuous_" kind="variable">
      <name>continuous_</name>
    </member>
    <member refid="ShadowEngine.InputSystem.ModifierContext.bindingState_" kind="variable">
      <name>bindingState_</name>
    </member>
    <member refid="ShadowEngine.InputSystem.ModifierContext.outState_" kind="variable">
      <name>outState_</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.InputSystem.ModifierHold" kind="class">
    <name>ShadowEngine::InputSystem::ModifierHold</name>
    <member refid="ShadowEngine.InputSystem.ModifierHold.deltaTime" kind="variable">
      <name>deltaTime</name>
    </member>
    <member refid="ShadowEngine.InputSystem.ModifierHold.SHObject_Base(ModifierHold)" kind="function">
      <name>SHObject_Base</name>
    </member>
    <member refid="ShadowEngine.InputSystem.ModifierHold.GetWaitTime()" kind="function">
      <name>GetWaitTime</name>
    </member>
    <member refid="ShadowEngine.InputSystem.ModifierHold.GetDeltaTime()" kind="function">
      <name>GetDeltaTime</name>
    </member>
    <member refid="ShadowEngine.InputSystem.ModifierHold.ProcessInput(ModifierContext &amp;)" kind="function">
      <name>ProcessInput</name>
    </member>
    <member refid="ShadowEngine.InputSystem.ModifierHold.ModifierHold(const double)" kind="function">
      <name>ModifierHold</name>
    </member>
    <member refid="ShadowEngine.InputSystem.ModifierHold.~ModifierHold()" kind="function">
      <name>~ModifierHold</name>
    </member>
    <member refid="ShadowEngine.InputSystem.ModifierHold.RequiresContinuous()" kind="function">
      <name>RequiresContinuous</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.InputSystem.ModifierHoldInspector" kind="class">
    <name>ShadowEngine::InputSystem::ModifierHoldInspector</name>
    <member refid="ShadowEngine.InputSystem.ModifierHoldInspector.Draw(SHObject &amp;)" kind="function">
      <name>Draw</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.InputSystem.ModifierRepeat" kind="class">
    <name>ShadowEngine::InputSystem::ModifierRepeat</name>
    <member refid="ShadowEngine.InputSystem.ModifierRepeat.ProcessInput(ModifierContext &amp;)" kind="function">
      <name>ProcessInput</name>
    </member>
    <member refid="ShadowEngine.InputSystem.ModifierRepeat.ModifierRepeat(int)" kind="function">
      <name>ModifierRepeat</name>
    </member>
    <member refid="ShadowEngine.InputSystem.ModifierRepeat.~ModifierRepeat()" kind="function">
      <name>~ModifierRepeat</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.EventSystem.Events.MouseButtonEvent" kind="class">
    <name>ShadowEngine::EventSystem::Events::MouseButtonEvent</name>
    <member refid="ShadowEngine.EventSystem.Events.MouseButtonEvent.m_Button" kind="variable">
      <name>m_Button</name>
    </member>
    <member refid="ShadowEngine.EventSystem.Events.MouseButtonEvent.SHObject_Base(MouseButtonEvent)" kind="function">
      <name>SHObject_Base</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.EventSystem.Events.MouseButtonPressedEvent" kind="class">
    <name>ShadowEngine::EventSystem::Events::MouseButtonPressedEvent</name>
    <member refid="ShadowEngine.EventSystem.Events.MouseButtonPressedEvent.SHObject_Base(MouseButtonPressedEvent)" kind="function">
      <name>SHObject_Base</name>
    </member>
    <member refid="ShadowEngine.EventSystem.Events.MouseButtonPressedEvent.ToString()" kind="function">
      <name>ToString</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.EventSystem.Events.MouseButtonReleasedEvent" kind="class">
    <name>ShadowEngine::EventSystem::Events::MouseButtonReleasedEvent</name>
    <member refid="ShadowEngine.EventSystem.Events.MouseButtonReleasedEvent.SHObject_Base(MouseButtonReleasedEvent)" kind="function">
      <name>SHObject_Base</name>
    </member>
    <member refid="ShadowEngine.EventSystem.Events.MouseButtonReleasedEvent.ToString()" kind="function">
      <name>ToString</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.EventSystem.Events.MouseMovedEvent" kind="class">
    <name>ShadowEngine::EventSystem::Events::MouseMovedEvent</name>
    <member refid="ShadowEngine.EventSystem.Events.MouseMovedEvent.m_MouseX" kind="variable">
      <name>m_MouseX</name>
    </member>
    <member refid="ShadowEngine.EventSystem.Events.MouseMovedEvent.m_MouseY" kind="variable">
      <name>m_MouseY</name>
    </member>
    <member refid="ShadowEngine.EventSystem.Events.MouseMovedEvent.SHObject_Base(MouseMovedEvent)" kind="function">
      <name>SHObject_Base</name>
    </member>
    <member refid="ShadowEngine.EventSystem.Events.MouseMovedEvent.GetX()" kind="function">
      <name>GetX</name>
    </member>
    <member refid="ShadowEngine.EventSystem.Events.MouseMovedEvent.GetY()" kind="function">
      <name>GetY</name>
    </member>
    <member refid="ShadowEngine.EventSystem.Events.MouseMovedEvent.ToString()" kind="function">
      <name>ToString</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.EventSystem.Events.MouseScrolledEvent" kind="class">
    <name>ShadowEngine::EventSystem::Events::MouseScrolledEvent</name>
    <member refid="ShadowEngine.EventSystem.Events.MouseScrolledEvent.m_XOffset" kind="variable">
      <name>m_XOffset</name>
    </member>
    <member refid="ShadowEngine.EventSystem.Events.MouseScrolledEvent.m_YOffset" kind="variable">
      <name>m_YOffset</name>
    </member>
    <member refid="ShadowEngine.EventSystem.Events.MouseScrolledEvent.SHObject_Base(MouseScrolledEvent)" kind="function">
      <name>SHObject_Base</name>
    </member>
    <member refid="ShadowEngine.EventSystem.Events.MouseScrolledEvent.GetXOffset()" kind="function">
      <name>GetXOffset</name>
    </member>
    <member refid="ShadowEngine.EventSystem.Events.MouseScrolledEvent.GetYOffset()" kind="function">
      <name>GetYOffset</name>
    </member>
    <member refid="ShadowEngine.EventSystem.Events.MouseScrolledEvent.ToString()" kind="function">
      <name>ToString</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.Rendering.OrthographicCamera" kind="class">
    <name>ShadowEngine::Rendering::OrthographicCamera</name>
    <member refid="ShadowEngine.Rendering.OrthographicCamera.m_ProjectionMatrix" kind="variable">
      <name>m_ProjectionMatrix</name>
    </member>
    <member refid="ShadowEngine.Rendering.OrthographicCamera.m_ViewMatrix" kind="variable">
      <name>m_ViewMatrix</name>
    </member>
    <member refid="ShadowEngine.Rendering.OrthographicCamera.m_ViewProjectionMatrix" kind="variable">
      <name>m_ViewProjectionMatrix</name>
    </member>
    <member refid="ShadowEngine.Rendering.OrthographicCamera.m_Position" kind="variable">
      <name>m_Position</name>
    </member>
    <member refid="ShadowEngine.Rendering.OrthographicCamera.m_Rotation" kind="variable">
      <name>m_Rotation</name>
    </member>
    <member refid="ShadowEngine.Rendering.OrthographicCamera.OrthographicCamera(float,float,float,float)" kind="function">
      <name>OrthographicCamera</name>
    </member>
    <member refid="ShadowEngine.Rendering.OrthographicCamera.GetPosition()" kind="function">
      <name>GetPosition</name>
    </member>
    <member refid="ShadowEngine.Rendering.OrthographicCamera.SetPosition(const glm::vec3 &amp;)" kind="function">
      <name>SetPosition</name>
    </member>
    <member refid="ShadowEngine.Rendering.OrthographicCamera.GetRotation()" kind="function">
      <name>GetRotation</name>
    </member>
    <member refid="ShadowEngine.Rendering.OrthographicCamera.SetRotation(float)" kind="function">
      <name>SetRotation</name>
    </member>
    <member refid="ShadowEngine.Rendering.OrthographicCamera.GetProjectionMatrix()" kind="function">
      <name>GetProjectionMatrix</name>
    </member>
    <member refid="ShadowEngine.Rendering.OrthographicCamera.GetViewMatrix()" kind="function">
      <name>GetViewMatrix</name>
    </member>
    <member refid="ShadowEngine.Rendering.OrthographicCamera.GetViewProjectionMatrix()" kind="function">
      <name>GetViewProjectionMatrix</name>
    </member>
    <member refid="ShadowEngine.Rendering.OrthographicCamera.RecalculateViewMatrix()" kind="function">
      <name>RecalculateViewMatrix</name>
    </member>
  </compound>
  <compound refid="Player" kind="class">
    <name>Player</name>
    <member refid="Player.id" kind="variable">
      <name>id</name>
    </member>
    <member refid="Player.SHObject_Base(Player)" kind="function">
      <name>SHObject_Base</name>
    </member>
    <member refid="Player.Render()" kind="function">
      <name>Render</name>
    </member>
    <member refid="Player.Init()" kind="function">
      <name>Init</name>
    </member>
    <member refid="Player.Start()" kind="function">
      <name>Start</name>
    </member>
    <member refid="Player.Update()" kind="function">
      <name>Update</name>
    </member>
    <member refid="Player.LateUpdate()" kind="function">
      <name>LateUpdate</name>
    </member>
    <member refid="Player.LateRender()" kind="function">
      <name>LateRender</name>
    </member>
    <member refid="Player.GetFlags()" kind="function">
      <name>GetFlags</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.Rendering.Renderer" kind="class">
    <name>ShadowEngine::Rendering::Renderer</name>
    <member refid="ShadowEngine.Rendering.Renderer.scene" kind="variable">
      <name>scene</name>
    </member>
    <member refid="ShadowEngine.Rendering.Renderer.instance" kind="variable">
      <name>instance</name>
    </member>
    <member refid="ShadowEngine.Rendering.Renderer.Renderer()" kind="function">
      <name>Renderer</name>
    </member>
    <member refid="ShadowEngine.Rendering.Renderer.Init()" kind="function">
      <name>Init</name>
    </member>
    <member refid="ShadowEngine.Rendering.Renderer.Update()" kind="function">
      <name>Update</name>
    </member>
    <member refid="ShadowEngine.Rendering.Renderer.Render()" kind="function">
      <name>Render</name>
    </member>
    <member refid="ShadowEngine.Rendering.Renderer.LateRender()" kind="function">
      <name>LateRender</name>
    </member>
    <member refid="ShadowEngine.Rendering.Renderer.GetName()" kind="function">
      <name>GetName</name>
    </member>
    <member refid="ShadowEngine.Rendering.Renderer.BeginScene(Camera *)" kind="function">
      <name>BeginScene</name>
    </member>
    <member refid="ShadowEngine.Rendering.Renderer.EndScene()" kind="function">
      <name>EndScene</name>
    </member>
    <member refid="ShadowEngine.Rendering.Renderer.RenderNodes()" kind="function">
      <name>RenderNodes</name>
    </member>
    <member refid="ShadowEngine.Rendering.Renderer.Submit(const Ref&lt;Assets::Mesh&gt;,const Ref&lt;Assets::Material&gt;,const glm::mat4 &amp;)" kind="function">
      <name>Submit</name>
    </member>
    <member refid="ShadowEngine.Rendering.Renderer.AddRenderNode(const Ref&lt;Assets::Mesh&gt;,const Ref&lt;Assets::Material&gt;,const glm::mat4 &amp;)" kind="function">
      <name>AddRenderNode</name>
    </member>
    <member refid="ShadowEngine.Rendering.Renderer.GetAPI()" kind="function">
      <name>GetAPI</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.Rendering.RendererAPI" kind="class">
    <name>ShadowEngine::Rendering::RendererAPI</name>
    <member refid="ShadowEngine.Rendering.RendererAPI.API" kind="enum">
      <name>API</name>
    </member>
    <member refid="_shadow_engine._rendering._renderer_a_p_i_1a1502b3070bb227671710dee540ace24ca6adf97f83acf6453d4a6a4b1070f3754" kind="enumvalue">
      <name>None</name>
    </member>
    <member refid="_shadow_engine._rendering._renderer_a_p_i_1a1502b3070bb227671710dee540ace24ca760716b590ee7c0adc25f434f577d8be" kind="enumvalue">
      <name>OpenGL</name>
    </member>
    <member refid="_shadow_engine._rendering._renderer_a_p_i_1a1502b3070bb227671710dee540ace24cafac777d230cd7175697748a8c5260df6" kind="enumvalue">
      <name>D3D12</name>
    </member>
    <member refid="ShadowEngine.Rendering.RendererAPI.s_API" kind="variable">
      <name>s_API</name>
    </member>
    <member refid="ShadowEngine.Rendering.RendererAPI.Init(ShadowEngine::Ref&lt;GraphicsContext&gt;)" kind="function">
      <name>Init</name>
    </member>
    <member refid="ShadowEngine.Rendering.RendererAPI.SetClearColor(const glm::vec4 &amp;)" kind="function">
      <name>SetClearColor</name>
    </member>
    <member refid="ShadowEngine.Rendering.RendererAPI.Clear()" kind="function">
      <name>Clear</name>
    </member>
    <member refid="ShadowEngine.Rendering.RendererAPI.Draw(const Ref&lt;Assets::Mesh&gt;,const Ref&lt;Assets::Material&gt;,const glm::mat4 &amp;)" kind="function">
      <name>Draw</name>
    </member>
    <member refid="ShadowEngine.Rendering.RendererAPI.Draw(const std::shared_ptr&lt;Assets::Mesh&gt; &amp;,const std::shared_ptr&lt;Assets::Material&gt; &amp;,const ConstantBuffer &amp;)" kind="function">
      <name>Draw</name>
    </member>
    <member refid="ShadowEngine.Rendering.RendererAPI.StartFrame(Ref&lt;ConstantBuffer&gt;)" kind="function">
      <name>StartFrame</name>
    </member>
    <member refid="ShadowEngine.Rendering.RendererAPI.EndFrame()" kind="function">
      <name>EndFrame</name>
    </member>
    <member refid="ShadowEngine.Rendering.RendererAPI.GetAPI()" kind="function">
      <name>GetAPI</name>
    </member>
    <member refid="ShadowEngine.Rendering.RendererAPI.RendererAPI::MakeRendererAPI()" kind="function">
      <name>RendererAPI::MakeRendererAPI</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.Rendering.RenderNode" kind="class">
    <name>ShadowEngine::Rendering::RenderNode</name>
    <member refid="ShadowEngine.Rendering.RenderNode.modelDataCB" kind="variable">
      <name>modelDataCB</name>
    </member>
    <member refid="ShadowEngine.Rendering.RenderNode.mesh" kind="variable">
      <name>mesh</name>
    </member>
    <member refid="ShadowEngine.Rendering.RenderNode.mat" kind="variable">
      <name>mat</name>
    </member>
    <member refid="ShadowEngine.Rendering.RenderNode.RenderNode(Ref&lt;Assets::Mesh&gt;,Ref&lt;Assets::Material&gt;)" kind="function">
      <name>RenderNode</name>
    </member>
    <member refid="ShadowEngine.Rendering.RenderNode.GetMesh()" kind="function">
      <name>GetMesh</name>
    </member>
    <member refid="ShadowEngine.Rendering.RenderNode.GetMaterial()" kind="function">
      <name>GetMaterial</name>
    </member>
    <member refid="ShadowEngine.Rendering.RenderNode.GetCB()" kind="function">
      <name>GetCB</name>
    </member>
    <member refid="ShadowEngine.Rendering.RenderNode.UpdateTransform(glm::mat4x4)" kind="function">
      <name>UpdateTransform</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.Rendering.RenderScene" kind="class">
    <name>ShadowEngine::Rendering::RenderScene</name>
    <member refid="ShadowEngine.Rendering.RenderScene.RenderNodeList" kind="typedef">
      <name>RenderNodeList</name>
    </member>
    <member refid="ShadowEngine.Rendering.RenderScene.iterator" kind="typedef">
      <name>iterator</name>
    </member>
    <member refid="ShadowEngine.Rendering.RenderScene.const_iterator" kind="typedef">
      <name>const_iterator</name>
    </member>
    <member refid="ShadowEngine.Rendering.RenderScene.nodes" kind="variable">
      <name>nodes</name>
    </member>
    <member refid="ShadowEngine.Rendering.RenderScene.worldData" kind="variable">
      <name>worldData</name>
    </member>
    <member refid="ShadowEngine.Rendering.RenderScene.RenderScene()" kind="function">
      <name>RenderScene</name>
    </member>
    <member refid="ShadowEngine.Rendering.RenderScene.GetNodeCount()" kind="function">
      <name>GetNodeCount</name>
    </member>
    <member refid="ShadowEngine.Rendering.RenderScene.AddRenderNode(Ref&lt;Assets::Mesh&gt;,Ref&lt;Assets::Material&gt;)" kind="function">
      <name>AddRenderNode</name>
    </member>
    <member refid="ShadowEngine.Rendering.RenderScene.GetWorldData()" kind="function">
      <name>GetWorldData</name>
    </member>
    <member refid="ShadowEngine.Rendering.RenderScene.begin()" kind="function">
      <name>begin</name>
    </member>
    <member refid="ShadowEngine.Rendering.RenderScene.end()" kind="function">
      <name>end</name>
    </member>
    <member refid="ShadowEngine.Rendering.RenderScene.begin()" kind="function">
      <name>begin</name>
    </member>
    <member refid="ShadowEngine.Rendering.RenderScene.end()" kind="function">
      <name>end</name>
    </member>
    <member refid="ShadowEngine.Rendering.RenderScene.cbegin()" kind="function">
      <name>cbegin</name>
    </member>
    <member refid="ShadowEngine.Rendering.RenderScene.cend()" kind="function">
      <name>cend</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.rtm_ptr" kind="class">
    <name>ShadowEngine::ShadowEngine::ShadowEngine::EntitySystem::rtm_ptr</name>
    <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.rtm_ptr.m_ptr" kind="variable">
      <name>m_ptr</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.rtm_ptr.m_uid" kind="variable">
      <name>m_uid</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.rtm_ptr.rtm_ptr(Type *)" kind="function">
      <name>rtm_ptr</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.rtm_ptr.rtm_ptr()" kind="function">
      <name>rtm_ptr</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.rtm_ptr.operator-&gt;()" kind="function">
      <name>operator-&gt;</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.rtm_ptr.operator bool()" kind="function">
      <name>operator bool</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.rtm_ptr.operator rtm_ptr&lt;T&gt;()" kind="function">
      <name>operator rtm_ptr&lt;T&gt;</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.EntitySystem.Scene" kind="class">
    <name>ShadowEngine::EntitySystem::Scene</name>
    <member refid="ShadowEngine.EntitySystem.Scene.mainCamera" kind="variable">
      <name>mainCamera</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.Scene.Scene()" kind="function">
      <name>Scene</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.Scene.~Scene()" kind="function">
      <name>~Scene</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.Scene.Init()" kind="function">
      <name>Init</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.Scene.Start()" kind="function">
      <name>Start</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.Scene.Update()" kind="function">
      <name>Update</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.Scene.LateUpdate()" kind="function">
      <name>LateUpdate</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.Scene.Render()" kind="function">
      <name>Render</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.Scene.LateRender()" kind="function">
      <name>LateRender</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.Scene.AddNewInstance()" kind="function">
      <name>AddNewInstance</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.Scene.AddEntity(ARGS &amp;&amp;...)" kind="function">
      <name>AddEntity</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.Scene.DestroyEntity(rtm_ptr&lt;T&gt; &amp;)" kind="function">
      <name>DestroyEntity</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.Scene.DestroyScene()" kind="function">
      <name>DestroyScene</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.EntitySystem.SceneEntity" kind="class">
    <name>ShadowEngine::EntitySystem::SceneEntity</name>
    <member refid="ShadowEngine.EntitySystem.SceneEntity.transform" kind="variable">
      <name>transform</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.SceneEntity.SHObject_Base(SceneEntity)" kind="function">
      <name>SHObject_Base</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.SceneEntity.Entity_Base_NoCtor(SceneEntity,Entity)" kind="function">
      <name>Entity_Base_NoCtor</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.SceneEntity.SceneEntity()" kind="function">
      <name>SceneEntity</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.SceneEntity.SceneEntity(EntitySystem::Scene *)" kind="function">
      <name>SceneEntity</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.SceneEntity.TransformChanged(bool)" kind="function">
      <name>TransformChanged</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.SceneEntity.GetTransform()" kind="function">
      <name>GetTransform</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.SceneEntity.SetParent(rtm_ptr&lt;Entity&gt;)" kind="function">
      <name>SetParent</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.SDLPlatform.SDLEventSource" kind="class">
    <name>ShadowEngine::SDLPlatform::SDLEventSource</name>
    <member refid="ShadowEngine.SDLPlatform.SDLEventSource.PollEvents()" kind="function">
      <name>PollEvents</name>
    </member>
    <member refid="ShadowEngine.SDLPlatform.SDLEventSource.SDLEventSource()" kind="function">
      <name>SDLEventSource</name>
    </member>
    <member refid="ShadowEngine.SDLPlatform.SDLEventSource.~SDLEventSource()" kind="function">
      <name>~SDLEventSource</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.SDLPlatform.SDLModule" kind="class">
    <name>ShadowEngine::SDLPlatform::SDLModule</name>
    <member refid="ShadowEngine.SDLPlatform.SDLModule.window" kind="variable">
      <name>window</name>
    </member>
    <member refid="ShadowEngine.SDLPlatform.SDLModule.glContext" kind="variable">
      <name>glContext</name>
    </member>
    <member refid="ShadowEngine.SDLPlatform.SDLModule.instance" kind="variable">
      <name>instance</name>
    </member>
    <member refid="ShadowEngine.SDLPlatform.SDLModule.GetInstance()" kind="function">
      <name>GetInstance</name>
    </member>
    <member refid="ShadowEngine.SDLPlatform.SDLModule.Init()" kind="function">
      <name>Init</name>
    </member>
    <member refid="ShadowEngine.SDLPlatform.SDLModule.Update()" kind="function">
      <name>Update</name>
    </member>
    <member refid="ShadowEngine.SDLPlatform.SDLModule.Render()" kind="function">
      <name>Render</name>
    </member>
    <member refid="ShadowEngine.SDLPlatform.SDLModule.LateRender()" kind="function">
      <name>LateRender</name>
    </member>
    <member refid="ShadowEngine.SDLPlatform.SDLModule.GetName()" kind="function">
      <name>GetName</name>
    </member>
    <member refid="ShadowEngine.SDLPlatform.SDLModule.GetGlContext()" kind="function">
      <name>GetGlContext</name>
    </member>
    <member refid="ShadowEngine.SDLPlatform.SDLModule.SDLModule()" kind="function">
      <name>SDLModule</name>
    </member>
    <member refid="ShadowEngine.SDLPlatform.SDLModule.~SDLModule()" kind="function">
      <name>~SDLModule</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.Rendering.Shader" kind="class">
    <name>ShadowEngine::Rendering::Shader</name>
    <member refid="ShadowEngine.Rendering.Shader.properties" kind="variable">
      <name>properties</name>
    </member>
    <member refid="ShadowEngine.Rendering.Shader.~Shader()" kind="function">
      <name>~Shader</name>
    </member>
    <member refid="ShadowEngine.Rendering.Shader.GetPropertiesCopy()" kind="function">
      <name>GetPropertiesCopy</name>
    </member>
    <member refid="ShadowEngine.Rendering.Shader.Bind()" kind="function">
      <name>Bind</name>
    </member>
    <member refid="ShadowEngine.Rendering.Shader.Unbind()" kind="function">
      <name>Unbind</name>
    </member>
    <member refid="ShadowEngine.Rendering.Shader.Create(const std::string &amp;,const std::string &amp;)" kind="function">
      <name>Create</name>
    </member>
    <member refid="ShadowEngine.Rendering.Shader.CreateFromCompiled(const std::string &amp;,const std::string &amp;)" kind="function">
      <name>CreateFromCompiled</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.Rendering.ShaderProperty" kind="class">
    <name>ShadowEngine::Rendering::ShaderProperty</name>
    <member refid="ShadowEngine.Rendering.ShaderProperty.SHObject_Base(ShaderProperty&lt;T&gt;)" kind="function">
      <name>SHObject_Base</name>
    </member>
    <member refid="ShadowEngine.Rendering.ShaderProperty.ShaderProperty(const std::string &amp;)" kind="function">
      <name>ShaderProperty</name>
    </member>
    <member refid="ShadowEngine.Rendering.ShaderProperty.ShaderProperty(const ShaderProperty &amp;)" kind="function">
      <name>ShaderProperty</name>
    </member>
    <member refid="ShadowEngine.Rendering.ShaderProperty.SetValue(const T &amp;)" kind="function">
      <name>SetValue</name>
    </member>
    <member refid="ShadowEngine.Rendering.ShaderProperty.Clone()" kind="function">
      <name>Clone</name>
    </member>
    <member refid="ShadowEngine.Rendering.ShaderProperty.GetPropertyTypeName()" kind="function">
      <name>GetPropertyTypeName</name>
    </member>
    <member refid="ShadowEngine.Rendering.ShaderProperty.GetPropertyTypeSize()" kind="function">
      <name>GetPropertyTypeSize</name>
    </member>
    <member refid="ShadowEngine.Rendering.ShaderProperty.GetPropertyData()" kind="function">
      <name>GetPropertyData</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.Rendering.ShaderPropertySheet" kind="class">
    <name>ShadowEngine::Rendering::ShaderPropertySheet</name>
    <member refid="ShadowEngine.Rendering.ShaderPropertySheet.shaderProperties" kind="variable">
      <name>shaderProperties</name>
    </member>
    <member refid="ShadowEngine.Rendering.ShaderPropertySheet.size" kind="variable">
      <name>size</name>
    </member>
    <member refid="ShadowEngine.Rendering.ShaderPropertySheet.data" kind="variable">
      <name>data</name>
    </member>
    <member refid="ShadowEngine.Rendering.ShaderPropertySheet.ShaderPropertySheet(const ShaderPropertySheet &amp;)" kind="function">
      <name>ShaderPropertySheet</name>
    </member>
    <member refid="ShadowEngine.Rendering.ShaderPropertySheet.ShaderPropertySheet()" kind="function">
      <name>ShaderPropertySheet</name>
    </member>
    <member refid="ShadowEngine.Rendering.ShaderPropertySheet.GetPropertyCount()" kind="function">
      <name>GetPropertyCount</name>
    </member>
    <member refid="ShadowEngine.Rendering.ShaderPropertySheet.GetSize()" kind="function">
      <name>GetSize</name>
    </member>
    <member refid="ShadowEngine.Rendering.ShaderPropertySheet.GetProperty(size_t)" kind="function">
      <name>GetProperty</name>
    </member>
    <member refid="ShadowEngine.Rendering.ShaderPropertySheet.GetProperty(size_t)" kind="function">
      <name>GetProperty</name>
    </member>
    <member refid="ShadowEngine.Rendering.ShaderPropertySheet.GetProperty(std::string)" kind="function">
      <name>GetProperty</name>
    </member>
    <member refid="ShadowEngine.Rendering.ShaderPropertySheet.GetProperty(std::string)" kind="function">
      <name>GetProperty</name>
    </member>
    <member refid="ShadowEngine.Rendering.ShaderPropertySheet.AddProperty(IShaderProperty *)" kind="function">
      <name>AddProperty</name>
    </member>
    <member refid="ShadowEngine.Rendering.ShaderPropertySheet.Finalize()" kind="function">
      <name>Finalize</name>
    </member>
    <member refid="ShadowEngine.Rendering.ShaderPropertySheet.UpdataStruct()" kind="function">
      <name>UpdataStruct</name>
    </member>
    <member refid="ShadowEngine.Rendering.ShaderPropertySheet.GetDataStruct()" kind="function">
      <name>GetDataStruct</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.InputSystem.ShadowAction" kind="class">
    <name>ShadowEngine::InputSystem::ShadowAction</name>
    <member refid="ShadowEngine.InputSystem.ShadowAction.active" kind="variable">
      <name>active</name>
    </member>
    <member refid="ShadowEngine.InputSystem.ShadowAction.performed_b" kind="variable">
      <name>performed_b</name>
    </member>
    <member refid="ShadowEngine.InputSystem.ShadowAction.performed_b_last" kind="variable">
      <name>performed_b_last</name>
    </member>
    <member refid="ShadowEngine.InputSystem.ShadowAction.data" kind="variable">
      <name>data</name>
    </member>
    <member refid="ShadowEngine.InputSystem.ShadowAction.binding_" kind="variable">
      <name>binding_</name>
    </member>
    <member refid="ShadowEngine.InputSystem.ShadowAction.state_" kind="variable">
      <name>state_</name>
    </member>
    <member refid="ShadowEngine.InputSystem.ShadowAction.continuous_" kind="variable">
      <name>continuous_</name>
    </member>
    <member refid="ShadowEngine.InputSystem.ShadowAction.InputActionInspector" kind="friend">
      <name>InputActionInspector</name>
    </member>
    <member refid="ShadowEngine.InputSystem.ShadowAction.performed" kind="variable">
      <name>performed</name>
    </member>
    <member refid="ShadowEngine.InputSystem.ShadowAction.ShadowAction(std::string,InputBinding&lt;T&gt; *,bool)" kind="function">
      <name>ShadowAction</name>
    </member>
    <member refid="ShadowEngine.InputSystem.ShadowAction.~ShadowAction()" kind="function">
      <name>~ShadowAction</name>
    </member>
    <member refid="ShadowEngine.InputSystem.ShadowAction.ProcessEvent(EventSystem::ShadowEvent &amp;)" kind="function">
      <name>ProcessEvent</name>
    </member>
    <member refid="ShadowEngine.InputSystem.ShadowAction.AddEventListener(ActionState)" kind="function">
      <name>AddEventListener</name>
    </member>
    <member refid="ShadowEngine.InputSystem.ShadowAction.RemoveEventListener()" kind="function">
      <name>RemoveEventListener</name>
    </member>
    <member refid="ShadowEngine.InputSystem.ShadowAction.SetActive(bool)" kind="function">
      <name>SetActive</name>
    </member>
    <member refid="ShadowEngine.InputSystem.ShadowAction.GetName()" kind="function">
      <name>GetName</name>
    </member>
    <member refid="ShadowEngine.InputSystem.ShadowAction.GetState()" kind="function">
      <name>GetState</name>
    </member>
    <member refid="ShadowEngine.InputSystem.ShadowAction.SetState(ActionState)" kind="function">
      <name>SetState</name>
    </member>
    <member refid="ShadowEngine.InputSystem.ShadowAction.GetBinding()" kind="function">
      <name>GetBinding</name>
    </member>
    <member refid="ShadowEngine.InputSystem.ShadowAction.IsContinuous()" kind="function">
      <name>IsContinuous</name>
    </member>
    <member refid="ShadowEngine.InputSystem.ShadowAction.SetContinuous(bool)" kind="function">
      <name>SetContinuous</name>
    </member>
    <member refid="ShadowEngine.InputSystem.ShadowAction.GetPerformed()" kind="function">
      <name>GetPerformed</name>
    </member>
    <member refid="ShadowEngine.InputSystem.ShadowAction.GetData()" kind="function">
      <name>GetData</name>
    </member>
    <member refid="ShadowEngine.InputSystem.ShadowAction.Update()" kind="function">
      <name>Update</name>
    </member>
    <member refid="ShadowEngine.InputSystem.ShadowAction.Performed()" kind="function">
      <name>Performed</name>
    </member>
    <member refid="ShadowEngine.InputSystem.ShadowAction.Started()" kind="function">
      <name>Started</name>
    </member>
    <member refid="ShadowEngine.InputSystem.ShadowAction.Progress()" kind="function">
      <name>Progress</name>
    </member>
    <member refid="ShadowEngine.InputSystem.ShadowAction.Canceled()" kind="function">
      <name>Canceled</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.InputSystem.ShadowActionSystem" kind="class">
    <name>ShadowEngine::InputSystem::ShadowActionSystem</name>
    <member refid="ShadowEngine.InputSystem.ShadowActionSystem._instance" kind="variable">
      <name>_instance</name>
    </member>
    <member refid="ShadowEngine.InputSystem.ShadowActionSystem.actions" kind="variable">
      <name>actions</name>
    </member>
    <member refid="ShadowEngine.InputSystem.ShadowActionSystem.ShadowActionSystem()" kind="function">
      <name>ShadowActionSystem</name>
    </member>
    <member refid="ShadowEngine.InputSystem.ShadowActionSystem.~ShadowActionSystem()" kind="function">
      <name>~ShadowActionSystem</name>
    </member>
    <member refid="ShadowEngine.InputSystem.ShadowActionSystem.AddEvent(IShadowAction *)" kind="function">
      <name>AddEvent</name>
    </member>
    <member refid="ShadowEngine.InputSystem.ShadowActionSystem.GetAction(std::string)" kind="function">
      <name>GetAction</name>
    </member>
    <member refid="ShadowEngine.InputSystem.ShadowActionSystem.OnEvent(EventSystem::ShadowEvent &amp;)" kind="function">
      <name>OnEvent</name>
    </member>
    <member refid="ShadowEngine.InputSystem.ShadowActionSystem.Init()" kind="function">
      <name>Init</name>
    </member>
    <member refid="ShadowEngine.InputSystem.ShadowActionSystem.Update()" kind="function">
      <name>Update</name>
    </member>
    <member refid="ShadowEngine.InputSystem.ShadowActionSystem.Render()" kind="function">
      <name>Render</name>
    </member>
    <member refid="ShadowEngine.InputSystem.ShadowActionSystem.LateRender()" kind="function">
      <name>LateRender</name>
    </member>
    <member refid="ShadowEngine.InputSystem.ShadowActionSystem.GetName()" kind="function">
      <name>GetName</name>
    </member>
    <member refid="ShadowEngine.InputSystem.ShadowActionSystem.RegisterInspectors()" kind="function">
      <name>RegisterInspectors</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.ShadowApplication" kind="class">
    <name>ShadowEngine::ShadowApplication</name>
    <member refid="ShadowEngine.ShadowApplication.instance" kind="variable">
      <name>instance</name>
    </member>
    <member refid="ShadowEngine.ShadowApplication.window_" kind="variable">
      <name>window_</name>
    </member>
    <member refid="ShadowEngine.ShadowApplication.moduleManager" kind="variable">
      <name>moduleManager</name>
    </member>
    <member refid="ShadowEngine.ShadowApplication.running" kind="variable">
      <name>running</name>
    </member>
    <member refid="ShadowEngine.ShadowApplication.ShadowApplication()" kind="function">
      <name>ShadowApplication</name>
    </member>
    <member refid="ShadowEngine.ShadowApplication.~ShadowApplication()" kind="function">
      <name>~ShadowApplication</name>
    </member>
    <member refid="ShadowEngine.ShadowApplication.GetWindow()" kind="function">
      <name>GetWindow</name>
    </member>
    <member refid="ShadowEngine.ShadowApplication.SetWindow(ShadowWindow *)" kind="function">
      <name>SetWindow</name>
    </member>
    <member refid="ShadowEngine.ShadowApplication.GetModuleManager()" kind="function">
      <name>GetModuleManager</name>
    </member>
    <member refid="ShadowEngine.ShadowApplication.Init()" kind="function">
      <name>Init</name>
    </member>
    <member refid="ShadowEngine.ShadowApplication.Start()" kind="function">
      <name>Start</name>
    </member>
    <member refid="ShadowEngine.ShadowApplication.Get()" kind="function">
      <name>Get</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.Assets.ShadowAsset" kind="class">
    <name>ShadowEngine::Assets::ShadowAsset</name>
    <member refid="ShadowEngine.Assets.ShadowAsset.path" kind="variable">
      <name>path</name>
    </member>
    <member refid="ShadowEngine.Assets.ShadowAsset.Load(ShadowEngine::Assets::Element &amp;)" kind="function">
      <name>Load</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.EventSystem.ShadowEvent" kind="class">
    <name>ShadowEngine::EventSystem::ShadowEvent</name>
    <member refid="ShadowEngine.EventSystem.ShadowEvent.Handled" kind="variable">
      <name>Handled</name>
    </member>
    <member refid="ShadowEngine.EventSystem.ShadowEvent.ToString()" kind="function">
      <name>ToString</name>
    </member>
    <member refid="ShadowEngine.EventSystem.ShadowEvent.GetSDLEvnet()" kind="function">
      <name>GetSDLEvnet</name>
    </member>
    <member refid="ShadowEngine.EventSystem.ShadowEvent.ShadowEvent(SDL_Event *)" kind="function">
      <name>ShadowEvent</name>
    </member>
    <member refid="ShadowEngine.EventSystem.ShadowEvent.~ShadowEvent()" kind="function">
      <name>~ShadowEvent</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.EventSystem.ShadowEventManager" kind="class">
    <name>ShadowEngine::EventSystem::ShadowEventManager</name>
    <member refid="ShadowEngine.EventSystem.ShadowEventManager.instance" kind="variable">
      <name>instance</name>
    </member>
    <member refid="ShadowEngine.EventSystem.ShadowEventManager.eventQueue" kind="variable">
      <name>eventQueue</name>
    </member>
    <member refid="ShadowEngine.EventSystem.ShadowEventManager.eventSources" kind="variable">
      <name>eventSources</name>
    </member>
    <member refid="ShadowEngine.EventSystem.ShadowEventManager.eventConsumers" kind="variable">
      <name>eventConsumers</name>
    </member>
    <member refid="ShadowEngine.EventSystem.ShadowEventManager.PollEvents_()" kind="function">
      <name>PollEvents_</name>
    </member>
    <member refid="ShadowEngine.EventSystem.ShadowEventManager.PushNewEvent_(ShadowEvent *)" kind="function">
      <name>PushNewEvent_</name>
    </member>
    <member refid="ShadowEngine.EventSystem.ShadowEventManager.ProcessEvents_()" kind="function">
      <name>ProcessEvents_</name>
    </member>
    <member refid="ShadowEngine.EventSystem.ShadowEventManager.AddNewEventSource_(IShadowEventSource *)" kind="function">
      <name>AddNewEventSource_</name>
    </member>
    <member refid="ShadowEngine.EventSystem.ShadowEventManager.AddNewEventListener_(IShadowEventListener *)" kind="function">
      <name>AddNewEventListener_</name>
    </member>
    <member refid="ShadowEngine.EventSystem.ShadowEventManager.ShadowEventManager()" kind="function">
      <name>ShadowEventManager</name>
    </member>
    <member refid="ShadowEngine.EventSystem.ShadowEventManager.~ShadowEventManager()" kind="function">
      <name>~ShadowEventManager</name>
    </member>
    <member refid="ShadowEngine.EventSystem.ShadowEventManager.Init()" kind="function">
      <name>Init</name>
    </member>
    <member refid="ShadowEngine.EventSystem.ShadowEventManager.Update()" kind="function">
      <name>Update</name>
    </member>
    <member refid="ShadowEngine.EventSystem.ShadowEventManager.Render()" kind="function">
      <name>Render</name>
    </member>
    <member refid="ShadowEngine.EventSystem.ShadowEventManager.LateRender()" kind="function">
      <name>LateRender</name>
    </member>
    <member refid="ShadowEngine.EventSystem.ShadowEventManager.GetName()" kind="function">
      <name>GetName</name>
    </member>
    <member refid="ShadowEngine.EventSystem.ShadowEventManager.PollEvents()" kind="function">
      <name>PollEvents</name>
    </member>
    <member refid="ShadowEngine.EventSystem.ShadowEventManager.PushNewEvent(ShadowEvent *)" kind="function">
      <name>PushNewEvent</name>
    </member>
    <member refid="ShadowEngine.EventSystem.ShadowEventManager.ProcessEvents()" kind="function">
      <name>ProcessEvents</name>
    </member>
    <member refid="ShadowEngine.EventSystem.ShadowEventManager.AddNewEventSource(IShadowEventSource *)" kind="function">
      <name>AddNewEventSource</name>
    </member>
    <member refid="ShadowEngine.EventSystem.ShadowEventManager.AddNewEventListener(IShadowEventListener *)" kind="function">
      <name>AddNewEventListener</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.World.ShadowMapLayer" kind="class">
    <name>ShadowEngine::World::ShadowMapLayer</name>
    <member refid="ShadowEngine.World.ShadowMapLayer.data" kind="variable">
      <name>data</name>
    </member>
    <member refid="ShadowEngine.World.ShadowMapLayer.name" kind="variable">
      <name>name</name>
    </member>
    <member refid="ShadowEngine.World.ShadowMapLayer.visible" kind="variable">
      <name>visible</name>
    </member>
    <member refid="ShadowEngine.World.ShadowMapLayer.map" kind="variable">
      <name>map</name>
    </member>
    <member refid="ShadowEngine.World.ShadowMapLayer.ShadowMapLayer(MapChunk &amp;,bool,int *)" kind="function">
      <name>ShadowMapLayer</name>
    </member>
    <member refid="ShadowEngine.World.ShadowMapLayer.SetTile(ShadowMath::Vector2int,int)" kind="function">
      <name>SetTile</name>
    </member>
    <member refid="ShadowEngine.World.ShadowMapLayer.GetTile(ShadowMath::Vector2int)" kind="function">
      <name>GetTile</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.World.ShadowMapRenderer" kind="class">
    <name>ShadowEngine::World::ShadowMapRenderer</name>
    <member refid="ShadowEngine.World.ShadowMapRenderer.RenderMap(MapChunk &amp;)" kind="function">
      <name>RenderMap</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.ShadowModule" kind="class">
    <name>ShadowEngine::ShadowModule</name>
    <member refid="ShadowEngine.ShadowModule.Update()" kind="function">
      <name>Update</name>
    </member>
    <member refid="ShadowEngine.ShadowModule.Render()" kind="function">
      <name>Render</name>
    </member>
    <member refid="ShadowEngine.ShadowModule.LateRender()" kind="function">
      <name>LateRender</name>
    </member>
    <member refid="ShadowEngine.ShadowModule.GetName()" kind="function">
      <name>GetName</name>
    </member>
    <member refid="ShadowEngine.ShadowModule.ShadowModule()" kind="function">
      <name>ShadowModule</name>
    </member>
    <member refid="ShadowEngine.ShadowModule.~ShadowModule()" kind="function">
      <name>~ShadowModule</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.ShadowModuleManager" kind="class">
    <name>ShadowEngine::ShadowModuleManager</name>
    <member refid="ShadowEngine.ShadowModuleManager.instance" kind="variable">
      <name>instance</name>
    </member>
    <member refid="ShadowEngine.ShadowModuleManager.modules" kind="variable">
      <name>modules</name>
    </member>
    <member refid="ShadowEngine.ShadowModuleManager.ShadowModuleManager()" kind="function">
      <name>ShadowModuleManager</name>
    </member>
    <member refid="ShadowEngine.ShadowModuleManager.~ShadowModuleManager()" kind="function">
      <name>~ShadowModuleManager</name>
    </member>
    <member refid="ShadowEngine.ShadowModuleManager.PushModule(ShadowModule *)" kind="function">
      <name>PushModule</name>
    </member>
    <member refid="ShadowEngine.ShadowModuleManager.GetModule(std::string)" kind="function">
      <name>GetModule</name>
    </member>
    <member refid="ShadowEngine.ShadowModuleManager.GetModuleByType()" kind="function">
      <name>GetModuleByType</name>
    </member>
    <member refid="ShadowEngine.ShadowModuleManager.Init()" kind="function">
      <name>Init</name>
    </member>
    <member refid="ShadowEngine.ShadowModuleManager.Update()" kind="function">
      <name>Update</name>
    </member>
    <member refid="ShadowEngine.ShadowModuleManager.LateRender()" kind="function">
      <name>LateRender</name>
    </member>
    <member refid="ShadowEngine.ShadowModuleManager.Render()" kind="function">
      <name>Render</name>
    </member>
  </compound>
  <compound refid="ShadowWindow" kind="class">
    <name>ShadowWindow</name>
    <member refid="ShadowWindow.Height" kind="variable">
      <name>Height</name>
    </member>
    <member refid="ShadowWindow.Width" kind="variable">
      <name>Width</name>
    </member>
    <member refid="ShadowWindow.winPtr" kind="variable">
      <name>winPtr</name>
    </member>
    <member refid="ShadowWindow.context" kind="variable">
      <name>context</name>
    </member>
    <member refid="ShadowWindow.ShadowWindow(int,int)" kind="function">
      <name>ShadowWindow</name>
    </member>
    <member refid="ShadowWindow.~ShadowWindow()" kind="function">
      <name>~ShadowWindow</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.World.ShadowWorld" kind="class">
    <name>ShadowEngine::World::ShadowWorld</name>
    <member refid="ShadowEngine.World.ShadowWorld.name" kind="variable">
      <name>name</name>
    </member>
    <member refid="ShadowEngine.World.ShadowWorld.id" kind="variable">
      <name>id</name>
    </member>
    <member refid="ShadowEngine.World.ShadowWorld.activeMap" kind="variable">
      <name>activeMap</name>
    </member>
    <member refid="ShadowEngine.World.ShadowWorld.maps" kind="variable">
      <name>maps</name>
    </member>
    <member refid="ShadowEngine.World.ShadowWorld.chunkSizeX" kind="variable">
      <name>chunkSizeX</name>
    </member>
    <member refid="ShadowEngine.World.ShadowWorld.chunkSizeY" kind="variable">
      <name>chunkSizeY</name>
    </member>
    <member refid="ShadowEngine.World.ShadowWorld.Update(const ShadowMath::Vector2int &amp;)" kind="function">
      <name>Update</name>
    </member>
    <member refid="ShadowEngine.World.ShadowWorld.SetActiveMap(std::string)" kind="function">
      <name>SetActiveMap</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.SHObject" kind="class">
    <name>ShadowEngine::SHObject</name>
    <member refid="ShadowEngine.SHObject.GenerateId()" kind="function">
      <name>GenerateId</name>
    </member>
    <member refid="ShadowEngine.SHObject.GetType()" kind="function">
      <name>GetType</name>
    </member>
    <member refid="ShadowEngine.SHObject.GetTypeId()" kind="function">
      <name>GetTypeId</name>
    </member>
    <member refid="ShadowEngine.SHObject.~SHObject()" kind="function">
      <name>~SHObject</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.EntitySystem.SystemCallbacks" kind="struct">
    <name>ShadowEngine::EntitySystem::SystemCallbacks</name>
    <member refid="ShadowEngine.EntitySystem.SystemCallbacks.Callback" kind="typedef">
      <name>Callback</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.SystemCallbacks.update" kind="variable">
      <name>update</name>
    </member>
    <member refid="ShadowEngine.EntitySystem.SystemCallbacks.init" kind="variable">
      <name>init</name>
    </member>
  </compound>
  <compound refid="TestRenderer" kind="class">
    <name>TestRenderer</name>
    <member refid="TestRenderer.m_mesh" kind="variable">
      <name>m_mesh</name>
    </member>
    <member refid="TestRenderer.m_model" kind="variable">
      <name>m_model</name>
    </member>
    <member refid="TestRenderer.m_Shader" kind="variable">
      <name>m_Shader</name>
    </member>
    <member refid="TestRenderer.m_Material" kind="variable">
      <name>m_Material</name>
    </member>
    <member refid="TestRenderer.m_SquareColor" kind="variable">
      <name>m_SquareColor</name>
    </member>
    <member refid="TestRenderer.tri_one" kind="variable">
      <name>tri_one</name>
    </member>
    <member refid="TestRenderer.TestRenderer()" kind="function">
      <name>TestRenderer</name>
    </member>
    <member refid="TestRenderer.Update()" kind="function">
      <name>Update</name>
    </member>
  </compound>
  <compound refid="TestScene" kind="class">
    <name>TestScene</name>
    <member refid="TestScene.~TestScene()" kind="function">
      <name>~TestScene</name>
    </member>
    <member refid="TestScene.Init()" kind="function">
      <name>Init</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.Assets.Texture" kind="class">
    <name>ShadowEngine::Assets::Texture</name>
  </compound>
  <compound refid="ShadowEngine.Rendering.Texture" kind="class">
    <name>ShadowEngine::Rendering::Texture</name>
    <member refid="ShadowEngine.Rendering.Texture.~Texture()" kind="function">
      <name>~Texture</name>
    </member>
    <member refid="ShadowEngine.Rendering.Texture.GetWidth()" kind="function">
      <name>GetWidth</name>
    </member>
    <member refid="ShadowEngine.Rendering.Texture.GetHeight()" kind="function">
      <name>GetHeight</name>
    </member>
    <member refid="ShadowEngine.Rendering.Texture.Bind(uint32_t)" kind="function">
      <name>Bind</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.Rendering.Texture2D" kind="class">
    <name>ShadowEngine::Rendering::Texture2D</name>
    <member refid="ShadowEngine.Rendering.Texture2D.Create(const std::string &amp;)" kind="function">
      <name>Create</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.Assets.Texture2D" kind="class">
    <name>ShadowEngine::Assets::Texture2D</name>
  </compound>
  <compound refid="Time" kind="class">
    <name>Time</name>
    <member refid="Time.NOW" kind="variable">
      <name>NOW</name>
    </member>
    <member refid="Time.LAST" kind="variable">
      <name>LAST</name>
    </member>
    <member refid="Time.deltaTime" kind="variable">
      <name>deltaTime</name>
    </member>
    <member refid="Time.deltaTime_ms" kind="variable">
      <name>deltaTime_ms</name>
    </member>
    <member refid="Time.UpdateTime()" kind="function">
      <name>UpdateTime</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.ShadowEngine.ShadowEntity.Transform" kind="class">
    <name>ShadowEngine::ShadowEngine::ShadowEntity::Transform</name>
    <member refid="ShadowEngine.ShadowEngine.ShadowEntity.Transform.transformChanged" kind="variable">
      <name>transformChanged</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.ShadowEntity.Transform.entity" kind="variable">
      <name>entity</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.ShadowEntity.Transform.position" kind="variable">
      <name>position</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.ShadowEntity.Transform.scale" kind="variable">
      <name>scale</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.ShadowEntity.Transform.rot" kind="variable">
      <name>rot</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.ShadowEntity.Transform.w_position" kind="variable">
      <name>w_position</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.ShadowEntity.Transform.w_scale" kind="variable">
      <name>w_scale</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.ShadowEntity.Transform.w_rot" kind="variable">
      <name>w_rot</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.ShadowEntity.Transform.mat" kind="variable">
      <name>mat</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.ShadowEntity.Transform.w_mat" kind="variable">
      <name>w_mat</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.ShadowEntity.Transform.Transform()" kind="function">
      <name>Transform</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.ShadowEntity.Transform.Transform(glm::vec3)" kind="function">
      <name>Transform</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.ShadowEntity.Transform.Transform(glm::vec3,glm::vec3)" kind="function">
      <name>Transform</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.ShadowEntity.Transform.Transform(glm::vec3,glm::vec3,glm::quat)" kind="function">
      <name>Transform</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.ShadowEntity.Transform.GetPosition()" kind="function">
      <name>GetPosition</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.ShadowEntity.Transform.SetPosition(glm::vec3)" kind="function">
      <name>SetPosition</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.ShadowEntity.Transform.GetScale()" kind="function">
      <name>GetScale</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.ShadowEntity.Transform.SetScale(glm::vec3)" kind="function">
      <name>SetScale</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.ShadowEntity.Transform.GetRotation()" kind="function">
      <name>GetRotation</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.ShadowEntity.Transform.SetRotation(glm::quat)" kind="function">
      <name>SetRotation</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.ShadowEntity.Transform.GetTransformMatrix()" kind="function">
      <name>GetTransformMatrix</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.ShadowEntity.Transform.GetWorldTransformMatrix()" kind="function">
      <name>GetWorldTransformMatrix</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.ShadowEntity.Transform.AssignEntity(EntitySystem::Entity *)" kind="function">
      <name>AssignEntity</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.ShadowEntity.Transform.UpdateMatrix()" kind="function">
      <name>UpdateMatrix</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.ShadowEntity.Transform.UpdateLocalMatrix()" kind="function">
      <name>UpdateLocalMatrix</name>
    </member>
    <member refid="ShadowEngine.ShadowEngine.ShadowEntity.Transform.UpdateWorldMatrix()" kind="function">
      <name>UpdateWorldMatrix</name>
    </member>
  </compound>
  <compound refid="ShadowMath.Vector2float" kind="class">
    <name>ShadowMath::Vector2float</name>
    <member refid="ShadowMath.Vector2float.x" kind="variable">
      <name>x</name>
    </member>
    <member refid="ShadowMath.Vector2float.y" kind="variable">
      <name>y</name>
    </member>
    <member refid="ShadowMath.Vector2float.zero" kind="variable">
      <name>zero</name>
    </member>
    <member refid="ShadowMath.Vector2float.Vector2float(float,float)" kind="function">
      <name>Vector2float</name>
    </member>
    <member refid="ShadowMath.Vector2float.Vector2float()" kind="function">
      <name>Vector2float</name>
    </member>
    <member refid="ShadowMath.Vector2float.Vector2float(const Vector2float &amp;)" kind="function">
      <name>Vector2float</name>
    </member>
    <member refid="ShadowMath.Vector2float.Magnitude()" kind="function">
      <name>Magnitude</name>
    </member>
    <member refid="ShadowMath.Vector2float.MagnitudeSqr()" kind="function">
      <name>MagnitudeSqr</name>
    </member>
    <member refid="ShadowMath.Vector2float.Normalize()" kind="function">
      <name>Normalize</name>
    </member>
    <member refid="ShadowMath.Vector2float.LeftNormal()" kind="function">
      <name>LeftNormal</name>
    </member>
    <member refid="ShadowMath.Vector2float.RightNormal()" kind="function">
      <name>RightNormal</name>
    </member>
    <member refid="ShadowMath.Vector2float.Angle()" kind="function">
      <name>Angle</name>
    </member>
    <member refid="ShadowMath.Vector2float.DotProduct(Vector2float,Vector2float)" kind="function">
      <name>DotProduct</name>
    </member>
    <member refid="ShadowMath.Vector2float.Lerp(Vector2float,Vector2float,int)" kind="function">
      <name>Lerp</name>
    </member>
    <member refid="ShadowMath.Vector2float.Distance(Vector2float,Vector2float)" kind="function">
      <name>Distance</name>
    </member>
    <member refid="ShadowMath.Vector2float.operator+(const Vector2float &amp;)" kind="function">
      <name>operator+</name>
    </member>
    <member refid="ShadowMath.Vector2float.operator-(const Vector2float &amp;)" kind="function">
      <name>operator-</name>
    </member>
    <member refid="ShadowMath.Vector2float.operator *(const Vector2float &amp;)" kind="function">
      <name>operator *</name>
    </member>
    <member refid="ShadowMath.Vector2float.operator *(const int &amp;)" kind="function">
      <name>operator *</name>
    </member>
    <member refid="ShadowMath.Vector2float.operator *(const float &amp;)" kind="function">
      <name>operator *</name>
    </member>
    <member refid="ShadowMath.Vector2float.operator==(const Vector2float)" kind="function">
      <name>operator==</name>
    </member>
    <member refid="ShadowMath.Vector2float.operator!=(const Vector2float)" kind="function">
      <name>operator!=</name>
    </member>
    <member refid="ShadowMath.Vector2float.operator[](int)" kind="function">
      <name>operator[]</name>
    </member>
    <member refid="ShadowMath.Vector2float.operator Vector2int()" kind="function">
      <name>operator Vector2int</name>
    </member>
  </compound>
  <compound refid="ShadowMath.Vector2int" kind="struct">
    <name>ShadowMath::Vector2int</name>
    <member refid="ShadowMath.Vector2int.x" kind="variable">
      <name>x</name>
    </member>
    <member refid="ShadowMath.Vector2int.y" kind="variable">
      <name>y</name>
    </member>
    <member refid="ShadowMath.Vector2int.Vector2int(int,int)" kind="function">
      <name>Vector2int</name>
    </member>
    <member refid="ShadowMath.Vector2int.Vector2int()" kind="function">
      <name>Vector2int</name>
    </member>
    <member refid="ShadowMath.Vector2int.Vector2int(const Vector2int &amp;)" kind="function">
      <name>Vector2int</name>
    </member>
    <member refid="ShadowMath.Vector2int.operator+(const Vector2int &amp;)" kind="function">
      <name>operator+</name>
    </member>
    <member refid="ShadowMath.Vector2int.operator-(const Vector2int &amp;)" kind="function">
      <name>operator-</name>
    </member>
    <member refid="ShadowMath.Vector2int.operator *(const Vector2int &amp;)" kind="function">
      <name>operator *</name>
    </member>
    <member refid="ShadowMath.Vector2int.operator *(const int &amp;)" kind="function">
      <name>operator *</name>
    </member>
    <member refid="ShadowMath.Vector2int.operator *(const float &amp;)" kind="function">
      <name>operator *</name>
    </member>
    <member refid="ShadowMath.Vector2int.operator==(const Vector2int &amp;)" kind="function">
      <name>operator==</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.Rendering.Vertex" kind="struct">
    <name>ShadowEngine::Rendering::Vertex</name>
    <member refid="ShadowEngine.Rendering.Vertex.pos" kind="variable">
      <name>pos</name>
    </member>
    <member refid="ShadowEngine.Rendering.Vertex.normal" kind="variable">
      <name>normal</name>
    </member>
    <member refid="ShadowEngine.Rendering.Vertex.uv" kind="variable">
      <name>uv</name>
    </member>
    <member refid="ShadowEngine.Rendering.Vertex.color" kind="variable">
      <name>color</name>
    </member>
    <member refid="ShadowEngine.Rendering.Vertex.input_layout" kind="variable">
      <name>input_layout</name>
    </member>
  </compound>
  <compound refid="VERTEX_CONSTANT_BUFFER" kind="struct">
    <name>VERTEX_CONSTANT_BUFFER</name>
    <member refid="VERTEX_CONSTANT_BUFFER.mvp" kind="variable">
      <name>mvp</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.Rendering.VertexBuffer" kind="class">
    <name>ShadowEngine::Rendering::VertexBuffer</name>
    <member refid="ShadowEngine.Rendering.VertexBuffer.~VertexBuffer()" kind="function">
      <name>~VertexBuffer</name>
    </member>
    <member refid="ShadowEngine.Rendering.VertexBuffer.GetLayout()" kind="function">
      <name>GetLayout</name>
    </member>
    <member refid="ShadowEngine.Rendering.VertexBuffer.SetLayout(const BufferLayout &amp;)" kind="function">
      <name>SetLayout</name>
    </member>
    <member refid="ShadowEngine.Rendering.VertexBuffer.Create(void *,uint32_t)" kind="function">
      <name>Create</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.EventSystem.Events.WindowCloseEvent" kind="class">
    <name>ShadowEngine::EventSystem::Events::WindowCloseEvent</name>
    <member refid="ShadowEngine.EventSystem.Events.WindowCloseEvent.SHObject_Base(WindowCloseEvent)" kind="function">
      <name>SHObject_Base</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.EventSystem.Events.WindowResizeEvent" kind="class">
    <name>ShadowEngine::EventSystem::Events::WindowResizeEvent</name>
    <member refid="ShadowEngine.EventSystem.Events.WindowResizeEvent.m_Width" kind="variable">
      <name>m_Width</name>
    </member>
    <member refid="ShadowEngine.EventSystem.Events.WindowResizeEvent.m_Height" kind="variable">
      <name>m_Height</name>
    </member>
    <member refid="ShadowEngine.EventSystem.Events.WindowResizeEvent.SHObject_Base(WindowResizeEvent)" kind="function">
      <name>SHObject_Base</name>
    </member>
    <member refid="ShadowEngine.EventSystem.Events.WindowResizeEvent.GetWidth()" kind="function">
      <name>GetWidth</name>
    </member>
    <member refid="ShadowEngine.EventSystem.Events.WindowResizeEvent.GetHeight()" kind="function">
      <name>GetHeight</name>
    </member>
    <member refid="ShadowEngine.EventSystem.Events.WindowResizeEvent.ToString()" kind="function">
      <name>ToString</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.Rendering.WorldData" kind="struct">
    <name>ShadowEngine::Rendering::WorldData</name>
    <member refid="ShadowEngine.Rendering.WorldData.viewProjection" kind="variable">
      <name>viewProjection</name>
    </member>
  </compound>
  <compound refid="ShadowEngine" kind="namespace">
    <name>ShadowEngine</name>
    <member refid="ShadowEngine.Scope" kind="typedef">
      <name>Scope</name>
    </member>
    <member refid="ShadowEngine.Ref" kind="typedef">
      <name>Ref</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.Assets" kind="namespace">
    <name>ShadowEngine::Assets</name>
    <member refid="ShadowEngine.Assets.AssetLoader::LoadAsset&lt;World::ShadowWorld&gt;(std::string)" kind="function">
      <name>AssetLoader::LoadAsset&lt;World::ShadowWorld&gt;</name>
    </member>
    <member refid="ShadowEngine.Assets.AssetLoader::LoadAsset&lt;World::MapChunk&gt;(std::string)" kind="function">
      <name>AssetLoader::LoadAsset&lt;World::MapChunk&gt;</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.Debug" kind="namespace">
    <name>ShadowEngine::Debug</name>
  </compound>
  <compound refid="ShadowEngine.DebugGui" kind="namespace">
    <name>ShadowEngine::DebugGui</name>
  </compound>
  <compound refid="ShadowEngine.EntitySystem" kind="namespace">
    <name>ShadowEngine::EntitySystem</name>
    <member refid="ShadowEngine.EntitySystem.operator&lt;&lt;(std::ostream &amp;,const Entity &amp;)" kind="function">
      <name>operator&lt;&lt;</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.EventSystem" kind="namespace">
    <name>ShadowEngine::EventSystem</name>
    <member refid="ShadowEngine.EventSystem.operator&lt;&lt;(std::ostream &amp;,const class ShadowEvent &amp;)" kind="function">
      <name>operator&lt;&lt;</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.EventSystem.Events" kind="namespace">
    <name>ShadowEngine::EventSystem::Events</name>
  </compound>
  <compound refid="ShadowEngine.InputSystem" kind="namespace">
    <name>ShadowEngine::InputSystem</name>
    <member refid="ShadowEngine.InputSystem.ActionState" kind="enum">
      <name>ActionState</name>
    </member>
    <member refid="_binding_context_8h_1a8f045fd1bc082a13341798db87a3d95fafb116e39d1a5dc64cbeb72fc25d2d50d" kind="enumvalue">
      <name>UnInit</name>
    </member>
    <member refid="_binding_context_8h_1a8f045fd1bc082a13341798db87a3d95fad13351028062ab198c2faea0a6912883" kind="enumvalue">
      <name>Idle</name>
    </member>
    <member refid="_binding_context_8h_1a8f045fd1bc082a13341798db87a3d95fa98497d65280479b1ecced61bb6ed623d" kind="enumvalue">
      <name>Started</name>
    </member>
    <member refid="_binding_context_8h_1a8f045fd1bc082a13341798db87a3d95faffe7d9c1d9a1e4de769e952b987dda1c" kind="enumvalue">
      <name>Progress</name>
    </member>
    <member refid="_binding_context_8h_1a8f045fd1bc082a13341798db87a3d95fafb4de93922d0dceddc4cb2a28b922c5a" kind="enumvalue">
      <name>Performed</name>
    </member>
    <member refid="_binding_context_8h_1a8f045fd1bc082a13341798db87a3d95fae113a87bb92d52e48f44544b64841c24" kind="enumvalue">
      <name>Canceled</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.Rendering" kind="namespace">
    <name>ShadowEngine::Rendering</name>
    <member refid="ShadowEngine.Rendering.ShaderDataType" kind="enum">
      <name>ShaderDataType</name>
    </member>
    <member refid="_buffer_8h_1a45f844c61a7f83c4fb1f99cda8c2d093a6adf97f83acf6453d4a6a4b1070f3754" kind="enumvalue">
      <name>None</name>
    </member>
    <member refid="_buffer_8h_1a45f844c61a7f83c4fb1f99cda8c2d093a22ae0e2b89e5e3d477f988cc36d3272b" kind="enumvalue">
      <name>Float</name>
    </member>
    <member refid="_buffer_8h_1a45f844c61a7f83c4fb1f99cda8c2d093a6694430a2b471b5d2de071f2ef1fdc57" kind="enumvalue">
      <name>Float2</name>
    </member>
    <member refid="_buffer_8h_1a45f844c61a7f83c4fb1f99cda8c2d093a8a8a1d211464d4bdee46db3c75bfa121" kind="enumvalue">
      <name>Float3</name>
    </member>
    <member refid="_buffer_8h_1a45f844c61a7f83c4fb1f99cda8c2d093a33116adc6690289da9b82ea736864eeb" kind="enumvalue">
      <name>Float4</name>
    </member>
    <member refid="_buffer_8h_1a45f844c61a7f83c4fb1f99cda8c2d093a2495a7d9c1fab19af6441abbfed823e1" kind="enumvalue">
      <name>Mat3</name>
    </member>
    <member refid="_buffer_8h_1a45f844c61a7f83c4fb1f99cda8c2d093a80f7408b0a5b5d78c26adae9f6f420f9" kind="enumvalue">
      <name>Mat4</name>
    </member>
    <member refid="_buffer_8h_1a45f844c61a7f83c4fb1f99cda8c2d093a1686a6c336b71b36d77354cea19a8b52" kind="enumvalue">
      <name>Int</name>
    </member>
    <member refid="_buffer_8h_1a45f844c61a7f83c4fb1f99cda8c2d093a4c6bc90f2bbdf35523e29c414a57bad3" kind="enumvalue">
      <name>Int2</name>
    </member>
    <member refid="_buffer_8h_1a45f844c61a7f83c4fb1f99cda8c2d093a56bf1b0e694b442bf4145a04b82ea943" kind="enumvalue">
      <name>Int3</name>
    </member>
    <member refid="_buffer_8h_1a45f844c61a7f83c4fb1f99cda8c2d093a1a44f12c3427b3e11c171d09632bad8d" kind="enumvalue">
      <name>Int4</name>
    </member>
    <member refid="_buffer_8h_1a45f844c61a7f83c4fb1f99cda8c2d093ac26f15e86e3de4c398a8273272aba034" kind="enumvalue">
      <name>Bool</name>
    </member>
    <member refid="ShadowEngine.Rendering.ShaderDataTypeSize(ShaderDataType)" kind="function">
      <name>ShaderDataTypeSize</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.Rendering.D3D12" kind="namespace">
    <name>ShadowEngine::Rendering::D3D12</name>
    <member refid="ShadowEngine.Rendering.D3D12.com_ptr" kind="typedef">
      <name>com_ptr</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.BlobAsString(com_ptr&lt;ID3DBlob&gt;)" kind="function">
      <name>BlobAsString</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.WFormat(const wchar_t *,...)" kind="function">
      <name>WFormat</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.GetAdapters(IDXGIFactory6 *,std::vector&lt;com_ptr&lt;IDXGIAdapter1&gt;&gt; &amp;)" kind="function">
      <name>GetAdapters</name>
    </member>
    <member refid="ShadowEngine.Rendering.D3D12.ShaderDataTypeToD3D12BaseType(ShaderDataType)" kind="function">
      <name>ShaderDataTypeToD3D12BaseType</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.SDLPlatform" kind="namespace">
    <name>ShadowEngine::SDLPlatform</name>
  </compound>
  <compound refid="ShadowEngine.ShadowEngine" kind="namespace">
    <name>ShadowEngine::ShadowEngine</name>
  </compound>
  <compound refid="ShadowEngine.ShadowEngine.Assets" kind="namespace">
    <name>ShadowEngine::ShadowEngine::Assets</name>
  </compound>
  <compound refid="ShadowEngine.ShadowEngine.EntitySystem" kind="namespace">
    <name>ShadowEngine::ShadowEngine::EntitySystem</name>
  </compound>
  <compound refid="ShadowEngine.ShadowEngine.ShadowEngine" kind="namespace">
    <name>ShadowEngine::ShadowEngine::ShadowEngine</name>
  </compound>
  <compound refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem" kind="namespace">
    <name>ShadowEngine::ShadowEngine::ShadowEngine::EntitySystem</name>
    <member refid="ShadowEngine.ShadowEngine.ShadowEngine.EntitySystem.EntityFlags" kind="enum">
      <name>EntityFlags</name>
    </member>
    <member refid="_entity_8h_1a385ab2a91fedc0e0a14188c3e4064173ab50339a10e1de285ac99d4c3990b8693" kind="enumvalue">
      <name>NONE</name>
    </member>
    <member refid="_entity_8h_1a385ab2a91fedc0e0a14188c3e4064173a8a544ba2099dce8d28d22fbc876dade6" kind="enumvalue">
      <name>HAS_TICK</name>
    </member>
    <member refid="_entity_8h_1a385ab2a91fedc0e0a14188c3e4064173a82b116c18b589fc97d7db454ee054db5" kind="enumvalue">
      <name>HAS_LATE_TICK</name>
    </member>
  </compound>
  <compound refid="ShadowEngine.ShadowEngine.ShadowEntity" kind="namespace">
    <name>ShadowEngine::ShadowEngine::ShadowEntity</name>
  </compound>
  <compound refid="ShadowEngine.ShadowEntity" kind="namespace">
    <name>ShadowEngine::ShadowEntity</name>
  </compound>
  <compound refid="ShadowEngine.World" kind="namespace">
    <name>ShadowEngine::World</name>
  </compound>
  <compound refid="ShadowMath" kind="namespace">
    <name>ShadowMath</name>
  </compound>
  <compound refid="_core_8h" kind="file">
    <name>Core.h</name>
    <member refid="_core_8h_1ad27cc17b25bb93134368d5eb21126eae" kind="define">
      <name>BIT</name>
    </member>
    <member refid="_core_8h_1aa72dd076db03f635b6bcfd35dfc3180d" kind="define">
      <name>SH_ASSERT</name>
    </member>
    <member refid="_core_8h_1a6e72b1a6c2a16c387bf14856950d3872" kind="define">
      <name>SH_CORE_ASSERT</name>
    </member>
  </compound>
  <compound refid="_shadow_application_8cpp" kind="file">
    <name>ShadowApplication.cpp</name>
  </compound>
  <compound refid="_shadow_application_8h" kind="file">
    <name>ShadowApplication.h</name>
  </compound>
  <compound refid="_s_h_object_8cpp" kind="file">
    <name>SHObject.cpp</name>
  </compound>
  <compound refid="_s_h_object_8h" kind="file">
    <name>SHObject.h</name>
    <member refid="_s_h_object_8h_1ab6e37410b4b149b1b5cb3c4bafe8aa53" kind="define">
      <name>SHObject_Base</name>
    </member>
  </compound>
  <compound refid="_debug_8cpp" kind="file">
    <name>Debug.cpp</name>
  </compound>
  <compound refid="_debug_8h" kind="file">
    <name>Debug.h</name>
  </compound>
  <compound refid="_default_entities_8cpp" kind="file">
    <name>DefaultEntities.cpp</name>
  </compound>
  <compound refid="_camera_8cpp" kind="file">
    <name>Camera.cpp</name>
  </compound>
  <compound refid="_camera_8h" kind="file">
    <name>Camera.h</name>
    <member refid="_camera_8h_1af7eb92b45c5f7f64f02821f87c385ebb" kind="enum">
      <name>CameraType</name>
    </member>
    <member refid="_camera_8h_1af7eb92b45c5f7f64f02821f87c385ebba03424250432f2aa71de95579d2c0eaeb" kind="enumvalue">
      <name>Orthographic</name>
    </member>
    <member refid="_camera_8h_1af7eb92b45c5f7f64f02821f87c385ebbaa80420eef88d11f77532f1b9cb467fa3" kind="enumvalue">
      <name>Perspective</name>
    </member>
  </compound>
  <compound refid="_first_person_camera_8cpp" kind="file">
    <name>FirstPersonCamera.cpp</name>
  </compound>
  <compound refid="_first_person_camera_8h" kind="file">
    <name>FirstPersonCamera.h</name>
  </compound>
  <compound refid="_light_8cpp" kind="file">
    <name>Light.cpp</name>
  </compound>
  <compound refid="_light_8h" kind="file">
    <name>Light.h</name>
  </compound>
  <compound refid="_mesh_renderer_8cpp" kind="file">
    <name>MeshRenderer.cpp</name>
  </compound>
  <compound refid="_mesh_renderer_8h" kind="file">
    <name>MeshRenderer.h</name>
  </compound>
  <compound refid="_player_8cpp" kind="file">
    <name>Player.cpp</name>
  </compound>
  <compound refid="_player_8h" kind="file">
    <name>Player.h</name>
  </compound>
  <compound refid="_entity_8cpp" kind="file">
    <name>Entity.cpp</name>
  </compound>
  <compound refid="_entity_8h" kind="file">
    <name>Entity.h</name>
  </compound>
  <compound refid="_entity_base_8h" kind="file">
    <name>EntityBase.h</name>
    <member refid="_entity_base_8h_1a93745e70d6e760a481f4e634ffda2318" kind="define">
      <name>Entity_Base</name>
    </member>
    <member refid="_entity_base_8h_1aff104a6d4d138703d17c394f0864700a" kind="define">
      <name>Entity_Base_NoCtor</name>
    </member>
  </compound>
  <compound refid="_entity_container_8h" kind="file">
    <name>EntityContainer.h</name>
  </compound>
  <compound refid="_entity_manager_8cpp" kind="file">
    <name>EntityManager.cpp</name>
  </compound>
  <compound refid="_entity_manager_8h" kind="file">
    <name>EntityManager.h</name>
  </compound>
  <compound refid="_entity_registry_8cpp" kind="file">
    <name>EntityRegistry.cpp</name>
  </compound>
  <compound refid="_entity_registry_8h" kind="file">
    <name>EntityRegistry.h</name>
  </compound>
  <compound refid="_entity_system_8cpp" kind="file">
    <name>EntitySystem.cpp</name>
  </compound>
  <compound refid="_entity_system_8h" kind="file">
    <name>EntitySystem.h</name>
  </compound>
  <compound refid="_scene_entity_8cpp" kind="file">
    <name>SceneEntity.cpp</name>
  </compound>
  <compound refid="_scene_entity_8h" kind="file">
    <name>SceneEntity.h</name>
    <member refid="_scene_entity_8h_1a65439edc53eaf360de2a86ca17e3e5c0" kind="define">
      <name>BIND_EVENT_FN</name>
    </member>
  </compound>
  <compound refid="_shadow_scene_8cpp" kind="file">
    <name>ShadowScene.cpp</name>
  </compound>
  <compound refid="_shadow_scene_8h" kind="file">
    <name>ShadowScene.h</name>
  </compound>
  <compound refid="imgui__impl__dx12_8cpp" kind="file">
    <name>imgui_impl_dx12.cpp</name>
    <member refid="imgui__impl__dx12_8cpp_1aac1371a3225e535b3596257568d9edf1" kind="variable">
      <name>g_pd3dDevice</name>
    </member>
    <member refid="imgui__impl__dx12_8cpp_1a84b28b52f6ec4d680486c789330a004d" kind="variable">
      <name>g_pVertexShaderBlob</name>
    </member>
    <member refid="imgui__impl__dx12_8cpp_1a6502b52601889b831392c083ed15d6d2" kind="variable">
      <name>g_pPixelShaderBlob</name>
    </member>
    <member refid="imgui__impl__dx12_8cpp_1a4b6288f000c546d63eeee9928fe89dc3" kind="variable">
      <name>g_pRootSignature</name>
    </member>
    <member refid="imgui__impl__dx12_8cpp_1a7aa61c7485016e87a17a36d43d613015" kind="variable">
      <name>g_pPipelineState</name>
    </member>
    <member refid="imgui__impl__dx12_8cpp_1a37eac9ea4e14080a434b11d59d930524" kind="variable">
      <name>g_RTVFormat</name>
    </member>
    <member refid="imgui__impl__dx12_8cpp_1aeaf355a642067f861576b64c39eb655b" kind="variable">
      <name>g_pFontTextureResource</name>
    </member>
    <member refid="imgui__impl__dx12_8cpp_1a55257a635b36fcd09c54faa9a90541a0" kind="variable">
      <name>g_hFontSrvCpuDescHandle</name>
    </member>
    <member refid="imgui__impl__dx12_8cpp_1a6d7fc9c23a4b1801aed02d90b375b330" kind="variable">
      <name>g_hFontSrvGpuDescHandle</name>
    </member>
    <member refid="imgui__impl__dx12_8cpp_1adee55bccd02a794c676f2d87c6501062" kind="variable">
      <name>g_pFrameResources</name>
    </member>
    <member refid="imgui__impl__dx12_8cpp_1a6c08271d9d252c0001236ee019c9a6f9" kind="variable">
      <name>g_numFramesInFlight</name>
    </member>
    <member refid="imgui__impl__dx12_8cpp_1a5142cff0294ec6db703057dc8d3a70f6" kind="variable">
      <name>g_frameIndex</name>
    </member>
    <member refid="imgui__impl__dx12_8cpp_1ae10f385966edb4d7f2120fbdc7882a18" kind="function">
      <name>ImGui_ImplDX12_InitPlatformInterface</name>
    </member>
    <member refid="imgui__impl__dx12_8cpp_1a3c427616bc7474716b683a132f2de1fb" kind="function">
      <name>ImGui_ImplDX12_ShutdownPlatformInterface</name>
    </member>
    <member refid="imgui__impl__dx12_8cpp_1a515221c1efc620aae5e4b39d8a00ce8a" kind="function">
      <name>ImGui_ImplDX12_SetupRenderState</name>
    </member>
    <member refid="imgui__impl__dx12_8cpp_1ab62154aabc988a05362e9a300a87b033" kind="function">
      <name>ImGui_ImplDX12_RenderDrawData</name>
    </member>
    <member refid="imgui__impl__dx12_8cpp_1a319088f79d43ba230869d9ce33ecee12" kind="function">
      <name>ImGui_ImplDX12_CreateFontsTexture</name>
    </member>
    <member refid="imgui__impl__dx12_8cpp_1ab272c7b74e08931d1036bc06ba34402e" kind="function">
      <name>ImGui_ImplDX12_CreateDeviceObjects</name>
    </member>
    <member refid="imgui__impl__dx12_8cpp_1af97805bc6088d9f57e53e90df5a69176" kind="function">
      <name>ImGui_ImplDX12_InvalidateDeviceObjects</name>
    </member>
    <member refid="imgui__impl__dx12_8cpp_1aea922c649228007be63a9e725b5f3b3b" kind="function">
      <name>ImGui_ImplDX12_Init</name>
    </member>
    <member refid="imgui__impl__dx12_8cpp_1a35feaca4a5ef1d61ed0528238a829fa7" kind="function">
      <name>ImGui_ImplDX12_Shutdown</name>
    </member>
    <member refid="imgui__impl__dx12_8cpp_1a90c28de6beeafe228957536ce6edab33" kind="function">
      <name>ImGui_ImplDX12_NewFrame</name>
    </member>
    <member refid="imgui__impl__dx12_8cpp_1a3c2a1c078e15a5f7faf67f5553a39321" kind="function">
      <name>ImGui_ImplDX12_CreateWindow</name>
    </member>
    <member refid="imgui__impl__dx12_8cpp_1aefaa35aa45a88809aacc94086a41583a" kind="function">
      <name>ImGui_ImplDX12_DestroyWindow</name>
    </member>
    <member refid="imgui__impl__dx12_8cpp_1a47d264c268519989915166e6d589ceb6" kind="function">
      <name>ImGui_ImplDX12_SetWindowSize</name>
    </member>
    <member refid="imgui__impl__dx12_8cpp_1ac9b45d37e56c72902f48fc9ff91015c6" kind="function">
      <name>ImGui_ImplDX12_RenderWindow</name>
    </member>
    <member refid="imgui__impl__dx12_8cpp_1a8ae127ab88f984ad15026f8071adf2c9" kind="function">
      <name>ImGui_ImplDX12_SwapBuffers</name>
    </member>
  </compound>
  <compound refid="imgui__impl__dx12_8h" kind="file">
    <name>imgui_impl_dx12.h</name>
    <member refid="imgui__impl__dx12_8h_1a9a13b54f4606bdf621cc175493ca05a3" kind="function">
      <name>ImGui_ImplDX12_Init</name>
    </member>
    <member refid="imgui__impl__dx12_8h_1a7aae7738912dbd5dea744193f8d27abc" kind="function">
      <name>ImGui_ImplDX12_Shutdown</name>
    </member>
    <member refid="imgui__impl__dx12_8h_1a2a963ef6f8dfd23858e34f034416c618" kind="function">
      <name>ImGui_ImplDX12_NewFrame</name>
    </member>
    <member refid="imgui__impl__dx12_8h_1a7e6a26cdbaaeeca9df86e8373c4a8547" kind="function">
      <name>ImGui_ImplDX12_RenderDrawData</name>
    </member>
    <member refid="imgui__impl__dx12_8h_1a02f397b136e8350977a2192c8ddbd9bd" kind="function">
      <name>ImGui_ImplDX12_InvalidateDeviceObjects</name>
    </member>
    <member refid="imgui__impl__dx12_8h_1a70a3e717bf7a3903b1f231dfc2516f89" kind="function">
      <name>ImGui_ImplDX12_CreateDeviceObjects</name>
    </member>
  </compound>
  <compound refid="_im_gui_module_8cpp" kind="file">
    <name>ImGuiModule.cpp</name>
  </compound>
  <compound refid="_im_gui_module_8h" kind="file">
    <name>ImGuiModule.h</name>
  </compound>
  <compound refid="_i_shadow_im_gui_8h" kind="file">
    <name>IShadowImGui.h</name>
  </compound>
  <compound refid="_im_gui_iml_8cpp" kind="file">
    <name>ImGuiIml.cpp</name>
    <member refid="_im_gui_iml_8cpp_1a764d466a9da0dbe5fc6c81aaa567f984" kind="define">
      <name>IMGUI_IMPL_OPENGL_LOADER_GLAD</name>
    </member>
  </compound>
  <compound refid="_inspector_8h" kind="file">
    <name>Inspector.h</name>
  </compound>
  <compound refid="_inspector_system_8cpp" kind="file">
    <name>InspectorSystem.cpp</name>
  </compound>
  <compound refid="_inspector_system_8h" kind="file">
    <name>InspectorSystem.h</name>
  </compound>
  <compound refid="_log_8cpp" kind="file">
    <name>Log.cpp</name>
  </compound>
  <compound refid="_log_8h" kind="file">
    <name>Log.h</name>
    <member refid="_log_8h_1a4428edc5a7eda21303fb6392d4ba9bb4" kind="define">
      <name>SH_CORE_TRACE</name>
    </member>
    <member refid="_log_8h_1a7cdb4967bc8880fe039cea1e82b68ef8" kind="define">
      <name>SH_CORE_INFO</name>
    </member>
    <member refid="_log_8h_1a92a3900b321770223aedf2d50c29a0a1" kind="define">
      <name>SH_CORE_WARN</name>
    </member>
    <member refid="_log_8h_1acc82d60dcb2ada8f5903cb451d19f696" kind="define">
      <name>SH_CORE_ERROR</name>
    </member>
    <member refid="_log_8h_1af53e2e9c207e4fc4104a3e35cf4d341e" kind="define">
      <name>SH_CORE_CRITICAL</name>
    </member>
    <member refid="_log_8h_1a313072db41f26b2be391c35fe9ab9e07" kind="define">
      <name>SH_TRACE</name>
    </member>
    <member refid="_log_8h_1aefae86ab5cacd7849157844cc44622f1" kind="define">
      <name>SH_INFO</name>
    </member>
    <member refid="_log_8h_1a70cf2a4a26aba3419cbd9dfd218e56e5" kind="define">
      <name>SH_WARN</name>
    </member>
    <member refid="_log_8h_1a62140234c76ecd3e2f105d56bf5f1994" kind="define">
      <name>SH_ERROR</name>
    </member>
    <member refid="_log_8h_1a1799a62d72c03a109d773f11d6b78cd2" kind="define">
      <name>SH_CRITICAL</name>
    </member>
  </compound>
  <compound refid="main_8cpp" kind="file">
    <name>main.cpp</name>
    <member refid="main_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" kind="function">
      <name>main</name>
    </member>
  </compound>
  <compound refid="_common_8h" kind="file">
    <name>Common.h</name>
    <member refid="_common_8h_1ac7bef5d85e3dcd73eef56ad39ffc84a9" kind="define">
      <name>WIN32_LEAN_AND_MEAN</name>
    </member>
    <member refid="_common_8h_1a9f918755b601cf4bffca775992e6fb90" kind="define">
      <name>NOMINMAX</name>
    </member>
    <member refid="_common_8h_1ac0e88b6fdaaa03802f247d7a736ecb4b" kind="define">
      <name>ASSERT</name>
    </member>
    <member refid="_common_8h_1a29d68b27ecdda67db16fd3b12eee27bb" kind="define">
      <name>DX_API</name>
    </member>
    <member refid="_common_8h_1a29a61474854edfeed19457644161249f" kind="define">
      <name>OUTPUT_BUFFER_SIZE</name>
    </member>
    <member refid="_common_8h_1ae9083c8efbd8361fa785259ba1c896e9" kind="typedef">
      <name>IDXGIFactory6</name>
    </member>
  </compound>
  <compound refid="_d3_d12_buffers_8cpp" kind="file">
    <name>D3D12Buffers.cpp</name>
  </compound>
  <compound refid="_d3_d12_buffers_8h" kind="file">
    <name>D3D12Buffers.h</name>
  </compound>
  <compound refid="_d3_d12_command_list_8cpp" kind="file">
    <name>D3D12CommandList.cpp</name>
  </compound>
  <compound refid="_d3_d12_command_list_8h" kind="file">
    <name>D3D12CommandList.h</name>
  </compound>
  <compound refid="_d3_d12_command_queue_8cpp" kind="file">
    <name>D3D12CommandQueue.cpp</name>
  </compound>
  <compound refid="_d3_d12_command_queue_8h" kind="file">
    <name>D3D12CommandQueue.h</name>
  </compound>
  <compound refid="_d3_d12_constant_buffer_8cpp" kind="file">
    <name>D3D12ConstantBuffer.cpp</name>
  </compound>
  <compound refid="_d3_d12_constant_buffer_8h" kind="file">
    <name>D3D12ConstantBuffer.h</name>
  </compound>
  <compound refid="_d3_d12_context_8cpp" kind="file">
    <name>D3D12Context.cpp</name>
  </compound>
  <compound refid="_d3_d12_context_8h" kind="file">
    <name>D3D12Context.h</name>
  </compound>
  <compound refid="_d3_d12_depth_buffer_8cpp" kind="file">
    <name>D3D12DepthBuffer.cpp</name>
  </compound>
  <compound refid="_d3_d12_depth_buffer_8h" kind="file">
    <name>D3D12DepthBuffer.h</name>
  </compound>
  <compound refid="_d3_d12_descriptor_heap_8cpp" kind="file">
    <name>D3D12DescriptorHeap.cpp</name>
  </compound>
  <compound refid="_d3_d12_descriptor_heap_8h" kind="file">
    <name>D3D12DescriptorHeap.h</name>
  </compound>
  <compound refid="_d3_d12_fence_8cpp" kind="file">
    <name>D3D12Fence.cpp</name>
  </compound>
  <compound refid="_d3_d12_fence_8h" kind="file">
    <name>D3D12Fence.h</name>
  </compound>
  <compound refid="_d3_d12_renderer_a_p_i_8cpp" kind="file">
    <name>D3D12RendererAPI.cpp</name>
  </compound>
  <compound refid="_d3_d12_renderer_a_p_i_8h" kind="file">
    <name>D3D12RendererAPI.h</name>
  </compound>
  <compound refid="_d3_d12_shader_8cpp" kind="file">
    <name>D3D12Shader.cpp</name>
  </compound>
  <compound refid="_d3_d12_shader_8h" kind="file">
    <name>D3D12Shader.h</name>
  </compound>
  <compound refid="_d3_d12_swap_chain_8cpp" kind="file">
    <name>D3D12SwapChain.cpp</name>
  </compound>
  <compound refid="_d3_d12_swap_chain_8h" kind="file">
    <name>D3D12SwapChain.h</name>
  </compound>
  <compound refid="_d3_d12_vertex_array_8cpp" kind="file">
    <name>D3D12VertexArray.cpp</name>
  </compound>
  <compound refid="_d3_d12_vertex_array_8h" kind="file">
    <name>D3D12VertexArray.h</name>
  </compound>
  <compound refid="d3dx12_8h" kind="file">
    <name>d3dx12.h</name>
  </compound>
  <compound refid="_s_d_l_event_source_8cpp" kind="file">
    <name>SDLEventSource.cpp</name>
  </compound>
  <compound refid="_s_d_l_event_source_8h" kind="file">
    <name>SDLEventSource.h</name>
  </compound>
  <compound refid="_s_d_l_module_8cpp" kind="file">
    <name>SDLModule.cpp</name>
  </compound>
  <compound refid="_s_d_l_module_8h" kind="file">
    <name>SDLModule.h</name>
  </compound>
  <compound refid="_default-_f_s_8h" kind="file">
    <name>Default-FS.h</name>
    <member refid="_default-_f_s_8h_1a23021beaaa8221fcdc5891b5b7e6d09c" kind="variable">
      <name>g_main</name>
    </member>
  </compound>
  <compound refid="_default-_v_s_8h" kind="file">
    <name>Default-VS.h</name>
    <member refid="_default-_v_s_8h_1a23021beaaa8221fcdc5891b5b7e6d09c" kind="variable">
      <name>g_main</name>
    </member>
  </compound>
  <compound refid="_asset_loader_8cpp" kind="file">
    <name>AssetLoader.cpp</name>
  </compound>
  <compound refid="_asset_loader_8h" kind="file">
    <name>AssetLoader.h</name>
  </compound>
  <compound refid="_asset_manager_8cpp" kind="file">
    <name>AssetManager.cpp</name>
  </compound>
  <compound refid="_asset_manager_8h" kind="file">
    <name>AssetManager.h</name>
  </compound>
  <compound refid="_material_8cpp" kind="file">
    <name>Material.cpp</name>
  </compound>
  <compound refid="_material_8h" kind="file">
    <name>Material.h</name>
  </compound>
  <compound refid="_mesh_8cpp" kind="file">
    <name>Mesh.cpp</name>
  </compound>
  <compound refid="_mesh_8h" kind="file">
    <name>Mesh.h</name>
  </compound>
  <compound refid="_shadow_asset_2_assets_2_texture_8cpp" kind="file">
    <name>Texture.cpp</name>
  </compound>
  <compound refid="_shadow_renderer_2_texture_8cpp" kind="file">
    <name>Texture.cpp</name>
  </compound>
  <compound refid="_shadow_asset_2_assets_2_texture_8h" kind="file">
    <name>Texture.h</name>
  </compound>
  <compound refid="_shadow_renderer_2_texture_8h" kind="file">
    <name>Texture.h</name>
  </compound>
  <compound refid="_shadow_asset_8cpp" kind="file">
    <name>ShadowAsset.cpp</name>
  </compound>
  <compound refid="_shadow_asset_8h" kind="file">
    <name>ShadowAsset.h</name>
  </compound>
  <compound refid="_application_event_8h" kind="file">
    <name>ApplicationEvent.h</name>
  </compound>
  <compound refid="_key_events_8h" kind="file">
    <name>KeyEvents.h</name>
  </compound>
  <compound refid="_mouse_events_8h" kind="file">
    <name>MouseEvents.h</name>
  </compound>
  <compound refid="_i_shadow_event_listener_8h" kind="file">
    <name>IShadowEventListener.h</name>
    <member refid="_i_shadow_event_listener_8h_1a0417443e4a83989b3a5edf2960f95d5c" kind="define">
      <name>EVENT_BIND</name>
    </member>
  </compound>
  <compound refid="_i_shadow_event_source_8cpp" kind="file">
    <name>IShadowEventSource.cpp</name>
  </compound>
  <compound refid="_i_shadow_event_source_8h" kind="file">
    <name>IShadowEventSource.h</name>
  </compound>
  <compound refid="_shadow_event_8cpp" kind="file">
    <name>ShadowEvent.cpp</name>
  </compound>
  <compound refid="_shadow_event_8h" kind="file">
    <name>ShadowEvent.h</name>
  </compound>
  <compound refid="_shadow_event_manager_8cpp" kind="file">
    <name>ShadowEventManager.cpp</name>
  </compound>
  <compound refid="_shadow_event_manager_8h" kind="file">
    <name>ShadowEventManager.h</name>
  </compound>
  <compound refid="_binding_context_8h" kind="file">
    <name>BindingContext.h</name>
  </compound>
  <compound refid="_binding1_d_8h" kind="file">
    <name>Binding1D.h</name>
  </compound>
  <compound refid="_binding2_d_8h" kind="file">
    <name>Binding2D.h</name>
  </compound>
  <compound refid="_binding_a_n_d_8h" kind="file">
    <name>BindingAND.h</name>
  </compound>
  <compound refid="_binding_o_r_8h" kind="file">
    <name>BindingOR.h</name>
  </compound>
  <compound refid="_input_map_binding_8cpp" kind="file">
    <name>InputMapBinding.cpp</name>
  </compound>
  <compound refid="_input_map_binding_8h" kind="file">
    <name>InputMapBinding.h</name>
  </compound>
  <compound refid="_keyboard_binding_8h" kind="file">
    <name>KeyboardBinding.h</name>
  </compound>
  <compound refid="_i_input_binding_8h" kind="file">
    <name>IInputBinding.h</name>
  </compound>
  <compound refid="_input_binding_8h" kind="file">
    <name>InputBinding.h</name>
  </compound>
  <compound refid="_input_modifier_8h" kind="file">
    <name>InputModifier.h</name>
  </compound>
  <compound refid="_binding1_d_inspector_8h" kind="file">
    <name>Binding1DInspector.h</name>
  </compound>
  <compound refid="_binding2_d_inspector_8h" kind="file">
    <name>Binding2DInspector.h</name>
  </compound>
  <compound refid="_binding_a_n_d_inspector_8h" kind="file">
    <name>BindingANDInspector.h</name>
  </compound>
  <compound refid="_binding_o_r_inspector_8h" kind="file">
    <name>BindingORInspector.h</name>
  </compound>
  <compound refid="_input_action_inspector_8h" kind="file">
    <name>InputActionInspector.h</name>
  </compound>
  <compound refid="_keyboard_binding_inspector_8h" kind="file">
    <name>KeyboardBindingInspector.h</name>
  </compound>
  <compound refid="_modifier_hold_inspector_8h" kind="file">
    <name>ModifierHoldInspector.h</name>
  </compound>
  <compound refid="_shadow_input_inspectors_8cpp" kind="file">
    <name>ShadowInputInspectors.cpp</name>
  </compound>
  <compound refid="_i_shadow_action_8h" kind="file">
    <name>IShadowAction.h</name>
  </compound>
  <compound refid="_modifier_context_8cpp" kind="file">
    <name>ModifierContext.cpp</name>
  </compound>
  <compound refid="_modifier_context_8h" kind="file">
    <name>ModifierContext.h</name>
  </compound>
  <compound refid="_modifier_hold_8cpp" kind="file">
    <name>ModifierHold.cpp</name>
  </compound>
  <compound refid="_modifier_hold_8h" kind="file">
    <name>ModifierHold.h</name>
  </compound>
  <compound refid="_modifier_repeat_8cpp" kind="file">
    <name>ModifierRepeat.cpp</name>
  </compound>
  <compound refid="_modifier_repeat_8h" kind="file">
    <name>ModifierRepeat.h</name>
  </compound>
  <compound refid="_shadow_action_8h" kind="file">
    <name>ShadowAction.h</name>
  </compound>
  <compound refid="_shadow_action_system_8cpp" kind="file">
    <name>ShadowActionSystem.cpp</name>
  </compound>
  <compound refid="_shadow_action_system_8h" kind="file">
    <name>ShadowActionSystem.h</name>
  </compound>
  <compound refid="_shadow_map_chunk_8cpp" kind="file">
    <name>ShadowMapChunk.cpp</name>
  </compound>
  <compound refid="_shadow_map_chunk_8h" kind="file">
    <name>ShadowMapChunk.h</name>
  </compound>
  <compound refid="_shadow_map_renderer_8cpp" kind="file">
    <name>ShadowMapRenderer.cpp</name>
  </compound>
  <compound refid="_shadow_map_renderer_8h" kind="file">
    <name>ShadowMapRenderer.h</name>
  </compound>
  <compound refid="_shadow_world_8cpp" kind="file">
    <name>ShadowWorld.cpp</name>
  </compound>
  <compound refid="_shadow_world_8h" kind="file">
    <name>ShadowWorld.h</name>
  </compound>
  <compound refid="_transform_8cpp" kind="file">
    <name>Transform.cpp</name>
  </compound>
  <compound refid="_transform_8h" kind="file">
    <name>Transform.h</name>
  </compound>
  <compound refid="_vector2float_8cpp" kind="file">
    <name>Vector2float.cpp</name>
  </compound>
  <compound refid="_vector2float_8h" kind="file">
    <name>Vector2float.h</name>
  </compound>
  <compound refid="_vector2int_8cpp" kind="file">
    <name>Vector2int.cpp</name>
  </compound>
  <compound refid="_vector2int_8h" kind="file">
    <name>Vector2int.h</name>
  </compound>
  <compound refid="_shadow_module_8cpp" kind="file">
    <name>ShadowModule.cpp</name>
  </compound>
  <compound refid="_shadow_module_8h" kind="file">
    <name>ShadowModule.h</name>
  </compound>
  <compound refid="_shadow_module_manager_8cpp" kind="file">
    <name>ShadowModuleManager.cpp</name>
  </compound>
  <compound refid="_shadow_module_manager_8h" kind="file">
    <name>ShadowModuleManager.h</name>
  </compound>
  <compound refid="_buffer_8cpp" kind="file">
    <name>Buffer.cpp</name>
  </compound>
  <compound refid="_buffer_8h" kind="file">
    <name>Buffer.h</name>
  </compound>
  <compound refid="_command_list_8cpp" kind="file">
    <name>CommandList.cpp</name>
  </compound>
  <compound refid="_command_list_8h" kind="file">
    <name>CommandList.h</name>
  </compound>
  <compound refid="_command_queue_8cpp" kind="file">
    <name>CommandQueue.cpp</name>
  </compound>
  <compound refid="_command_queue_8h" kind="file">
    <name>CommandQueue.h</name>
  </compound>
  <compound refid="_constant_buffer_8cpp" kind="file">
    <name>ConstantBuffer.cpp</name>
  </compound>
  <compound refid="_constant_buffer_8h" kind="file">
    <name>ConstantBuffer.h</name>
  </compound>
  <compound refid="_data_structs_8cpp" kind="file">
    <name>DataStructs.cpp</name>
  </compound>
  <compound refid="_data_structs_8h" kind="file">
    <name>DataStructs.h</name>
  </compound>
  <compound refid="_graphics_context_8cpp" kind="file">
    <name>GraphicsContext.cpp</name>
  </compound>
  <compound refid="_graphics_context_8h" kind="file">
    <name>GraphicsContext.h</name>
  </compound>
  <compound refid="_orthographic_camera_8cpp" kind="file">
    <name>OrthographicCamera.cpp</name>
  </compound>
  <compound refid="_orthographic_camera_8h" kind="file">
    <name>OrthographicCamera.h</name>
  </compound>
  <compound refid="_renderer_8cpp" kind="file">
    <name>Renderer.cpp</name>
  </compound>
  <compound refid="_renderer_8h" kind="file">
    <name>Renderer.h</name>
  </compound>
  <compound refid="_renderer_a_p_i_8cpp" kind="file">
    <name>RendererAPI.cpp</name>
  </compound>
  <compound refid="_renderer_a_p_i_8h" kind="file">
    <name>RendererAPI.h</name>
  </compound>
  <compound refid="_render_scene_8cpp" kind="file">
    <name>RenderScene.cpp</name>
  </compound>
  <compound refid="_render_scene_8h" kind="file">
    <name>RenderScene.h</name>
  </compound>
  <compound refid="_shader_8cpp" kind="file">
    <name>Shader.cpp</name>
  </compound>
  <compound refid="_shader_8h" kind="file">
    <name>Shader.h</name>
  </compound>
  <compound refid="_shader_property_sheet_8cpp" kind="file">
    <name>ShaderPropertySheet.cpp</name>
  </compound>
  <compound refid="_shader_property_sheet_8h" kind="file">
    <name>ShaderPropertySheet.h</name>
  </compound>
  <compound refid="_test_scene_8cpp" kind="file">
    <name>TestScene.cpp</name>
  </compound>
  <compound refid="_test_scene_8h" kind="file">
    <name>TestScene.h</name>
  </compound>
  <compound refid="_shadow_time_8cpp" kind="file">
    <name>ShadowTime.cpp</name>
  </compound>
  <compound refid="_shadow_time_8h" kind="file">
    <name>ShadowTime.h</name>
  </compound>
  <compound refid="_shadow_window_8cpp" kind="file">
    <name>ShadowWindow.cpp</name>
  </compound>
  <compound refid="_shadow_window_8h" kind="file">
    <name>ShadowWindow.h</name>
  </compound>
  <compound refid="shpch_8cpp" kind="file">
    <name>shpch.cpp</name>
  </compound>
  <compound refid="shpch_8h" kind="file">
    <name>shpch.h</name>
    <member refid="shpch_8h_1ad39ff9bc8a4676f8e1e28d695e637360" kind="define">
      <name>GLM_FORCE_LEFT_HANDED</name>
    </member>
    <member refid="shpch_8h_1aa53e0967978ad7a8792f6961156ec968" kind="define">
      <name>GLM_FORCE_DEPTH_ZERO_TO_ONE</name>
    </member>
  </compound>
  <compound refid="_test_renderer_8cpp" kind="file">
    <name>TestRenderer.cpp</name>
  </compound>
  <compound refid="_test_renderer_8h" kind="file">
    <name>TestRenderer.h</name>
  </compound>
  <compound refid="_callback_8cpp" kind="file">
    <name>Callback.cpp</name>
  </compound>
  <compound refid="_callback_8h" kind="file">
    <name>Callback.h</name>
  </compound>
  <compound refid="_utility_8h" kind="file">
    <name>Utility.h</name>
    <member refid="_utility_8h_1a5a183aa95550e10b4aca7da641f3bd90" kind="function">
      <name>is</name>
    </member>
    <member refid="_utility_8h_1a25fad6f6be7b16cb6f25b3774e9cb815" kind="function">
      <name>convert</name>
    </member>
    <member refid="_utility_8h_1ae4be3b1aeb63644894a3ad0140f71c6b" kind="function">
      <name>convert</name>
    </member>
    <member refid="_utility_8h_1abecf67ccdc7d43721ab3d7c78d066aba" kind="function">
      <name>convert</name>
    </member>
  </compound>
  <compound refid="dir_a032f6c995fe45046644228390b8ee4f" kind="dir">
    <name>ShadowEngine/src/ShadowAsset/Assets</name>
  </compound>
  <compound refid="dir_6d2c827fec95fddda3f55ad08947c6f5" kind="dir">
    <name>ShadowEngine/src/ShadowInput/Bindings</name>
  </compound>
  <compound refid="dir_9ce78d75184c77bc77e3f66baad6b102" kind="dir">
    <name>ShadowEngine/src/Core</name>
  </compound>
  <compound refid="dir_08ab68a195f3bb7a63d309f9ae3db160" kind="dir">
    <name>ShadowEngine/src/Platform/D3D12</name>
  </compound>
  <compound refid="dir_faab5396369af50b1fd56b75b9de1ccb" kind="dir">
    <name>ShadowEngine/src/Debug</name>
  </compound>
  <compound refid="dir_8d89ffcd22f6170e8fda041d08e46aa8" kind="dir">
    <name>ShadowEngine/src/EntitySystem/Entities</name>
  </compound>
  <compound refid="dir_861c7bca3101429109b5a452e1f93df3" kind="dir">
    <name>ShadowEngine/src/EntitySystem</name>
  </compound>
  <compound refid="dir_b34ef375d78cf6381608a5042bb30083" kind="dir">
    <name>ShadowEngine/src/ShadowEvents/Events</name>
  </compound>
  <compound refid="dir_4a5c98810ad8aeef03cb0207fc3fc4bf" kind="dir">
    <name>ShadowEngine/src/ImGui</name>
  </compound>
  <compound refid="dir_ca1150cdb2853239be8aacfbff02bd2d" kind="dir">
    <name>ShadowEngine/src/Inspector</name>
  </compound>
  <compound refid="dir_a287c3d8bf9d31441b0573e365791ea6" kind="dir">
    <name>ShadowEngine/src/ShadowInput/Inspectors</name>
  </compound>
  <compound refid="dir_21040b069f993f7e9cf1f3adaeca3c4a" kind="dir">
    <name>ShadowEngine/src/ShadowInput/Modifiers</name>
  </compound>
  <compound refid="dir_4051f1fa74f6d91eb37ece3e913ae9ad" kind="dir">
    <name>ShadowEngine/src/Platform</name>
  </compound>
  <compound refid="dir_5e8e2f84383251518caaf9ebebe06d69" kind="dir">
    <name>ShadowEngine/src/Platform/SDL</name>
  </compound>
  <compound refid="dir_63d9234fb60db58e45cb0166ba811340" kind="dir">
    <name>ShadowEngine/src/Shaders</name>
  </compound>
  <compound refid="dir_39aed58b7dd719ab916da64c26a104ec" kind="dir">
    <name>ShadowEngine/src/ShadowAsset</name>
  </compound>
  <compound refid="dir_658622f7b71c2220bed32c865c21b1ca" kind="dir">
    <name>ShadowEngine</name>
  </compound>
  <compound refid="dir_349fcede6c0c09169f53d1dddddc03e0" kind="dir">
    <name>ShadowEngine/src/ShadowEvents</name>
  </compound>
  <compound refid="dir_eb3c48804ebbb073b41dc5e5775c19c0" kind="dir">
    <name>ShadowEngine/src/ShadowInput</name>
  </compound>
  <compound refid="dir_6b4f3dc5bcb41778cf4de7f2ad2aba19" kind="dir">
    <name>ShadowEngine/src/ShadowMap</name>
  </compound>
  <compound refid="dir_fc1dfdb3fe3b6a3bc357de1a4a2bee77" kind="dir">
    <name>ShadowEngine/src/ShadowMath</name>
  </compound>
  <compound refid="dir_c8cdf72b2e3f3394067328d77bd413d5" kind="dir">
    <name>ShadowEngine/src/ShadowModules</name>
  </compound>
  <compound refid="dir_6c8023b40e746277654c1cf6035167bf" kind="dir">
    <name>ShadowEngine/src/ShadowRenderer</name>
  </compound>
  <compound refid="dir_faddbf20a7f4876b36cb866250c9edfd" kind="dir">
    <name>ShadowEngine/src/ShadowScene</name>
  </compound>
  <compound refid="dir_632e12ec78bf75136b4b27570b77b0de" kind="dir">
    <name>ShadowEngine/src</name>
  </compound>
  <compound refid="dir_c1665bc1ca6eee357f0ea84799516a99" kind="dir">
    <name>ShadowEngine/src/Util</name>
  </compound>
</doxygenindex>